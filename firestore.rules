
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isUserAuthenticated() {
      return request.auth != null;
    }

    // =============================================
    // User Management
    // =============================================

    match /users/{userId} {
      // READ: Anyone can view user profiles.
      allow get, list: if true;

      // CREATE: A user can only create their own user document.
      allow create: if isOwner(userId)
                    && request.resource.data.uid == userId;

      // UPDATE: A user can only update their own profile data.
      // They cannot change their own verification status.
      allow update: if isOwner(userId)
                     && request.resource.data.verification == resource.data.verification;

      // DELETE: No one can delete user documents.
      allow delete: if false;

      // Subcollections for followers/following
      match /followers/{followerId} {
        allow read: if true;
        // A user can add/remove themselves from another user's followers list.
        allow write: if isOwner(followerId);
      }

      match /following/{followingId} {
        allow read: if true;
        // A user can manage their own following list.
        allow write: if isOwner(userId);
      }
    }

    match /usernames/{username} {
      // READ: Only used for internal checks, no public read needed.
      allow read: if false;

      // WRITE: A user can only create a username document if the name matches
      // the username in their own user document. This prevents impersonation.
      allow write: if isUserAuthenticated()
                   && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
    }

    // =============================================
    // Content (Blog Posts & Shorts)
    // =============================================

    match /blogPosts/{postId} {
      // READ: Anyone can read public blog posts.
      allow get, list: if true;

      // CREATE: Any authenticated user can create a post, but must be the author.
      allow create: if isUserAuthenticated()
                    && request.resource.data.authorId == request.auth.uid;
      
      // UPDATE: Only the original author or an admin can update a post.
      allow update: if isOwner(resource.data.authorId) || isAdmin();
      
      // DELETE: Only the original author or an admin can delete a post.
      allow delete: if isOwner(resource.data.authorId) || isAdmin();

      // Subcollection for comments
      match /comments/{commentId} {
        allow get, list: if true;
        allow create: if isUserAuthenticated()
                      && request.resource.data.authorId == request.auth.uid;
        allow delete: if isOwner(resource.data.authorId) || isAdmin();

        // Sub-subcollection for replies to comments
        match /replies/{replyId} {
          allow get, list: if true;
          allow create: if isUserAuthenticated()
                        && request.resource.data.authorId == request.auth.uid;
          allow delete: if isOwner(resource.data.authorId) || isAdmin();
        }
      }
    }

    match /shorts/{shortId} {
      allow get, list: if true;
      allow create: if isUserAuthenticated()
                    && request.resource.data.authorId == request.auth.uid;
      allow update: if isOwner(resource.data.authorId) || isAdmin();
      allow delete: if isOwner(resource.data.authorId) || isAdmin();

      // Subcollection for comments
      match /comments/{commentId} {
        allow get, list: if true;
        allow create: if isUserAuthenticated()
                      && request.resource.data.authorId == request.auth.uid;
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
      }
    }
    
    // =============================================
    // Private Messaging
    // =============================================

    match /chats/{chatId} {
      // READ/WRITE: A user can only access a chat if their UID is in the `users` array.
      allow read, write: if request.auth.uid in resource.data.users || isAdmin();

      match /messages/{messageId} {
        // READ/CREATE: Access is granted by checking the parent chat document.
        allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
        // No updates or deletes for messages to preserve chat history.
        allow update, delete: if false;
      }
    }
    
    // =============================================
    // Verification System
    // =============================================

    match /verificationRequests/{requestId} {
      // CREATE: A user can only create a request for their own UID.
      allow create: if isOwner(request.resource.data.userId);
      // Admin-only access for reading, updating, and deleting requests.
      allow read, update, delete: if isAdmin();
    }
    
    // =============================================
    // Admin & Site Management
    // =============================================

    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
       allow read: if true;
       allow write: if isAdmin();
    }
    
    match /pageContent/{pageId} {
       allow read: if true;
       allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
       allow read: if true;
       allow write: if isAdmin();
    }

    match /coreValues/{valueId} {
       allow read: if true;
       allow write: if isAdmin();
    }

    match /galleryImages/{imageId} {
       allow read: if true;
       allow write: if isAdmin();
    }
  }
}
