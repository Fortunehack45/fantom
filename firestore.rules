
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // Collection: /users
    // Manages user profile data.
    match /users/{userId} {
      // READ: Anyone can view user profiles.
      // LIST: Allows querying the collection, e.g., for finding a user by username.
      allow get, list: if true;
      
      // CREATE: A user can only create their own document.
      allow create: if isUserAuthenticated() && isOwner(userId);
      
      // UPDATE: A user can only update their own data.
      // They cannot change their verification status. Admins can update any profile.
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
    }

    // Collection: /usernames
    // Enforces unique usernames.
    match /usernames/{username} {
      // READ: No one needs to read this directly.
      allow read: if false;

      // CREATE: A user can only create a username document if the name matches
      // the username in their own user document, preventing impersonation.
      allow create: if isUserAuthenticated() && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      
      // DELETE: A user can only delete their own old username document.
      allow delete: if isUserAuthenticated() &&
                       resource.data.uid == request.auth.uid;
    }

    // Subcollections: /followers and /following
    // Manages the social graph.
    match /users/{userId}/followers/{followerId} {
      allow read: if true;
      // A user can only add/remove themselves from another user's followers list.
      allow write: if isUserAuthenticated() && isOwner(followerId);
    }

    match /users/{userId}/following/{followingId} {
      allow read: if true;
      // A user can only manage their own following list.
      allow write: if isUserAuthenticated() && isOwner(userId);
    }
    
    // Collection: /blogPosts
    // Manages blog articles.
    match /blogPosts/{postId} {
      // READ: Anyone can read public blog posts.
      allow get, list: if true;

      // CREATE: Any authenticated user can create a post, but the authorId must be their own.
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;

      // UPDATE/DELETE: Only the original author or an admin can update/delete a post.
      allow update, delete: if isUserAuthenticated() && (resource.data.authorId == request.auth.uid || isAdmin());
    }

    // Collection: /shorts
    // Manages short video posts.
    match /shorts/{shortId} {
      // READ: Anyone can read public shorts.
      allow get, list: if true;

      // CREATE: Any authenticated user can create a short, but the authorId must be their own.
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;

      // UPDATE/DELETE: Only the original author or an admin can update/delete a short.
      allow update, delete: if isUserAuthenticated() && (resource.data.authorId == request.auth.uid || isAdmin());
    }

    // Subcollections: /comments and /replies
    // Manages comments on posts and shorts.
    match /{collection}/{docId}/comments/{commentId} {
      allow read: if true;
      // CREATE: Any signed-in user can create a comment.
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      // DELETE: Only the author or an Admin can delete.
      allow delete: if isUserAuthenticated() && (resource.data.authorId == request.auth.uid || isAdmin());
    }
    
    match /blogPosts/{postId}/comments/{commentId}/replies/{replyId} {
        allow read: if true;
        // CREATE: Any signed-in user can create a reply.
        allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
        // DELETE: Only the author or an Admin can delete.
        allow delete: if isUserAuthenticated() && (resource.data.authorId == request.auth.uid || isAdmin());
    }

    // Collection: /chats
    // Manages private messaging.
    match /chats/{chatId} {
      // Access is only granted if the user's UID is in the `users` array of the chat document.
      // Admin can get/list to see participants for moderation, but not the message content.
      allow get, list: if (isUserAuthenticated() && request.auth.uid in resource.data.users) || isAdmin();
      allow create, update: if isUserAuthenticated() && request.auth.uid in request.resource.data.users;

      // Subcollection: /messages
      // Secures the messages within a chat.
      match /messages/{messageId} {
        // Access is granted by checking the parent `chat` document.
        allow read, create: if isUserAuthenticated() && 
                               get(parent).data.users.hasAny([request.auth.uid]);
      }
    }

    // Collection: /verificationRequests
    // Manages user requests for verification badges.
    match /verificationRequests/{requestId} {
      // CREATE: A user can only create a request for their own UID.
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // READ/UPDATE/DELETE: Only the Admin can manage requests.
      allow read, update, delete: if isAdmin();
    }

    // Admin-managed content collections.
    // Publicly readable, but only writable by the Admin.
    match /roster/{memberId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }

    match /games/{gameId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /pageContent/{pageName} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
  }
}
