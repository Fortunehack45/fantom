
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin
    function isAdmin() {
      // Ensure the user is authenticated before trying to access their data.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email == 'fortunedomination@gmail.com';
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // USERS: Publicly readable, but only the owner or an admin can write.
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId) || isAdmin();

      // FOLLOWERS / FOLLOWING: Users can only follow/unfollow for themselves.
      match /followers/{followerId} {
        allow read: if true;
        allow create, delete: if isOwner(followerId);
        allow update: if false;
      }
      match /following/{followingId} {
        allow read: if true;
        // The user creating the "following" doc is the one whose profile it's under
        allow create, delete: if isOwner(userId);
        allow update: if false;
      }
    }
    
    // USERNAMES: Used for unique username lookups. Read-only for clients.
    // Writes are handled by secure backend logic (or in this case, transactional writes with user profile).
    match /usernames/{username} {
        allow read: if true;
        allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
        allow update: if false;
    }

    // BLOG POSTS: Readable by all, writable by signed-in users, editable only by owner or admin.
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isOwner(resource.data.authorId) || isAdmin();
      allow delete: if isOwner(resource.data.authorId) || isAdmin();

      // COMMENTS: Readable by all, writable by signed-in users, deletable by owner or admin.
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update: if isOwner(resource.data.authorId); // for liking a comment
        allow delete: if isOwner(resource.data.authorId) || isAdmin();

        // REPLIES: Same rules as comments.
        match /replies/{replyId} {
          allow read: if true;
          allow create: if isSignedIn();
          allow update: if isOwner(resource.data.authorId); // for liking a reply
          allow delete: if isOwner(resource.data.authorId) || isAdmin();
        }
      }
    }
    
    // SHORTS: Same logic as blog posts.
    match /shorts/{shortId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
      
      // COMMENTS on shorts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
      }
    }

    // CHATS: Private messaging system
    match /chats/{chatId} {
      // Chat document itself can be read or written to by participants or admin
      allow read, write: if request.auth.uid in resource.data.users || isAdmin();

      // MESSAGES Subcollection
      match /messages/{messageId} {
        // Messages can only be read by participants or admin
        allow read: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]) || isAdmin();
        // Messages can only be created by participants
        allow create: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
        // Messages cannot be updated or deleted
        allow update, delete: if false;
      }
    }

    // VERIFICATION REQUESTS
    match /verificationRequests/{requestId} {
      // Users can create their own request.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Only admins can read, update (approve/deny), or delete requests.
      allow read, update, delete: if isAdmin();
    }
    
    // All other site content collections are managed by the admin.
    // Public read access is granted for display on the site.
    match /announcements/{announcementId} { allow read: if true; allow write: if isAdmin(); }
    match /roster/{memberId} { allow read: if true; allow write: if isAdmin(); }
    match /games/{gameId} { allow read: if true; allow write: if isAdmin(); }
    match /heroImages/{imageId} { allow read: if true; allow write: if isAdmin(); }
    match /timelineEvents/{eventId} { allow read: if true; allow write: if isAdmin(); }
    match /coreValues/{valueId} { allow read: if true; allow write: if isAdmin(); }
    match /galleryImages/{imageId} { allow read: if true; allow write: if isAdmin(); }

    // Settings documents are only writable by admin, readable by all for site function.
    match /siteSettings/{settingId} { allow read: if true; allow write: if isAdmin(); }
    match /pageContent/{pageId} { allow read: if true; allow write: if isAdmin(); }
  }
}
