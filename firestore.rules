rules_version = '2';

// Fantom eSport Security Rules
// Admin UID: Get this by logging in as admin and checking your profile page or Firebase Auth console.
// For now, we use email, but UID is more secure.
// Admin Email: fortunedomination@gmail.com

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =============================================================
    // Helper Functions
    // =============================================================
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // =============================================================
    // User Management (users, usernames)
    // =============================================================
    match /users/{userId} {
      // Anyone can view a user's public profile.
      allow read: if true;
      
      // A user can only create their own profile document.
      allow create: if isOwner(userId);
      
      // A user can update their own profile.
      // They cannot change their role, verification, or uid.
      allow update: if isOwner(userId)
                    && request.resource.data.uid == resource.data.uid
                    && request.resource.data.role == resource.data.role
                    && request.resource.data.verification == resource.data.verification;
      
      // Only an admin can delete a user or change their role/verification status.
      allow delete: if isAdmin();
      
      // Subcollections for following/followers
      match /followers/{followerId} {
        allow read: if true;
        allow write: if isSignedIn() && (isOwner(followerId) || isOwner(userId));
      }
      match /following/{followingId} {
        allow read: if true;
        allow write: if isSignedIn() && (isOwner(followingId) || isOwner(userId));
      }
    }
    
    match /usernames/{username} {
      // Publicly readable to check for existence
      allow read: if true;
      // Only the authenticated user whose UID matches can create/delete their username record
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }

    // =============================================================
    // Content: Blog Posts & Shorts
    // =============================================================
    match /blogPosts/{postId} {
      // Anyone can read blog posts
      allow read: if true;
      
      // Any signed-in user can create a blog post
      allow create: if isSignedIn();
      
      // Only the author or an admin can update or delete a post
      allow update, delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
      
      // Comments and Replies
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        // Only author or admin can delete
        allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
        // Anyone can update, but only to change likes
        allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);

        match /replies/{replyId} {
            allow read: if true;
            allow create: if isSignedIn();
            allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
            allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
        }
      }
    }
    
    match /shorts/{shortId} {
      // Anyone can read shorts
      allow read: if true;
      
      // Any signed-in user can create a short
      allow create: if isSignedIn();

      // Anyone can update likes/shares
      allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasAny(['likes', 'shares']);
      
      // Only author or admin can delete
      allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());

      // Comments on shorts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
      }
    }

    // =============================================================
    // Private Messaging (chats)
    // =============================================================
    match /chats/{chatId} {
      // Allow read/write only if the user is part of the chat, or is an admin
      allow read, write: if (isSignedIn() && request.auth.uid in resource.data.users) || isAdmin();
      
      match /messages/{messageId} {
        // Allow read if user is part of the chat, or is an admin
        allow read: if (isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users) || isAdmin();
        // Allow create if user is the sender and part of the chat
        allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid 
                      && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    // =============================================================
    // Admin & Site Management
    // =============================================================
    
    // Publicly readable content for homepage, about page, etc.
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /pageContent/{pageId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /verificationRequests/{requestId} {
      // Only admins can read/write verification requests
      allow read, write: if isAdmin();
      // Users can create their own request
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
    
    // Default deny all other collections/paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}