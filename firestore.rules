rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // =============================================
    // User Management & Profiles
    // =============================================
    match /users/{userId} {
      // Anyone can read user profile data
      allow get, list: if true;
      
      // A user can create their own document
      allow create: if request.auth != null && request.auth.uid == userId;

      // A user can only update their own profile.
      // They cannot change their verification status.
      allow update: if (request.auth.uid == userId && request.resource.data.verification == resource.data.verification) || isAdmin();
      
      // Only an Admin can delete a user (for moderation)
      allow delete: if isAdmin();
      
      // --- Subcollections ---
      match /followers/{followerId} {
        // A user can only add/remove themself from another user's followers list.
        allow write: if request.auth != null && request.auth.uid == followerId;
        // Publicly readable
        allow read: if true;
      }
      
      match /following/{followingId} {
        // A user can only manage their own following list
        allow write: if request.auth != null && request.auth.uid == userId;
         // Publicly readable
        allow read: if true;
      }
    }
    
    // This collection enforces unique usernames.
    match /usernames/{username} {
      // Allow read for username existence checks.
      allow get: if true;
      
      // A user can only create a username document if their own username matches.
      // This prevents impersonation.
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      
      // Only the user who owns the username or an Admin can delete it.
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid || isAdmin();
    }


    // =============================================
    // Content (Blog Posts & Shorts)
    // =============================================
    match /blogPosts/{postId} {
      allow get, list: if true;
      
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;

      // Only author or admin can update post content.
      // Any authenticated user can update the likes array.
      allow update: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin()
                    || (request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      
      allow delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();
      
      // --- Subcollections for Comments & Replies ---
      match /comments/{commentId} {
        allow read, list: if true;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();
        
        match /replies/{replyId} {
            allow read, list: if true;
            allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
            allow delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }
    
    match /shorts/{shortId} {
      allow get, list: if true;

      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      
      // Only author or admin can update post content.
      // Any authenticated user can update the likes or shares.
      allow update: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin()
                     || (request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'shares']));

      allow delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();
      
       match /comments/{commentId} {
        allow read, list: if true;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }
    
    
    // =============================================
    // Private Messaging
    // =============================================
    match /chats/{chatId} {
      // Only participants can read/write the chat document.
      allow get, update, delete: if request.auth != null && request.auth.uid in resource.data.users || isAdmin();
      allow create: if request.auth != null && request.auth.uid in request.resource.data.users;
      // Admin can list chats for moderation purposes.
      allow list: if isAdmin();

      match /messages/{messageId} {
        // A user can only read/create messages if they are part of the parent chat.
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        allow update, delete: if false; // Messages are immutable
      }
    }


    // =============================================
    // Verification System
    // =============================================
    match /verificationRequests/{requestId} {
      // User can only create a request for their own UID.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Only admin can read, update, or delete requests.
      allow read, update, delete: if isAdmin();
    }


    // =============================================
    // Admin & Site Management
    // =============================================
    match /roster/{memberId} {
      allow read: if true;
      allow write, delete: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: if true;
      allow write, delete: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow write, delete: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
       allow read: if true;
       allow write, delete: if isAdmin();
    }
    
    match /pageContent/{pageId} {
       allow read: if true;
       allow write, delete: if isAdmin();
    }
    
    match /heroImages/{imageId} {
       allow read: if true;
       allow write, delete: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
       allow read: if true;
       allow write, delete: if isAdmin();
    }
    
    match /coreValues/{valueId} {
       allow read: if true;
       allow write, delete: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
       allow read: if true;
       allow write, delete: if isAdmin();
    }
  }
}
