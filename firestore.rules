rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ==== ADMIN FUNCTION ====
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com' && request.auth.token.email_verified;
    }

    // ==== USER DATA ====
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow read: if true;
      // Only the user themselves or an admin can update their profile
      allow update: if request.auth.uid == userId || isAdmin();
      // Users are created via a function, but prevent direct creation here
      allow create: if request.auth.uid == userId;
      // Followers and Following subcollections
      match /followers/{followerId} {
        allow read: if true;
        allow write: if request.auth.uid == followerId || request.auth.uid == userId || isAdmin();
      }
      match /following/{followingId} {
        allow read: if true;
        allow write: if request.auth.uid == userId || isAdmin();
      }
    }
    
    // Usernames collection for ensuring uniqueness
    match /usernames/{username} {
      // Anyone can check if a username exists
      allow read: if true;
      // Only authenticated users can claim a username (done via backend logic)
      allow create: if request.auth != null;
      // Only the user who owns it or an admin can delete it (on username change)
      allow delete: if resource.data.uid == request.auth.uid || isAdmin();
    }

    // ==== PUBLIC/SITE CONTENT ====
    match /blogPosts/{postId} {
      // Anyone can read blog posts
      allow read: if true;
      // Only authenticated users can create posts
      allow create: if request.auth != null;
      // Only the author or an admin can update/delete
      allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        // Authenticated users can add comments
        allow create: if request.auth != null;
        // Only the comment author or an admin can update/delete
        allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();

        // Replies sub-subcollection
        match /replies/{replyId} {
          allow read: if true;
          allow create: if request.auth != null;
          allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();
        }
      }
    }

    match /shorts/{shortId} {
        // Anyone can view shorts
        allow read: if true;
        // Only authenticated users can create
        allow create: if request.auth != null;
        // Only the author or admin can delete
        allow delete: if resource.data.authorId == request.auth.uid || isAdmin();
        // Likes are handled via update
        allow update: if request.auth != null;

        // Comments on shorts
        match /comments/{commentId} {
            allow read: if true;
            allow create: if request.auth != null;
            allow delete: if resource.data.authorId == request.auth.uid || isAdmin();
        }
    }
    
    match /roster/{memberId} {
      // Anyone can read the roster
      allow read: if true;
      // Only admin can modify the roster
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      // Anyone can read announcements
      allow read: if true;
      // Only admin can create/delete/update announcements
      allow write: if isAdmin();
    }

    match /games/{gameId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /heroImages/{imageId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /coreValues/{valueId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /galleryImages/{imageId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /pageContent/{pageName} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /siteSettings/{settingsId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ==== PRIVATE MESSAGING ====
    match /chats/{chatId} {
        // You can read/write to a chat if you are one of the participants or an admin
        allow read, write: if request.auth.uid in resource.data.users || isAdmin();

        match /messages/{messageId} {
            // You can read messages if you are part of the chat or an admin
            allow read: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]) || isAdmin();
            // You can create a message if you are the sender and part of the chat.
            allow create: if request.resource.data.senderId == request.auth.uid && get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
        }
    }

    // ==== VERIFICATION REQUESTS ====
    match /verificationRequests/{requestId} {
        // User can create their own request
        allow create: if request.resource.data.userId == request.auth.uid;
        // Only Admin can read or update (approve/deny) requests
        allow read, update: if isAdmin();
    }
  }
}