rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // Helper Functions
    // =A ====================================================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isAdmin() {
      return isSignedIn() && getRole(request.auth.uid) == 'Clan Owner';
    }

    function isCreator() {
        return isSignedIn() && (getRole(request.auth.uid) == 'Creator' || isAdmin());
    }

    // =====================================================================
    // Users, Usernames & Follows
    // =====================================================================
    match /users/{userId} {
      allow read;
      allow create: isSignedIn() && isOwner(userId)
                  && request.resource.data.username is string
                  && request.resource.data.email == request.auth.email
                  && request.resource.data.uid == request.auth.uid
                  && request.resource.data.role == 'User'
                  && request.resource.data.verification == 'None';

      allow update: (isSignedIn() && isOwner(userId)) || isAdmin();

      // Subcollections for follows
      match /followers/{followerId} {
        allow read;
        allow write: isSignedIn() && (isOwner(followerId) || isOwner(userId));
      }
      match /following/{followingId} {
        allow read;
        allow write: isSignedIn() && isOwner(userId);
      }
    }
    
    match /usernames/{username} {
        allow read;
        allow create, delete: isSignedIn();
    }


    // =====================================================================
    // Content Collections (Blog, Shorts) & Subcollections (Comments, Likes)
    // =====================================================================
    match /blogPosts/{postId} {
      allow read;
      allow create: isCreator()
                    && request.resource.data.authorId == request.auth.uid
                    && request.resource.data.slug is string
                    && request.resource.data.title is string
                    && request.resource.data.content is string;
      
      allow update: (isSignedIn() && request.resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: (isSignedIn() && get(/databases/$(database)/documents/blogPosts/$(postId)).data.authorId == request.auth.uid) || isAdmin();

      // Likes on blog posts
      match /likes/{userId} {
          allow read;
          allow write: isOwner(userId);
      }
      
      // Comments on blog posts
      match /comments/{commentId} {
        allow read;
        allow create: isSignedIn();
        allow delete: (isSignedIn() && get(/databases/$(database)/documents/blogPosts/$(postId)/comments/$(commentId)).data.authorId == request.auth.uid) || isAdmin();
        
        // Replies to comments
        match /replies/{replyId} {
            allow read;
            allow create: isSignedIn();
            allow delete: (isSignedIn() && get(/databases/$(database)/documents/blogPosts/$(postId)/comments/$(commentId)/replies/$(replyId)).data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }

    match /shorts/{shortId} {
      allow read;
      allow create: isCreator()
                    && request.resource.data.authorId == request.auth.uid
                    && request.resource.data.title is string
                    && request.resource.data.videoUrl is string;

      allow update: (isSignedIn() && request.resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: (isSignedIn() && get(/databases/$(database)/documents/shorts/$(shortId)).data.authorId == request.auth.uid) || isAdmin();

      // Comments on shorts
      match /comments/{commentId} {
        allow read;
        allow create: isSignedIn();
        allow delete: (isSignedIn() && get(/databases/$(database)/documents/shorts/$(shortId)/comments/$(commentId)).data.authorId == request.auth.uid) || isAdmin();
      }
    }

    // =====================================================================
    // Private Messaging
    // =====================================================================
    match /chats/{chatId} {
      allow read, write: isSignedIn() && request.auth.uid in resource.data.users || isAdmin();

      match /messages/{messageId} {
        allow read, create: isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users || isAdmin();
        // Disallow updates and deletes to preserve chat history integrity
        allow update, delete: if false;
      }
    }


    // =====================================================================
    // Admin-Managed Content
    // =====================================================================
    
    // Read-only for users, writeable by admin
    function adminWriteOnly() {
      return {
        allow read;
        allow write: isAdmin();
      };
    }

    match /announcements/{announcementId} { rules: adminWriteOnly() }
    match /roster/{memberId} { rules: adminWriteOnly() }
    match /games/{gameId} { rules: adminWriteOnly() }
    match /heroImages/{imageId} { rules: adminWriteOnly() }
    match /timelineEvents/{eventId} { rules: adminWriteOnly() }
    match /coreValues/{valueId} { rules: adminWriteOnly() }
    match /galleryImages/{imageId} { rules: adminWriteOnly() }
    
    // =====================================================================
    // Settings & Configuration
    // =====================================================================

    match /siteSettings/{settingsId} {
      allow read;
      allow write: isAdmin();
    }
    
    match /pageContent/{pageId} {
        allow read;
        allow write: isAdmin();
    }
    
    // =====================================================================
    // Verification Requests
    // =====================================================================
    match /verificationRequests/{requestId} {
        allow create: isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow read, update, delete: isAdmin();
    }
  }
}