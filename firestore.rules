rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuth() && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // A user can only access their own document
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // Check if a user is a participant in a chat
    function isChatParticipant(chatId) {
      return isAuth() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }
    
    // Check if the incoming data only modifies the 'likes' array
    function isLiking() {
        let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
        return changedKeys.size() == 1 && 'likes' in changedKeys;
    }


    // USERS
    // Users can be publicly read for profiles.
    // Only the owner or an admin can update a profile.
    // Critical fields like 'verification' cannot be changed by the user.
    match /users/{userId} {
      allow get, list: true;
      allow create: isOwner(userId);
      allow update: (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
      allow delete: isAdmin();
      
      // FOLLOWERS & FOLLOWING
      // Publicly readable for profile stats.
      // A user can only add/remove their own ID from another user's followers list.
      // A user can only add/remove documents in their own following list.
      match /followers/{followerId} {
        allow get, list: true;
        allow create, delete: isAuth() && request.auth.uid == followerId;
      }
      match /following/{followingId} {
        allow get, list: true;
        allow create, delete: isOwner(userId);
      }
    }

    // USERNAMES
    // Used to enforce unique usernames.
    // A user can only create a username document that matches what's in their own user document.
    match /usernames/{username} {
      allow get: true;
      allow create: isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      allow delete: isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
    }
    
    // BLOG POSTS
    // Publicly readable.
    // Can only be created by signed-in users.
    // Can only be updated/deleted by the author or an admin.
    match /blogPosts/{postId} {
      allow get: true;
      allow list: true;
      allow create: isAuth() && request.resource.data.authorId == request.auth.uid;
      allow update: (isAuth() && resource.data.authorId == request.auth.uid) || isAdmin() || (isAuth() && isLiking());
      allow delete: (isAuth() && resource.data.authorId == request.auth.uid) || isAdmin();

      // COMMENTS & REPLIES
      // Can be created by any signed-in user.
      // Can only be deleted by the author or an admin.
      match /comments/{commentId} {
        allow create: isAuth();
        allow delete: (isAuth() && resource.data.authorId == request.auth.uid) || isAdmin();

        match /replies/{replyId} {
            allow create: isAuth();
            allow delete: (isAuth() && resource.data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }

    // SHORTS
    // Publicly readable.
    // Can only be created by signed-in users.
    // Can only be updated/deleted by the author or an admin.
    match /shorts/{shortId} {
      allow get: true;
      allow list: true;
      allow create: isAuth() && request.resource.data.authorId == request.auth.uid;
      allow update: (isAuth() && resource.data.authorId == request.auth.uid) || isAdmin() || (isAuth() && isLiking());
      allow delete: (isAuth() && resource.data.authorId == request.auth.uid) || isAdmin();
      
       match /comments/{commentId} {
        allow create: isAuth();
        allow delete: (isAuth() && resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }
    
    // CHATS & MESSAGES
    // Chats can be read/written by participants.
    // Admins can see the list of chats for moderation.
    match /chats/{chatId} {
      allow get, update, write: isChatParticipant(chatId) || isAdmin();
      allow list: isAdmin(); // Only admin can list all chats

      // Messages can be created/read only by participants of the chat.
      match /messages/{messageId} {
        allow create, read: isChatParticipant(chatId) || isAdmin();
        allow write, delete: isAdmin();
      }
    }
    
    // This rule allows a user to query the 'chats' collection if they are a participant.
    // This is required for the main messages page to work.
     match /chats/{chatId} {
      allow list: isAuth() && request.query.where.to_list().size() == 1 &&
                  request.query.where[0].field == 'users' &&
                  request.query.where[0].op == 'array-contains' &&
                  request.query.where[0].value == request.auth.uid;
    }

    // COLLECTION GROUP QUERIES FOR ADMIN "FIX USER DATA"
    match /{path=**}/comments/{commentId} {
      allow read, write: isAdmin();
    }
    match /{path=**}/replies/{replyId} {
      allow read, write: isAdmin();
    }
    
    // VERIFICATION REQUESTS
    // A user can create a request for themselves.
    // Only an admin can read, update, or delete requests.
    match /verificationRequests/{requestId} {
      allow create: isAuth() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: isAdmin();
    }

    // ADMIN-ONLY & SITE-WIDE CONTENT
    // All of these collections are publicly readable,
    // but can only be written to by an Administrator.
    match /announcements/{id} { allow get, list: true; allow write, create, update, delete: isAdmin(); }
    match /roster/{id} { allow get, list: true; allow write, create, update, delete: isAdmin(); }
    match /games/{id} { allow get, list: true; allow write, create, update, delete: isAdmin(); }
    match /heroImages/{id} { allow get, list: true; allow write, create, update, delete: isAdmin(); }
    match /coreValues/{id} { allow get, list: true; allow write, create, update, delete: isAdmin(); }
    match /timelineEvents/{id} { allow get, list: true; allow write, create, update, delete: isAdmin(); }
    match /galleryImages/{id} { allow get, list: true; allow write, create, update, delete: isAdmin(); }
    match /pageContent/{id} { allow get, list: true; allow write, create, update, delete: isAdmin(); }
    match /siteSettings/{id} { allow get, list: true; allow write, create, update, delete: isAdmin(); }
  }
}