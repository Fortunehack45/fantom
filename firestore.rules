
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =====================================================================
    // Helper Functions
    // =====================================================================

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    function isSignedIn() {
      return request.auth != null;
    }
    
    function isParticipant(chatId) {
      return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }

    // =====================================================================
    // User Collections
    // =====================================================================

    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
      
      match /followers/{followerId} {
        allow read, list: if true;
        allow create: if isOwner(followerId);
        allow delete: if isOwner(followerId);
      }
      
      match /following/{followingId} {
        allow read, list: if true;
        allow create: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
    }
    
    match /usernames/{username} {
        allow read: if true;
        allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
        allow delete: if isSignedIn() && request.auth.uid == resource.data.uid;
    }

    // =====================================================================
    // Content Collections (Posts, Shorts, Comments)
    // =====================================================================
    
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isSignedIn() && request.resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: if (isSignedIn() && request.resource.data.authorId == request.auth.uid) || isAdmin();
      
      match /comments/{commentId} {
          allow read: if true;
          allow create: if isSignedIn();
          allow update: if (isSignedIn() && request.resource.data.authorId == request.auth.uid) || isAdmin();
          allow delete: if (isSignedIn() && request.resource.data.authorId == request.auth.uid) || isAdmin();
          
          match /replies/{replyId} {
             allow read: if true;
             allow create: if isSignedIn();
             allow update: if (isSignedIn() && request.resource.data.authorId == request.auth.uid) || isAdmin();
             allow delete: if (isSignedIn() && request.resource.data.authorId == request.auth.uid) || isAdmin();
          }
      }
    }
    
    match /shorts/{shortId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isSignedIn() && request.resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: if (isSignedIn() && request.resource.data.authorId == request.auth.uid) || isAdmin();

      match /comments/{commentId} {
          allow read: if true;
          allow create: if isSignedIn();
          allow update: if (isSignedIn() && request.resource.data.authorId == request.auth.uid) || isAdmin();
          allow delete: if (isSignedIn() && request.resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }
    
    // Collection Group rules for Admin "Fix User Data" feature
    match /{path=**}/comments/{commentId} {
        allow read, write: if isAdmin();
    }
    match /{path=**}/replies/{replyId} {
        allow read, write: if isAdmin();
    }

    // =====================================================================
    // Private Messaging
    // =====================================================================
    
    match /chats/{chatId} {
      allow get: if isParticipant(chatId) || isAdmin();
      allow list: if isAdmin(); // Admin can see list of chats for moderation
      allow create, update, delete: if isParticipant(chatId);
      
       match /messages/{messageId} {
        allow read, create: if isParticipant(chatId);
        allow update, delete: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
      }
    }

    // =====================================================================
    // Site Management & Admin Collections
    // =====================================================================

    match /verificationRequests/{requestId} {
      allow read, update, delete: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
    
    match /roster/{memberId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /heroImages/{imageId} {
       allow read: if true;
       allow create, update, delete: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
       allow read: if true;
       allow create, update, delete: if isAdmin();
    }
    
    match /coreValues/{valueId} {
       allow read: if true;
       allow create, update, delete: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
       allow read: if true;
       allow create, update, delete: if isAdmin();
    }
    
    match /pageContent/{pageName} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}
