rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isUserAuthenticated() && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    // == 1. User Accounts & Profiles ==
    match /users/{userId} {
      allow read: if true;

      allow create: if isOwner(userId)
                      && request.resource.data.username is string
                      && request.resource.data.email == request.auth.token.email;

      allow update: if (isOwner(userId)
                       && request.resource.data.verification == resource.data.verification) // User cannot change their verification
                    || isAdmin(); // Admin can update anything
    }

    // == Unique Usernames ==
    match /usernames/{username} {
      allow read: if true;
      allow create: if isUserAuthenticated()
                      && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      allow delete: if isUserAuthenticated()
                      && resource.data.uid == request.auth.uid;
    }

    // == 2. Content Creation (Blog Posts & Shorts) ==
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();

      // Comments on Blog Posts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
        allow delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();

        // Replies to Comments
        match /replies/{replyId} {
          allow read: if true;
          allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
          allow delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }

    match /shorts/{shortId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();

      // Comments on Shorts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
        allow delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }


    // == 3. Social Interaction ==
    // Following System
    match /users/{userId}/followers/{followerId} {
      allow read: if true;
      allow create, delete: if isUserAuthenticated() && request.auth.uid == followerId;
    }
    match /users/{userId}/following/{followingId} {
      allow read: if true;
      allow create, delete: if isUserAuthenticated() && request.auth.uid == userId;
    }

    // == 4. Private Messaging ==
    match /chats/{chatId} {
      allow get: if isUserAuthenticated() && request.auth.uid in resource.data.users || isAdmin();
      allow list: if isUserAuthenticated() && request.auth.uid in resource.data.users; // Admin cannot list chats
      allow create, update: if isUserAuthenticated() && request.auth.uid in request.resource.data.users;

      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }

    // == 5. Verification System ==
    match /verificationRequests/{requestId} {
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isAdmin();
    }

    // == 6. Administrator Panel & Site Management ==
    // Generic collections managed only by the admin
    match /roster/{memberId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /announcements/{announcementId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /games/{gameId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /heroImages/{imageId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /timelineEvents/{eventId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    match /coreValues/{valueId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
     match /galleryImages/{imageId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }

    // Settings documents, only editable by admin
    match /siteSettings/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    match /pageContent/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}