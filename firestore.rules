rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    //----------------------------------------------------------------------
    //  HELPER FUNCTIONS
    //----------------------------------------------------------------------
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    //----------------------------------------------------------------------
    //  USERS & USERNAMES
    //----------------------------------------------------------------------
    match /users/{userId} {
      // Anyone can view a user's profile.
      allow get, list: true;

      // A user can create their own document, ensuring the data matches their auth credentials.
      allow create: if isOwner(userId)
                    && request.resource.data.email == request.auth.token.email
                    && request.resource.data.uid == request.auth.uid;

      // An owner can update their own profile, but cannot change their verification status.
      // An admin can update any profile.
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();

      // Nobody can delete user profiles directly.
      allow delete: if false;

      // Followers and Following Subcollections
      match /followers/{followerId} {
        allow get, list: true;
        allow create: if request.auth.uid == followerId;
        allow delete: if request.auth.uid == followerId || isOwner(userId);
      }
      match /following/{followingId} {
        allow get, list: true;
        allow create: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
    }

    match /usernames/{username} {
      // Anyone can check if a username exists.
      allow get: true;
      
      // A user can only create a username document if it matches the username in their own user profile.
      allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      
      // A user can only delete their own old username document.
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/usernames/$(username)).data.uid == request.auth.uid;
    }

    //----------------------------------------------------------------------
    //  CONTENT (BLOG POSTS, SHORTS & COMMENTS)
    //----------------------------------------------------------------------
    match /blogPosts/{postId} {
      allow read: true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();

      match /comments/{commentId} {
        allow read: true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();

        match /replies/{replyId} {
          allow read: true;
          allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
          allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }

    match /shorts/{shortId} {
      allow read: true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();

      match /comments/{commentId} {
        allow read: true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }
    
    // Collection group queries for admin to perform "Fix User Data"
    match /{path=**}/comments/{commentId} {
        allow read, write: if isAdmin();
    }
    match /{path=**}/replies/{replyId} {
        allow read, write: if isAdmin();
    }


    //----------------------------------------------------------------------
    //  PRIVATE MESSAGING
    //----------------------------------------------------------------------
    match /chats/{chatId} {
      // A user can only get/update a chat if they are a participant. Admin can get for moderation.
      allow get, update: if isSignedIn() && (request.auth.uid in resource.data.users || isAdmin());
      // A user can list chats they are in. Admin can list all chats.
      allow list: if isSignedIn() && (request.query.where.array_contains == request.auth.uid || isAdmin());
      // A user can create a chat if they are one of the participants.
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.users;

      match /messages/{messageId} {
        // A user can read/create messages only if they are a participant of the parent chat.
        allow read, create: if isSignedIn() && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users);
      }
    }

    //----------------------------------------------------------------------
    //  VERIFICATION REQUESTS
    //----------------------------------------------------------------------
    match /verificationRequests/{requestId} {
      // A user can only create a request for themselves.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Only an admin can read, update, or delete requests.
      allow read, update, delete: if isAdmin();
    }

    //----------------------------------------------------------------------
    //  SITE-WIDE CONTENT (ADMIN ONLY)
    //----------------------------------------------------------------------
    function isPublicRead() {
      return request.method == 'get' || request.method == 'list';
    }

    // Generic rule for read-only public content, writable only by admin.
    match /{collection}/{docId}
    where collection in ['roster', 'announcements', 'games', 'heroImages', 'timelineEvents', 'coreValues', 'galleryImages', 'pageContent', 'siteSettings'] {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
