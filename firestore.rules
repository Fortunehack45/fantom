
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isCreatorOrOwner(userId) {
      let role = getRole(userId);
      return role == 'Creator' || role == 'Clan Owner';
    }

    //------------------------------------------------------------
    // Public Content: Anyone can read, only admin can write.
    //------------------------------------------------------------
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /timelineEvents/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /coreValues/{valueId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /galleryImages/{galleryImageId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /roster/{memberId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    //------------------------------------------------------------
    // Site Settings: Only admin can read or write.
    //------------------------------------------------------------
    match /siteSettings/{settingsId} {
      allow read, write: if isAdmin();
    }
     match /pageContent/{contentId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    //------------------------------------------------------------
    // User Profiles, Followers, and Usernames
    //------------------------------------------------------------
    match /users/{userId} {
      allow read: if true;
      allow create: if isSignedIn() && isOwner(userId)
                    && request.resource.data.username is string
                    && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) || isAdmin();
      
      // Followers subcollection
      match /followers/{followerId} {
        allow read: if true;
        allow create, delete: if isSignedIn() && isOwner(followerId);
      }
      
      // Following subcollection
      match /following/{followingId} {
        allow read: if true;
        allow create, delete: if isSignedIn() && isOwner(userId);
      }
    }
    
    match /usernames/{username} {
        allow read: if true;
        allow create, delete: if isSignedIn();
    }
    
    //------------------------------------------------------------
    // Verification Requests
    //------------------------------------------------------------
    match /verificationRequests/{requestId} {
        allow read, update: if isAdmin();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    //------------------------------------------------------------
    // Blog Posts and subcollections (Comments, Replies)
    //------------------------------------------------------------
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isOwner(resource.data.authorId) || isAdmin();
      allow delete: if isOwner(resource.data.authorId) || isAdmin();

      // Likes on posts
      // This is handled by the update rule on the post document itself.
      // e.g., updating the 'likes' array.

      // Comments on posts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
        
        // Replies to comments
        match /replies/{replyId} {
            allow read: if true;
            allow create: if isSignedIn();
            allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
        }
      }
    }

    //------------------------------------------------------------
    // Shorts and subcollections (Comments)
    //------------------------------------------------------------
    match /shorts/{shortId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isOwner(resource.data.authorId) || isAdmin();
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
      
      // Comments on shorts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
      }
    }

    //------------------------------------------------------------
    // Private Messaging / Chats
    //------------------------------------------------------------
    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.users || isAdmin();

      match /messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users || isAdmin();
      }
    }
  }
}
