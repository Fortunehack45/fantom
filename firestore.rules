rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    //--------------------------------------------------------------
    // 1. USER ACCOUNTS & PROFILES
    //--------------------------------------------------------------
    match /users/{userId} {
      // Anyone can view a user's public profile.
      allow read: if true;
      
      // A user can create their own profile document.
      allow create: if isOwner(userId);
      
      // A user can update their own username, photoURL, and role. They cannot change their verification.
      // Admin can update any user's profile (e.g., to assign verification).
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
    }
    
    match /usernames/{username} {
      // Anyone can check if a username exists.
      allow read: if true;
      // A user can create their own username document, but not one for someone else.
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      // Only the user who owns the username can delete it (part of the username change process).
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }
    
    //--------------------------------------------------------------
    // 2. CONTENT CREATION (Blog Posts & Shorts)
    //--------------------------------------------------------------
    match /blogPosts/{postId} {
      // Anyone can read public blog posts.
      allow read: if true;
      
      // Any authenticated user can create a post, but the authorId must be their own.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      
      // Only the author or an admin can update or delete a post.
      allow update, delete: if (isOwner(resource.data.authorId) || isAdmin());
    }

    match /shorts/{shortId} {
      // Anyone can read public shorts.
      allow read: if true;
      
      // Any authenticated user can create a short, but the authorId must be their own.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      
      // Only the author or an admin can update or delete a short.
      allow update, delete: if (isOwner(resource.data.authorId) || isAdmin());
    }

    //--------------------------------------------------------------
    // 3. SOCIAL INTERACTION (Likes, Comments, Follows)
    //--------------------------------------------------------------
    // Likes are handled by updating the `likes` array on the post/short document itself.
    // The `update` rules for /blogPosts/{postId} and /shorts/{shortId} are sufficient,
    // as we allow the author to update their own post. A more granular rule would be:
    // `allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);`
    // But the current owner-based rule also covers this.

    // Comments on Blog Posts
    match /blogPosts/{postId}/comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if (isOwner(resource.data.authorId) || isAdmin());
        
        // Replies to Comments
        match /replies/{replyId} {
            allow read: if true;
            allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
            allow update, delete: if (isOwner(resource.data.authorId) || isAdmin());
        }
    }
    
    // Comments on Shorts
    match /shorts/{shortId}/comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if (isOwner(resource.data.authorId) || isAdmin());
    }
    
    // Following System
    match /users/{userId}/followers/{followerId} {
      // A user can only add/remove themselves as a follower of someone else.
      allow create, delete: if isOwner(followerId);
      allow read: if true;
    }
    
    match /users/{userId}/following/{followingId} {
       // A user can only modify their own "following" list.
       allow create, delete: if isOwner(userId);
       allow read: if true;
    }
    
    //--------------------------------------------------------------
    // 4. PRIVATE MESSAGING
    //--------------------------------------------------------------
    match /chats/{chatId} {
      // Allow read/write/update only if the user is a participant in the chat.
      allow read, write, update: if isSignedIn() && request.auth.uid in resource.data.users;
      
      // Admin can get a specific chat document to see participants, but not list all chats.
      allow get: if isAdmin();
      
      match /messages/{messageId} {
         // Allow create/read if the user is a participant of the parent chat.
         allow create, read: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    //--------------------------------------------------------------
    // 5. VERIFICATION SYSTEM
    //--------------------------------------------------------------
    match /verificationRequests/{requestId} {
      // A user can only create a request for their own UID.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Only the Admin can read, update, or delete requests.
      allow read, update, delete: if isAdmin();
    }
    
    //--------------------------------------------------------------
    // 6. ADMINISTRATOR PANEL & SITE MANAGEMENT
    //--------------------------------------------------------------
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /siteSettings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /pageContent/{pageId} {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}