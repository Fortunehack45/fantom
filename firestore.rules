
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isUserAuthenticated() {
      return request.auth != null;
    }

    // USER DATA
    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
    }

    match /usernames/{username} {
      allow read;
      allow create, delete: if isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username || isAdmin();
    }
    
    match /users/{userId}/followers/{followerId} {
        allow read;
        allow create, delete: if isOwner(followerId) || isAdmin(); 
    }

    match /users/{userId}/following/{followingId} {
        allow read;
        allow create, delete: if isOwner(userId) || isAdmin();
    }
    
    // CONTENT
    match /blogPosts/{postId} {
      allow read;
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
    }

    match /shorts/{shortId} {
      allow read;
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
    }
    
    // INTERACTIONS (Comments, Replies)
    // The admin needs full write access to comments/replies for the 'Fix User Data' batch job
    match /{path=**}/comments/{commentId} {
      allow read;
      allow create: if isUserAuthenticated();
      allow write: if isAdmin();
      allow update, delete: if isUserAuthenticated() && resource.data.authorId == request.auth.uid;
    }

    match /{path=**}/replies/{replyId} {
      allow read;
      allow create: if isUserAuthenticated();
      allow write: if isAdmin();
      allow update, delete: if isUserAuthenticated() && resource.data.authorId == request.auth.uid;
    }
    
    // MESSAGING
    match /chats/{chatId} {
      allow read, write: if isUserAuthenticated() && request.auth.uid in resource.data.users || isAdmin();
      
      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && get(parent).data.users.hasAny([request.auth.uid]) || isAdmin();
      }
    }
    
    // VERIFICATION
    match /verificationRequests/{requestId} {
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isAdmin();
    }
    
    // SITE MANAGEMENT (Admin Only)
    match /roster/{memberId} {
      allow read;
      allow write: if isAdmin();
    }

    match /announcements/{announcementId} {
      allow read;
      allow write: if isAdmin();
    }

    match /games/{gameId} {
      allow read;
      allow write: if isAdmin();
    }

    match /siteSettings/{settingsId} {
        allow read;
        allow write: if isAdmin();
    }
    
    match /pageContent/{pageId} {
        allow read;
        allow write: if isAdmin();
    }

    match /heroImages/{imageId} {
        allow read;
        allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
        allow read;
        allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
        allow read;
        allow write: if isAdmin();
    }
    
     match /galleryImages/{imageId} {
        allow read;
        allow write: if isAdmin();
    }
  }
}
