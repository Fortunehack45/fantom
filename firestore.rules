
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email == 'fortunedomination@gmail.com';
    }
    
    function getRole(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isVerifiedCreatorOrOwner(userId) {
      let role = getRole(userId);
      return role == 'Creator' || role == 'Clan Owner';
    }

    // Users: Publicly readable, but only the owner can write their own data.
    // Admins can update roles and verification.
    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && !("role" in request.resource.data) && !("verification" in request.resource.data)
                   || (isAdmin() && ("role" in request.resource.data || "verification" in request.resource.data));
      allow delete: if isAdmin();
      
      // Followers/Following Subcollections
      match /followers/{followerId} {
        allow read;
        allow create: if isOwner(followerId);
        allow delete: if isOwner(followerId);
      }
      
      match /following/{followingId} {
        allow read;
        allow create: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
    }
    
    // Usernames: Used to ensure usernames are unique.
    match /usernames/{username} {
        allow read;
        allow create: if isSignedIn();
        allow delete: if isSignedIn();
    }

    // Site Settings: Read-only for users, writable by admins.
    match /siteSettings/{docId} {
      allow read;
      allow write: if isAdmin();
    }

    // Page Content: Read-only for users, writable by admins.
    match /pageContent/{docId} {
      allow read;
      allow write: if isAdmin();
    }
    
    // Blog Posts: Readable by all. Writable by verified creators/owners or admins.
    // Deletable/Updatable only by the original author or admin.
    match /blogPosts/{postId} {
      allow read;
      allow create: if isSignedIn() && isVerifiedCreatorOrOwner(request.auth.uid);
      allow update: if isOwner(resource.data.authorId) || isAdmin();
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
      
      // Comments: Anyone signed in can comment.
      // Owners of comments or post author or admin can delete.
      match /comments/{commentId} {
        allow read;
        allow create: if isSignedIn();
        allow update: if isOwner(request.resource.data.authorId); // for likes
        allow delete: if isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/blogPosts/$(postId)).data.authorId) || isAdmin();
        
        // Replies: Anyone signed in can reply.
        // Owners of reply or comment or post author or admin can delete.
        match /replies/{replyId} {
          allow read;
          allow create: if isSignedIn();
          allow update: if isOwner(request.resource.data.authorId); // for likes
          allow delete: if isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/blogPosts/$(postId)/comments/$(commentId)).data.authorId) || isOwner(get(/databases/$(database)/documents/blogPosts/$(postId)).data.authorId) || isAdmin();
        }
      }
    }

    // Shorts: Readable by all. Writable by verified creators/owners or admins.
    // Deletable only by author or admin.
    match /shorts/{shortId} {
      allow read;
      allow create: if isSignedIn() && isVerifiedCreatorOrOwner(request.auth.uid);
      allow update: if isOwner(resource.data.authorId) || isAdmin(); // For likes/shares
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
      
       // Comments on shorts
      match /comments/{commentId} {
        allow read;
        allow create: if isSignedIn();
        allow delete: if isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/shorts/$(shortId)).data.authorId) || isAdmin();
      }
    }
    
    // Roster, Announcements, Games, HeroImages, Timeline, CoreValues, Gallery: Writable by admins only.
    match /roster/{memberId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read;
      allow write: if isAdmin();
    }

    match /games/{gameId} {
      allow read;
      allow write: if isAdmin();
    }

    match /heroImages/{imageId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
      allow read;
      allow write: if isAdmin();
    }
    
    // Chats & Messages: Accessible only by participants in the chat or admins.
    match /chats/{chatId} {
      allow get: if request.auth.uid in resource.data.users || isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.users;
      allow update: if request.auth.uid in resource.data.users; // For updating last message
      
      match /messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users || isAdmin();
      }
    }

    // Verification Requests: Users can create them for themselves. Only admins can read/update them.
    match /verificationRequests/{requestId} {
      allow read, update, delete: if isAdmin();
      allow create: if isOwner(request.resource.data.userId);
    }
  }
}
