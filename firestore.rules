
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    //------------------------------------------------------------
    // Helper Functions
    //------------------------------------------------------------
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isAuthor(doc) {
      return isUser(doc.authorId);
    }

    //------------------------------------------------------------
    // User Data & Profiles
    //------------------------------------------------------------
    match /users/{userId} {
      // Allow signed-in users to get profiles and list them (for search/profile pages)
      allow list, get: if isSignedIn();
      
      // Allow a user to create their own document
      allow create: if isUser(userId);
      
      // Allow a user to update their own profile, but not change their verification status
      allow update: if (isUser(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
      
      allow delete: if isAdmin();
      
      match /followers/{followerId} {
        allow read, list;
        allow create, delete: if isUser(followerId) || isAdmin();
      }
      
      match /following/{followingId} {
        allow read, list;
        allow create, delete: if isUser(userId) || isAdmin();
      }
    }
    
    match /usernames/{username} {
      allow get;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      allow delete: if isAdmin() || isUser(get(/databases/$(database)/documents/usernames/$(username)).data.uid);
    }

    //------------------------------------------------------------
    // Publicly Readable Content
    //------------------------------------------------------------
    match /blogPosts/{postId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isAuthor(resource.data) || isAdmin()) ||
                      (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      allow delete: if isAuthor(resource.data) || isAdmin();
    }
    
    match /shorts/{shortId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isAuthor(resource.data) || isAdmin()) ||
                      (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      allow delete: if isAuthor(resource.data) || isAdmin();
    }

    match /roster/{memberId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow read;
      allow write: if isAdmin();
    }

    match /timelineEvents/{eventId} {
      allow read;
      allow write: if isAdmin();
    }

    match /coreValues/{valueId} {
      allow read;
      allow write: if isAdmin();
    }

    match /galleryImages/{imageId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow read;
      allow write: if isAdmin();
    }

    match /pageContent/{pageId} {
      allow read;
      allow write: if isAdmin();
    }

    //------------------------------------------------------------
    // Social: Comments & Replies
    //------------------------------------------------------------
    match /{path=**}/comments/{commentId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if (isAuthor(resource.data) || isAdmin()) ||
                      (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      allow delete: if isAuthor(resource.data) || isAdmin();
    }
    
    match /{path=**}/replies/{replyId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if (isAuthor(resource.data) || isAdmin()) ||
                      (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      allow delete: if isAuthor(resource.data) || isAdmin();
    }

    //------------------------------------------------------------
    // Private Messaging
    //------------------------------------------------------------
    match /chats/{chatId} {
      // Allow participants or admin to get, list, or update a chat document
      allow get, list, update: if (isSignedIn() && request.auth.uid in resource.data.users) || isAdmin();
      
      // Allow a user to create a chat if they are one of the two participants
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.users && request.resource.data.users.size() == 2;
      
      allow delete: if isAdmin();

      match /messages/{messageId} {
        // Allow chat participants or admin to read and create messages
        allow read, create: if (isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid])) || isAdmin();
        
        // Only admin can update or delete messages for moderation
        allow update, delete: if isAdmin();
      }
    }
    
    //------------------------------------------------------------
    // Verification System
    //------------------------------------------------------------
    match /verificationRequests/{requestId} {
      allow get, list, update, delete: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
  }
}
