
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isSignedIn() {
      return request.auth != null;
    }

    match /users/{userId} {
      // READ: Anyone can view profiles.
      allow get, list: if true;
      // CREATE: A user can only create their own user document.
      allow create: if isOwner(userId);
      // UPDATE: A user can only update their own data. Admin can update any.
      allow update: if isOwner(userId) || isAdmin();
    }

    match /usernames/{username} {
      // READ: Publicly readable for uniqueness checks.
      allow get: if true;
      // CREATE: A user can only claim a username that matches their own user document's username.
      allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      // DELETE: Only the user who owns it can delete their username document.
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
    }
    
    match /users/{userId}/followers/{followerId} {
        // READ: Anyone can read the followers list.
        allow get, list: if true;
        // CREATE/DELETE: A user can only add/remove their own ID from another's followers list.
        allow create, delete: if isOwner(followerId);
    }
    
    match /users/{userId}/following/{followingId} {
        // READ: Anyone can read the following list.
        allow get, list: if true;
        // CREATE/DELETE: A user can only add/remove from their own following list.
        allow create, delete: if isOwner(userId);
    }

    match /blogPosts/{postId} {
      // READ: Anyone can read public blog posts.
      allow get, list: if true;
      // CREATE: Any signed-in user can create a post, but must be the author.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      // UPDATE: Only the author or an admin can update.
      allow update: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      // DELETE: Only the author or an admin can delete.
      allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      
      // Comments on Blog Posts
      match /comments/{commentId} {
        allow read, list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
        
        // Replies to Comments
        match /replies/{replyId} {
          allow read, list: if true;
          allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
          allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }

    match /shorts/{shortId} {
      // READ: Anyone can read public shorts.
      allow get, list: if true;
      // CREATE: Any signed-in user can create a short, but must be the author.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      // UPDATE: Only the author or an admin can update.
      allow update: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      // DELETE: Only the author or an admin can delete.
      allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      
      // Comments on Shorts
      match /comments/{commentId} {
        allow read, list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }
    
    match /chats/{chatId} {
      // READ/WRITE: Only participants of the chat can read or write.
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.users;
      
      // Messages within a chat
      match /messages/{messageId} {
         // READ/CREATE: Only participants can read/create messages.
         allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
         // No updates or deletes allowed for messages to maintain chat history integrity.
         allow update, delete: if false;
      }
    }
    
    match /verificationRequests/{requestId} {
      // CREATE: A user can only create a request for themselves.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // READ/UPDATE/DELETE: Only an admin can manage requests.
      allow read, update, delete: if isAdmin();
    }
    
    // Admin-only mutable collections that are publicly readable
    match /{collection}/{docId} {
      allow get, list: if true;
      allow write: if isAdmin();
      
      // Explicitly for collections managed by admin in the panel
      where collection in [
          'roster', 'announcements', 'games', 
          'heroImages', 'timelineEvents', 'coreValues', 
          'galleryImages', 'pageContent', 'siteSettings'
      ];
    }
  }
}
