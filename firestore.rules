rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is the admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(resource) {
        return request.auth.uid == resource.data.authorId;
    }

    // Rules for main content collections
    // Allow public read, but only admin write.
    match /{collectionName}/{docId}
    where collectionName in ['blogPosts', 'roster', 'announcements', 'games', 'heroImages', 'timelineEvents', 'coreValues', 'galleryImages', 'siteSettings', 'pageContent'] {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Rules for blog post likes and comments
    match /blogPosts/{postId} {
        // Likes on a post can be updated by any signed-in user.
        // We only check for auth, the logic to add/remove a like is in the client code.
        allow update: if isSignedIn();

        // Rules for comments on a specific blog post
        match /comments/{commentId} {
            allow read: if true;
            // Any signed-in user can create a comment.
            allow create: if isSignedIn();
            // Likes on comments can be updated by any signed-in user.
            // A user can delete their own comment, or an admin can delete any comment.
            allow update: if isSignedIn();
            allow delete: if isAdmin() || isOwner(resource);

            // Rules for replies to a specific comment
            match /replies/{replyId} {
                 allow read: if true;
                 // Any signed-in user can create a reply.
                 allow create: if isSignedIn();
                 // Likes on replies can be updated by any signed-in user.
                 // A user can delete their own reply, or an admin can delete any reply.
                 allow update: if isSignedIn();
                 allow delete: if isAdmin() || isOwner(resource);
            }
        }
    }
  }
}
