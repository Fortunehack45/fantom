
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    //------------------------------------------------------------
    // Helper Functions
    //------------------------------------------------------------
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Hardcoded admin email for security
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isPostAuthor(postId) {
      return get(/databases/$(database)/documents/blogPosts/$(postId)).data.authorId == request.auth.uid;
    }

    function isShortAuthor(shortId) {
       return get(/databases/$(database)/documents/shorts/$(shortId)).data.authorId == request.auth.uid;
    }
    
    function isCommentAuthor(path) {
      return get(path).data.authorId == request.auth.uid;
    }
    
    function isChatParticipant(chatId) {
        return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }
    
    //------------------------------------------------------------
    // User Profiles & Usernames
    //------------------------------------------------------------
    match /users/{userId} {
      // Anyone can view a user's profile and query the user list
      allow get: if true;
      allow list: if true;

      // A user can only create their own user document
      allow create: if isOwner(userId);

      // A user can only update their own data. Admin can update any user.
      // A user cannot change their own verification status.
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
      
      // A user can only delete their own account. Admin can delete any user.
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    match /usernames/{username} {
      // Anyone can check if a username exists
      allow get: if true;
      allow list: if false;
      
      // A user can only claim a username document that matches the username in their own user document
      // This prevents impersonation and ensures consistency.
      allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      
      // Only the user who owns the username or an admin can delete it (e.g., on account deletion or name change)
      allow delete: if isSignedIn() && (get(/databases/$(database)/documents/usernames/$(username)).data.uid == request.auth.uid || isAdmin());
      allow update: if false;
    }
    
    //------------------------------------------------------------
    // Following and Followers
    //------------------------------------------------------------
    match /users/{userId}/followers/{followerId} {
        // A user can only add/remove their own ID to another user's followers list
        allow write: if isOwner(followerId) || isAdmin();
    }

    match /users/{userId}/following/{followingId} {
        // A user can only add/remove other users from their own following list
        allow write: if isOwner(userId) || isAdmin();
    }

    //------------------------------------------------------------
    // Content: Blog Posts & Shorts
    //------------------------------------------------------------
    match /blogPosts/{postId} {
      // Anyone can read blog posts
      allow get, list: if true;
      
      // Any signed-in user can create a post, but must be the author
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      
      // Only the author or an admin can update or delete
      allow update, delete: if isSignedIn() && (isPostAuthor(postId) || isAdmin());
    }

    match /shorts/{shortId} {
      // Anyone can read shorts
      allow get, list: if true;
      
      // Any signed-in user can create a short, but must be the author
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      
      // Only the author or an admin can update or delete
      allow update, delete: if isSignedIn() && (isShortAuthor(shortId) || isAdmin());
    }

    //------------------------------------------------------------
    // Interactions: Comments & Replies
    //------------------------------------------------------------
    match /blogPosts/{postId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && (isCommentAuthor(path) || isAdmin());
      allow update: if false;
    }
    
    match /blogPosts/{postId}/comments/{commentId}/replies/{replyId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && (isCommentAuthor(path) || isAdmin());
      allow update: if false;
    }
    
    match /shorts/{shortId}/comments/{commentId} {
       allow get, list: if true;
       allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
       allow delete: if isSignedIn() && (isCommentAuthor(path) || isAdmin());
       allow update: if false;
    }
    
    //------------------------------------------------------------
    // Private Messaging
    //------------------------------------------------------------
    match /chats/{chatId} {
        // Only chat participants can read/write. Admin can see metadata for moderation.
        allow get: if isChatParticipant(chatId) || isAdmin();
        allow list: if isAdmin(); // Admin can list chats
        allow create, update: if isChatParticipant(chatId);
    }
    
    match /chats/{chatId}/messages/{messageId} {
      // Only chat participants can read/write messages
      allow read, create: if isChatParticipant(chatId);
      allow update, delete: if false;
    }

    //------------------------------------------------------------
    // Verification System
    //------------------------------------------------------------
    match /verificationRequests/{requestId} {
      // A user can only create a request for themselves
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      
      // Only an admin can manage verification requests
      allow read, update, delete, list: if isAdmin();
    }
    
    //------------------------------------------------------------
    // Admin & Site-wide Content
    // All of these collections are publicly readable but only writable by the Admin.
    //------------------------------------------------------------
    match /roster/{memberId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /pageContent/{pageName} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
  }
}
