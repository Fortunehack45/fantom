
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Clan Owner' || request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isProfileOwner(userId) {
        return request.auth.uid == userId;
    }

    function incomingData() {
      return request.resource.data;
    }

    function existingData() {
      return resource.data;
    }

    // Collection: users
    // Manages user profiles.
    match /users/{userId} {
      // Anyone can view a user's profile.
      allow read: if true;
      
      // Only the user themselves can create their own profile document.
      allow create: if isOwner(userId)
                    && incomingData().uid == userId
                    // Ensure required fields are present on creation
                    && 'username' in incomingData()
                    && 'email' in incomingData()
                    && 'photoURL' in incomingData()
                    && incomingData().role == 'User' // Default role
                    && incomingData().verification == 'None'; // Default verification

      // Users can update their own profile.
      allow update: if isOwner(userId)
                    // Fields that can be updated by the user
                    && incomingData().keys().hasAll(['username', 'photoURL'])
                    // Fields that cannot be changed by the user directly
                    && incomingData().uid == existingData().uid
                    && incomingData().email == existingData().email
                    && incomingData().role == existingData().role
                    && incomingData().verification == existingData().verification;
                    
      // Admin can update any user's profile (for changing roles/verification).
      allow write: if isAdmin();
      
      // Followers and Following subcollections
      match /followers/{followerId} {
        allow read: if true;
        allow write: if isOwner(followerId) || isOwner(userId); // Either user can follow/unfollow
      }
      match /following/{followingId} {
        allow read: if true;
        allow write: if isOwner(followingId) || isOwner(userId);
      }
    }
    
    // Collection: usernames
    // Ensures unique usernames across the platform.
    match /usernames/{username} {
        allow read: if true;
        // Only allow creating a username doc if the user is creating their own profile
        // and a document with that username doesn't already exist.
        allow create: if isOwner(incomingData().uid) && !exists(/databases/$(database)/documents/usernames/$(username));
        // A user can delete their old username doc only if they are creating a new one (handled in batch write).
        allow delete: if isSignedIn();
    }
    
    // Collection: blogPosts
    // Manages blog posts created by users.
    match /blogPosts/{postId} {
      // Anyone can read blog posts.
      allow read: if true;
      // Signed-in users can create posts.
      allow create: if isSignedIn() 
                      && isOwner(incomingData().authorId);
      // Only the author or an admin can update a post.
      allow update: if (isOwner(existingData().authorId) || isAdmin())
                      // Protect author and date fields from being changed
                      && incomingData().authorId == existingData().authorId
                      && incomingData().date == existingData().date;
                      
      // Allow liking/unliking by any signed-in user.
      allow update: if isSignedIn()
                      && incomingData().likes.size() != existingData().likes.size()
                      && incomingData().title == existingData().title;
                      
      // Only the author or an admin can delete a post.
      allow delete: if isOwner(existingData().authorId) || isAdmin();
      
      // Subcollection: comments
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn() && isOwner(incomingData().authorId);
        allow update: if isSignedIn() && isOwner(existingData().authorId); // For liking
        allow delete: if isSignedIn() && (isOwner(existingData().authorId) || isAdmin());
        
        // Sub-subcollection: replies
        match /replies/{replyId} {
            allow read: if true;
            allow create: if isSignedIn() && isOwner(incomingData().authorId);
            allow update: if isSignedIn() && isOwner(existingData().authorId); // For liking
            allow delete: if isSignedIn() && (isOwner(existingData().authorId) || isAdmin());
        }
      }
    }
    
    // Collection: shorts
    // Manages short video content.
    match /shorts/{shortId} {
        allow read: if true;
        allow create: if isSignedIn() && isOwner(incomingData().authorId);
        // Allow updates only for likes and shares by signed-in users.
        allow update: if isSignedIn() 
                      && (incomingData().likes.size() != existingData().likes.size() || incomingData().shares != existingData().shares)
                      && incomingData().title == existingData().title; // ensure other fields are not changed
        allow delete: if isOwner(existingData().authorId) || isAdmin();

        // Subcollection: comments on shorts
        match /comments/{commentId} {
            allow read: if true;
            allow create: if isSignedIn() && isOwner(incomingData().authorId);
            allow delete: if isSignedIn() && (isOwner(existingData().authorId) || isAdmin());
        }
    }

    // Collection: chats
    // Manages private conversations.
    match /chats/{chatId} {
        // Allow access only to participants of the chat or an admin.
        allow read, write: if request.auth.uid in resource.data.users || isAdmin();

        // Subcollection: messages within a chat
        match /messages/{messageId} {
            allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users || isAdmin();
        }
    }

    // Collection: verificationRequests
    // Manages user requests for verification.
    match /verificationRequests/{requestId} {
        // Admins can read all requests.
        allow read: if isAdmin();
        // Users can create their own request.
        allow create: if isOwner(incomingData().userId);
        // Only admins can update (approve/deny) a request.
        allow update: if isAdmin();
        // Only admins can delete requests.
        allow delete: if isAdmin();
    }
    
    // Admin-only collections
    // These collections are managed through the admin panel.
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /coreValues/{valueId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /galleryImages/{galleryImageId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Site-wide settings collections
    match /siteSettings/{settingsId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /pageContent/{pageId} {
        allow read: if true;
        allow write: if isAdmin();
    }

  }
}
