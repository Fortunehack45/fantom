
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Clan Owner' || request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isProfileOwner(profileId) {
        return request.auth.uid == profileId;
    }

    // Collection: users
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId) 
                    && request.resource.data.uid == userId
                    && request.resource.data.email == request.auth.token.email;
      allow update: if isProfileOwner(userId) || isAdmin();
      
      // Subcollections for follows
      match /followers/{followerId} {
        allow read: if true;
        allow create: if isOwner(followerId);
        allow delete: if isOwner(followerId) || isProfileOwner(userId);
      }
      
      match /following/{followingId} {
        allow read: if true;
        allow create: if isOwner(userId);
        allow delete: if isOwner(userId) || isProfileOwner(followingId);
      }
    }
    
    // Collection: usernames (for uniqueness check)
    match /usernames/{username} {
        allow read: if true;
        allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
        allow delete: if isAuthenticated(); // Allow deletion when username is changed
    }

    // Collection: blogPosts
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAdmin();
      allow delete: if isAdmin() || (isAuthenticated() && resource.data.authorId == request.auth.uid);
      
      // Subcollection: comments
      match /comments/{commentId} {
        allow read: if true;
        allow create, update: if isAuthenticated();
        allow delete: if isAdmin() || (isAuthenticated() && resource.data.authorId == request.auth.uid);
        
        // Subcollection: replies
        match /replies/{replyId} {
            allow read: if true;
            allow create, update: if isAuthenticated();
            allow delete: if isAdmin() || (isAuthenticated() && resource.data.authorId == request.auth.uid);
        }
      }
    }

    // Collection: shorts
    match /shorts/{shortId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && resource.data.authorId == request.auth.uid;
        allow delete: if isAdmin() || (isAuthenticated() && resource.data.authorId == request.auth.uid);

        // Subcollection: comments on shorts
        match /comments/{commentId} {
            allow read: if true;
            allow create: if isAuthenticated();
            allow delete: if isAdmin() || (isAuthenticated() && resource.data.authorId == request.auth.uid);
        }
    }
    
    // Collection: chats (for private messaging)
    match /chats/{chatId} {
      allow read, update: if isAuthenticated() && (request.auth.uid in resource.data.users || isAdmin());
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.users;

      // Subcollection: messages within a chat
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users || isAdmin());
      }
    }

    // Collection: verificationRequests
    match /verificationRequests/{requestId} {
        allow read: if isAdmin();
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow update: if isAdmin();
    }

    // Admin-only collections for site content
    match /announcements/{announcementId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /roster/{memberId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /games/{gameId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    match /heroImages/{imageId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }

    match /coreValues/{valueId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }

    match /galleryImages/{imageId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    // Admin-only collections for settings
    match /siteSettings/{settingId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /pageContent/{pageId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
  }
}
