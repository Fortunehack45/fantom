rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email == 'fortunedomination@gmail.com';
    }
    
    function isVerifiedCreator() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.verification in ['Blue', 'Gold'];
    }

    // BLOG POSTS
    match /blogPosts/{postId} {
      allow read;

      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      
      allow update: if (isOwner(resource.data.authorId) && !('likes' in request.resource.data.diff(resource.data).affectedKeys()))
                      || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']))
                      || isAdmin();

      allow delete: if isOwner(resource.data.authorId) || isAdmin();
      
      // Comments on Blog Posts
      match /comments/{commentId} {
        allow read;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
        allow delete: if isOwner(resource.data.authorId) || isAdmin();

        // Replies to Comments
        match /replies/{replyId} {
            allow read;
            allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
            allow update: if (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
            allow delete: if isOwner(resource.data.authorId) || isAdmin();
        }
      }
    }

    // VIDEO SHORTS
    match /shorts/{shortId} {
        allow read;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        
        allow update: if (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'shares']));

        allow delete: if isOwner(resource.data.authorId) || isAdmin();

        // Comments on Shorts
        match /comments/{commentId} {
            allow read;
            allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
            allow delete: if isOwner(resource.data.authorId) || isAdmin();
        }
    }

    // USERS & USERNAMES
    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId); // A user can create their own user document
      
      // Users can update their username, photoURL, or role (once). Admins can update verification/role.
      allow update: if (isOwner(userId) && !('verification' in request.resource.data.diff(resource.data).affectedKeys())) 
                    || isAdmin();

      // Followers and Following subcollections
      match /followers/{followerId} {
        allow read;
        allow create, delete: if isOwner(followerId); // A user can follow/unfollow others
      }
      match /following/{followingId} {
        allow read;
        allow create, delete: if isOwner(userId); // A user can manage their own following list
      }
    }

    // This collection ensures usernames are unique
    match /usernames/{username} {
        allow read;
        allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
        allow delete: if isSignedIn(); // Allow deletion when a username is changed
    }

    // PRIVATE MESSAGING (CHATS)
    match /chats/{chatId} {
      // Allow read/write only if the user is a participant in the chat
      allow read, update, delete: if isSignedIn() && request.auth.uid in resource.data.users;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.users;
      
      // Admin can only read chat metadata, not messages
      allow get: if isAdmin();
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }

    // VERIFICATION REQUESTS
    match /verificationRequests/{requestId} {
      allow read: if isAdmin(); // Only admin can see requests
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid; // User can create their own request
      allow update: if isAdmin(); // Only admin can update the status (approve/deny)
    }

    // READ-ONLY PUBLIC DATA
    match /roster/{memberId} { allow read; allow write: if isAdmin(); }
    match /announcements/{announcementId} { allow read; allow write: if isAdmin(); }
    match /games/{gameId} { allow read; allow write: if isAdmin(); }
    match /heroImages/{imageId} { allow read; allow write: if isAdmin(); }
    match /timelineEvents/{eventId} { allow read; allow write: if isAdmin(); }
    match /coreValues/{valueId} { allow read; allow write: if isAdmin(); }
    match /galleryImages/{galleryId} { allow read; allow write: if isAdmin(); }

    // SITE-WIDE SETTINGS & CONTENT
    match /siteSettings/{docId} { allow read; allow write: if isAdmin(); }
    match /pageContent/{docId} { allow read; allow write: if isAdmin(); }
  }
}
