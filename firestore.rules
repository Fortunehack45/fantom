rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is the admin
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth.uid != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if a string is within length constraints
    function isStringWithin(str, min, max) {
        return str.size() >= min && str.size() <= max;
    }

    // Helper function to validate username format
    function isValidUsername(username) {
        return username.matches("^[a-zA-Z0-9_]+$");
    }


    // USERS Collection
    match /users/{userId} {
      // Anyone can view a user's profile
      allow read: if true;
      
      // Only the user themselves or an admin can update their profile
      allow update: if (isOwner(userId) || isAdmin()) &&
                    // Ensure non-updatable fields are not changed by user
                    (isAdmin() || 
                      (request.resource.data.keys().hasOnly(['username', 'photoURL', 'role']) &&
                       isStringWithin(request.resource.data.username, 3, 15) &&
                       isValidUsername(request.resource.data.username) &&
                       // Regular users can only set their role once, and not to 'Clan Owner' if they aren't already
                       (request.resource.data.role == resource.data.role || 
                        (resource.data.role == 'User' && request.resource.data.role == 'Creator'))
                      )
                    );
      
      // Allow creation of user doc during signup
      allow create: if isOwner(userId);
      
      // Followers and Following Subcollections
      match /followers/{followerId} {
        // Anyone can see who follows a user
        allow read: if true;
        // Only the follower can add/remove themselves
        allow write: if isOwner(followerId);
      }
      
      match /following/{followingId} {
        // Anyone can see who a user is following
        allow read: if true;
        // Only the owner of the following list can add/remove users
        allow write: if isOwner(userId);
      }
    }
    
    // USERNAMES collection (to ensure uniqueness)
    match /usernames/{username} {
       // Anyone can read to check for existence
       allow read: if true;
       // Only signed-in users can create/delete their own username entry
       allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
       allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }

    // BLOG POSTS collection
    match /blogPosts/{postId} {
      // Anyone can read blog posts
      allow read: if true;
      
      // Only signed-in users can create posts
      allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
      
      // Admins can delete any post. Authors can delete their own.
      allow delete: if isAdmin() || (isSignedIn() && isOwner(resource.data.authorId));

      // Allow users to update likes. Admins can update any field.
      allow update: if isAdmin() || (isSignedIn() && request.resource.data.keys().hasOnly(['likes']));
      
      // Comments Subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
        allow update: if isSignedIn() && request.resource.data.keys().hasOnly(['likes']);
        allow delete: if isAdmin() || (isSignedIn() && isOwner(resource.data.authorId));
        
        // Replies Sub-subcollection
        match /replies/{replyId} {
            allow read: if true;
            allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
            allow update: if isSignedIn() && request.resource.data.keys().hasOnly(['likes']);
            allow delete: if isAdmin() || (isSignedIn() && isOwner(resource.data.authorId));
        }
      }
    }

    // SHORTS Collection
    match /shorts/{shortId} {
        allow read: if true;
        allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
        allow delete: if isAdmin() || (isSignedIn() && isOwner(resource.data.authorId));
        allow update: if isSignedIn() && request.resource.data.keys().hasAny(['likes', 'shares']);
        
        // Comments Subcollection for Shorts
        match /comments/{commentId} {
            allow read: if true;
            allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
            allow delete: if isAdmin() || (isSignedIn() && isOwner(resource.data.authorId));
        }
    }

    // CHATS collection for private messaging
    match /chats/{chatId} {
        // Only participants or the admin can read chat details (not messages)
        allow read: if (request.auth.uid in resource.data.users) || isAdmin();
        
        // Only participants can create a chat
        allow create: if isSignedIn() && request.auth.uid in request.resource.data.users;
        
        // Only participants can update last message info
        allow update: if (request.auth.uid in resource.data.users);
        
        // Messages subcollection
        match /messages/{messageId} {
            // Only participants or the admin can read messages
            allow read: if (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users) || isAdmin();
            
            // Only participants can write messages
            allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users);
        }
    }

    // ADMIN-ONLY MANAGED CONTENT
    // Roster, Announcements, Games, Hero Images, Timeline Events, Core Values, Gallery Images, Site Settings
    match /{collection}/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // VERIFICATION REQUESTS collection
    match /verificationRequests/{requestId} {
        // Users can create their own request. Admins can read all requests.
        allow read: if isAdmin();
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
        
        // Only admins can update the status (approve/deny)
        allow update: if isAdmin();
    }
    
    // PAGE CONTENT collection
    match /pageContent/{pageName} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}