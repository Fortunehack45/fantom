rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Clan Owner';
    }
    
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isProfileOwner(userId) {
      let userProfile = get(/databases/$(database)/documents/users/$(userId)).data;
      return request.auth.uid == userProfile.uid;
    }
    
    function isVerifiedCreator() {
        let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return user.role == 'Creator' || user.role == 'Clan Owner';
    }

    // Collection: users
    // Stores user profile information.
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if (isOwner(userId) && (
                        request.resource.data.keys().hasAll(['username', 'photoURL']) ||
                        request.resource.data.keys().hasOnly(['username']) || 
                        request.resource.data.keys().hasOnly(['photoURL']) ||
                        (request.resource.data.keys().hasOnly(['role']) && resource.data.role == 'User')
                      )) || isAdmin();
      allow delete: if false;

      // Subcollection: followers
      match /followers/{followerId} {
        allow read: if true;
        allow write: if isOwner(followerId); // A user can make themselves a follower of someone else.
        allow delete: if isOwner(followerId);
      }

      // Subcollection: following
      match /following/{followingId} {
        allow read: if true;
        allow write: if isOwner(userId); // A user can follow someone else.
        allow delete: if isOwner(userId);
      }
    }

    // Collection: usernames
    // Enforces unique usernames.
    match /usernames/{username} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
      allow update: if false;
    }

    // Collection: blogPosts
    // User-created articles and news.
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if isVerifiedCreator() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isProfileOwner(resource.data.authorId) || isAdmin());
      allow delete: if (isProfileOwner(resource.data.authorId) || isAdmin());

      // Subcollection: comments
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update(request, resource) {
          // Liking a comment
          return isSignedIn() && request.resource.data.keys().hasOnly(['likes']);
        }
        allow delete: if (isProfileOwner(resource.data.authorId) || isAdmin());
        
        // Subcollection: replies
        match /replies/{replyId} {
            allow read: if true;
            allow create: if isSignedIn();
            allow update: if isSignedIn() && request.resource.data.keys().hasOnly(['likes']);
            allow delete: if (isProfileOwner(resource.data.authorId) || isAdmin());
        }
      }
    }

    // Collection: shorts
    // User-created short video posts.
    match /shorts/{shortId} {
      allow read: if true;
      allow create: if isVerifiedCreator() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn(); // For likes and shares
      allow delete: if (isProfileOwner(resource.data.authorId) || isAdmin());

       // Subcollection: comments
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow delete: if (isProfileOwner(resource.data.authorId) || isAdmin());
      }
    }
    
    // Collection: chats
    // Private messaging between users.
    match /chats/{chatId} {
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.users;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.users;
      allow list: if isAdmin(); // Admin can list chats but not read messages
      
      // Subcollection: messages
      match /messages/{messageId} {
        allow read, write, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    // Collection: verificationRequests
    // User requests for verification.
    match /verificationRequests/{requestId} {
      allow read, list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin(); // Admin can approve/deny
      allow delete: if false;
    }
    
    // All other collections are read-only for public display
    // and writeable only by the admin.
    match /{collection}/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}