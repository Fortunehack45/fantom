rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the user is the designated admin
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // =====================================================================
    // User Profiles & Usernames
    // =====================================================================
    match /users/{userId} {
      allow get, list: true;
      allow create: if isOwner(userId)
                    && request.resource.data.uid == userId
                    && request.resource.data.verification == 'None';
                    
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification)
                    || isAdmin();
      
      allow delete: if isAdmin();

      // --- Subcollections for Followers/Following ---
      match /followers/{followerId} {
          allow get, list: true;
          allow create, delete: if isOwner(followerId) || isAdmin();
      }
      match /following/{followingId} {
          allow get, list: true;
          allow create, delete: if isOwner(userId) || isAdmin();
      }
    }

    match /usernames/{username} {
      allow get: true;
      allow create: if isSignedIn()
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.lowercaseUsername == username;
    
      allow delete: if isSignedIn()
                    && resource.data.uid == request.auth.uid;
    }
    
    // =====================================================================
    // Content: Blog Posts, Shorts, and their subcollections
    // =====================================================================
    function canUpdateContent(collectionName, docId) {
       return request.resource.data.authorId == resource.data.authorId
          && request.resource.data.date == resource.data.date
          && request.resource.data.slug == resource.data.slug
          && (!('timestamp' in resource.data) || request.resource.data.timestamp == resource.data.timestamp);
    }
    
    match /blogPosts/{postId} {
      allow get, list: true;
      allow create: if isSignedIn() 
                    && request.resource.data.authorId == request.auth.uid;
      allow update: if (get(/databases/$(database)/documents/blogPosts/$(postId)).data.authorId == request.auth.uid 
                      && canUpdateContent('blogPosts', postId))
                    || isAdmin();
      allow delete: if get(/databases/$(database)/documents/blogPosts/$(postId)).data.authorId == request.auth.uid
                    || isAdmin();
    }
    
    match /shorts/{shortId} {
      allow get, list: true;
      allow create: if isSignedIn() 
                    && request.resource.data.authorId == request.auth.uid;
      allow update: if (get(/databases/$(database)/documents/shorts/$(shortId)).data.authorId == request.auth.uid
                      && canUpdateContent('shorts', shortId))
                    || isAdmin();
      allow delete: if get(/databases/$(database)/documents/shorts/$(shortId)).data.authorId == request.auth.uid
                    || isAdmin();
    }
    
    // =====================================================================
    // Social: Comments & Replies
    // =====================================================================
    match /{collection}/{docId}/comments/{commentId} {
       allow get, list: true;
       allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
       allow delete: if (get(/databases/$(database)/documents/$(collection)/$(docId)/comments/$(commentId)).data.authorId == request.auth.uid) || isAdmin();
    }

    match /{postCollection}/{postId}/comments/{commentId}/replies/{replyId} {
       allow get, list: true;
       allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
       allow delete: if (get(/databases/$(database)/documents/$(postCollection)/$(postId)/comments/$(commentId)/replies/$(replyId)).data.authorId == request.auth.uid) || isAdmin();
    }
    
    // =====================================================================
    // Private Messaging
    // =====================================================================
    match /chats/{chatId} {
      allow get, list: if request.auth.uid in resource.data.users || isAdmin();
      allow create: if request.auth.uid in request.resource.data.users;
      allow update: if request.auth.uid in resource.data.users;
      
      match /messages/{messageId} {
        allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
      }
    }
    
    // =====================================================================
    // Verification System
    // =====================================================================
    match /verificationRequests/{requestId} {
      allow get, list, update, delete: if isAdmin();
      allow create: if isSignedIn()
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.status == 'pending';
    }
    
    // =====================================================================
    // Admin-managed Collections (Site-wide content)
    // =====================================================================
    match /{collection}/{docId} 
      where collection in ['roster', 'announcements', 'games', 'siteSettings', 'heroImages', 'pageContent', 'timelineEvents', 'coreValues', 'galleryImages'] {
        allow read: true;
        allow write: if isAdmin();
    }
    
    // =====================================================================
    // Collection Group Queries for Admin
    // =====================================================================
     match /{path=**}/comments/{commentId} {
      allow read, write: if isAdmin();
    }
    
    match /{path=**}/replies/{replyId} {
      allow read, write: if isAdmin();
    }
  }
}
