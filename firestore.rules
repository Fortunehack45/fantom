rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin' || request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // Users can be read by anyone, but only the user themselves or an admin can write.
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || isAdmin();
      allow delete: if isAdmin();

      // Following/Followers can only be managed by the respective users
      match /followers/{followerId} {
        allow read: if true;
        allow create, delete: if request.auth.uid == followerId; // A user can add/remove themselves from another's follower list
      }
      match /following/{followingId} {
        allow read: if true;
        allow create, delete: if request.auth.uid == userId; // A user can manage their own following list
      }
    }
    
    // Usernames collection for ensuring unique usernames
    match /usernames/{username} {
        allow read: if true;
        allow create: if request.auth.uid == request.resource.data.uid;
        allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username || isAdmin();
    }

    // Blog posts can be read by anyone.
    // Create is allowed for any authenticated user.
    // Update/Delete is restricted to the author or an admin.
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if get(/databases/$(database)/documents/blogPosts/$(postId)).data.authorId == request.auth.uid || isAdmin();

      // Comments and Replies
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if get(/databases/$(database)/documents/blogPosts/$(postId)/comments/$(commentId)).data.authorId == request.auth.uid || isAdmin();

         match /replies/{replyId} {
            allow read: if true;
            allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
            allow update, delete: if get(/databases/$(database)/documents/blogPosts/$(postId)/comments/$(commentId)/replies/$(replyId)).data.authorId == request.auth.uid || isAdmin();
        }
      }
    }

    // Shorts follow similar rules to blog posts.
    match /shorts/{shortId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update: if get(/databases/$(database)/documents/shorts/$(shortId)).data.authorId == request.auth.uid || isAdmin();
      allow delete: if get(/databases/$(database)/documents/shorts/$(shortId)).data.authorId == request.auth.uid || isAdmin();

       // Comments on shorts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if get(/databases/$(database)/documents/shorts/$(shortId)/comments/$(commentId)).data.authorId == request.auth.uid || isAdmin();
      }
    }
    
    // Chats can only be accessed by participants.
    match /chats/{chatId} {
      allow read, write, update: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users || isAdmin();
      allow create: if request.auth.uid in request.resource.data.users;

      // Messages within a chat inherit the parent chat's permissions.
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users || isAdmin();
      }
    }
    
    // Verification requests can be created by the user, but only read/updated by an admin.
    match /verificationRequests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read, list, update, delete: if isAdmin();
    }
    
    // Admin-only write access for site-wide content. Read is public.
    match /roster/{memberId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /announcements/{announcementId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
     match /games/{gameId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /heroImages/{imageId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
     match /timelineEvents/{eventId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
     match /coreValues/{valueId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
     match /galleryImages/{imageId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /siteSettings/{settingsId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /pageContent/{pageId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}