rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // 1. User Accounts & Profiles
    match /users/{userId} {
      allow read; // Anyone can view a user's profile.
      
      // A user can create their own document.
      allow create: if isSignedIn() && isOwner(userId);

      // A user can only update their own profile, and cannot change their verification status.
      // The admin can update any user's profile.
      allow update: if (isOwner(userId) && !('verification' in request.resource.data)) || isAdmin();

      // Followers and Following Subcollections
      match /followers/{followerId} {
        allow read; // Anyone can see who follows a user.
        // A user can only add/remove themselves from another user's followers list.
        allow write: if isSignedIn() && isOwner(followerId);
      }
      
      match /following/{followingId} {
        allow read; // Anyone can see who a user is following.
        // A user can only manage their own "following" list.
        allow write: if isSignedIn() && isOwner(userId);
      }
    }

    // Enforces unique usernames
    match /usernames/{username} {
      allow read;
      // Only the user whose UID is in the document can create or delete it.
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }

    // 2. Content Creation (Blog & Shorts)
    match /blogPosts/{postId} {
      allow read; // Anyone can read blog posts.
      
      // Logged-in users can create posts, ensuring the authorId matches their own UID.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

      // Only the author or an admin can update or delete a post.
      // Update rule allows anyone to modify ONLY the 'likes' array.
      allow update: if (isOwner(resource.data.authorId) || isAdmin()) || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      allow delete: if isOwner(resource.data.authorId) || isAdmin();

      // Comments and Replies
      match /comments/{commentId} {
        allow read;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow delete: if isOwner(resource.data.authorId) || isAdmin();

        match /replies/{replyId} {
            allow read;
            allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
            allow delete: if isOwner(resource.data.authorId) || isAdmin();
        }
      }
    }

    match /shorts/{shortId} {
        allow read;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if (isOwner(resource.data.authorId) || isAdmin()) || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
        allow delete: if isOwner(resource.data.authorId) || isAdmin();

        match /comments/{commentId} {
            allow read;
            allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
            allow delete: if isOwner(resource.data.authorId) || isAdmin();
        }
    }

    // 4. Private Messaging
    match /chats/{chatId} {
      // Only participants or an admin can read the chat document.
      allow get: if request.auth.uid in resource.data.users || isAdmin();
      allow list: if isAdmin(); // Admin can list chats for moderation dashboard.
      allow write: if request.auth.uid in resource.data.users; // Participants can update chat data (like lastMessage).

      match /messages/{messageId} {
        // Only participants can read or create messages.
        allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
        // Nobody can update or delete messages for integrity.
        allow update, delete: if false;
      }
    }
    
    // 5. Verification System
    match /verificationRequests/{requestId} {
        // A user can create a request for their own UID.
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        // Only an admin can read or update the requests.
        allow read, update, delete: if isAdmin();
    }
    
    // 6. Admin Panel & Site Management (Read-Only for public)
    match /roster/{memberId} {
        allow read;
        allow write: if isAdmin();
    }

    match /announcements/{announcementId} {
        allow read;
        allow write: if isAdmin();
    }

    match /games/{gameId} {
        allow read;
        allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
        allow read;
        allow write: if isAdmin();
    }

    match /timelineEvents/{eventId} {
        allow read;
        allow write: if isAdmin();
    }

    match /coreValues/{valueId} {
        allow read;
        allow write: if isAdmin();
    }

    match /galleryImages/{imageId} {
        allow read;
        allow write: if isAdmin();
    }

    match /siteSettings/{settingId} {
        allow read;
        allow write: if isAdmin();
    }
    
    match /pageContent/{pageId} {
        allow read;
        allow write: if isAdmin();
    }
  }
}
