rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      // The admin's email is hardcoded for security.
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    // Collection Group Rules for Admin Tasks
    // This allows the admin's "Fix User Data" function to query across all comments.
    match /{path=**}/comments/{commentId} {
      allow read, write: if isAdmin();
    }

    // This allows the admin's "Fix User Data" function to query across all replies.
    match /{path=**}/replies/{replyId} {
      allow read, write: if isAdmin();
    }
    
    // User data, profiles, and follow graphs
    match /users/{userId} {
      // Anyone can view user profiles.
      allow list, get;
      // Only the owner can create their user document.
      allow create: if isOwner(userId);
      // A user can update their own profile, but cannot change their verification status.
      // An admin can update any part of a user's profile.
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
      // Only an admin can delete a user.
      allow delete: if isAdmin();
      
      // Followers and Following subcollections can be read by anyone.
      match /followers/{followerId} {
        allow read;
        // A user can add/remove themself from another user's followers list.
        allow write: if isOwner(followerId) || isAdmin();
      }
      
      match /following/{followingId} {
        allow read;
        // A user can modify their own "following" list.
        allow write: if isOwner(userId) || isAdmin();
      }
    }
    
    // This collection enforces unique usernames.
    match /usernames/{username} {
      allow read;
      // A user can only claim a username that matches the one in their user document.
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      // A user can delete their own username document (e.g., when changing it).
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username || isAdmin();
    }
    
    // Rules for Blog Posts and their subcollections (comments, replies)
    match /blogPosts/{postId} {
      allow read;
      // Any authenticated user can create a post, but must be the author.
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      // Only the author or an admin can update or delete a post.
      allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();
      
      match /comments/{commentId} {
        allow read;
        // Any authenticated user can create a comment.
        allow create: if request.auth != null;
        // Only the comment author or an admin can update or delete it.
        allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();

        match /replies/{replyId} {
          allow read;
          // Any authenticated user can create a reply.
          allow create: if request.auth != null;
          // Only the reply author or an admin can update or delete it.
          allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();
        }
      }
    }
    
    // Rules for Shorts and their subcollections (comments)
    match /shorts/{shortId} {
      allow read;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();

      match /comments/{commentId} {
        allow read;
        allow create: if request.auth != null;
        allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();
      }
    }

    // Rules for private messaging
    match /chats/{chatId} {
      // A user can only access a chat if they are a participant. Admin can also access for moderation.
      allow read, write: if request.auth.uid in resource.data.users || isAdmin();
      
      match /messages/{messageId} {
        // A user can only access messages in a chat they are a part of.
        allow read, write: if get(parent).data.users.includes(request.auth.uid) || isAdmin();
      }
    }

    // Users can submit verification requests for themselves.
    match /verificationRequests/{requestId} {
      allow create: if isOwner(request.resource.data.userId);
      // Only an admin can read, update, or delete requests.
      allow read, update, delete: if isAdmin();
    }

    // Generic rules for collections managed solely by the admin.
    // This includes /roster, /announcements, /games, /pageContent, etc.
    match /{collection}/{docId} {
      allow read;
      allow write: if isAdmin();
    }
  }
}
