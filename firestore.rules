
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is the admin
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(resource) {
      return request.auth.uid == resource.data.authorId;
    }

    // Read-only access for public content
    match /{collectionName}/{docId} 
    where collectionName in ['blogPosts', 'roster', 'announcements', 'games', 'heroImages', 'timelineEvents', 'coreValues', 'galleryImages', 'siteSettings', 'pageContent'] {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Comments and Replies Logic
    match /blogPosts/{postId}/comments/{commentId} {
      allow read: if true;
      
      // Anyone signed in can create a comment
      allow create: if isSignedIn();
      
      // Only the author can update their own comment (e.g., for likes)
      // Or admin can update any
      allow update: if (isSignedIn() && request.resource.data.keys().hasOnly(['likes'])) || isAdmin();
      
      // Only the author or an admin can delete a comment
      allow delete: if isSignedIn() && (isOwner(resource) || isAdmin());

      // Replies subcollection
      match /replies/{replyId} {
        allow read: if true;
        
        // Anyone signed in can create a reply
        allow create: if isSignedIn();
        
        // Only the author can update their own reply (e.g., for likes)
        // Or admin can update any
        allow update: if (isSignedIn() && request.resource.data.keys().hasOnly(['likes'])) || isAdmin();

        // Only the author or an admin can delete a reply
        allow delete: if isSignedIn() && (isOwner(resource) || isAdmin());
      }
    }
  }
}
