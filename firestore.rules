rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for Admin role
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    //----------------------------------------------------------------------
    // User Profiles & Usernames
    //----------------------------------------------------------------------
    match /users/{userId} {
      allow get, list: if true;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId && request.resource.data.verification == resource.data.verification || isAdmin();
    }
    
    match /usernames/{username} {
      allow read: if true;
      allow create: if request.resource.data.uid == request.auth.uid;
      allow delete: if resource.data.uid == request.auth.uid || isAdmin();
    }

    //----------------------------------------------------------------------
    // User Social Graph (Followers/Following)
    //----------------------------------------------------------------------
    match /users/{userId}/followers/{followerId} {
        allow read: if true;
        allow create: if request.auth.uid == followerId;
        allow delete: if request.auth.uid == followerId || request.auth.uid == userId || isAdmin();
    }
    
    match /users/{userId}/following/{followingId} {
        allow read: if true;
        allow create: if request.auth.uid == userId;
        allow delete: if request.auth.uid == userId || isAdmin();
    }

    //----------------------------------------------------------------------
    // Content (Blog Posts & Shorts)
    //----------------------------------------------------------------------
    match /blogPosts/{postId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update: if (resource.data.authorId == request.auth.uid || isAdmin()) || (request.auth != null && request.resource.data.keys().hasOnly(['likes']));
      allow delete: if resource.data.authorId == request.auth.uid || isAdmin();
    }
    
    match /shorts/{shortId} {
       allow get, list: if true;
       allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
       allow update: if (resource.data.authorId == request.auth.uid || isAdmin()) || (request.auth != null && request.resource.data.keys().hasOnly(['likes', 'shares']));
       allow delete: if resource.data.authorId == request.auth.uid || isAdmin();
    }

    //----------------------------------------------------------------------
    // Comments & Replies
    //----------------------------------------------------------------------
    match /{collection}/{docId}/comments/{commentId} {
      allow read, list: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update(likes): if request.auth != null && request.resource.data.keys().hasOnly(['likes']);
      allow delete: if resource.data.authorId == request.auth.uid || isAdmin();
      
      match /replies/{replyId} {
        allow read, list: if true;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow update(likes): if request.auth != null && request.resource.data.keys().hasOnly(['likes']);
        allow delete: if resource.data.authorId == request.auth.uid || isAdmin();
      }
    }
    
    //----------------------------------------------------------------------
    // Private Messaging
    //----------------------------------------------------------------------
    match /chats/{chatId} {
        // Allow a user to list only their own chats, or admin to list all
        allow list: if request.auth.uid in resource.data.users || isAdmin();
        // Allow read/write only if the user is a participant in the chat
        allow get, update, delete: if request.auth.uid in resource.data.users || isAdmin();
        allow create: if request.auth.uid in request.resource.data.users;

        match /messages/{messageId} {
            allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]) || isAdmin();
        }
    }

    //----------------------------------------------------------------------
    // Verification System
    //----------------------------------------------------------------------
    match /verificationRequests/{requestId} {
        allow create: if request.auth.uid == request.resource.data.userId;
        allow read, update, delete: if isAdmin();
    }

    //----------------------------------------------------------------------
    // Admin-Only Writable Collections
    // Everyone can read these collections, but only admins can write to them.
    //----------------------------------------------------------------------
    match /{collection}/{docId} 
        where collection in ['roster', 'announcements', 'games', 'siteSettings', 'heroImages', 'timelineEvents', 'coreValues', 'galleryImages', 'pageContent'] {
          allow read: if true;
          allow write: if isAdmin();
    }
  }
}