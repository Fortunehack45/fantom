
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    //----------------------------------------------------------------------
    //  USERS & USERNAMES
    //----------------------------------------------------------------------
    match /users/{userId} {
      // READ: Anyone can view a user's public profile.
      allow get: if true;
      allow list: if true;

      // CREATE: A user can only create their own user document.
      allow create: if isOwner(userId);

      // UPDATE: A user can only update their own profile.
      // The admin can update any profile (e.g., to grant verification).
      // Verification status cannot be changed by the user themselves.
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
    }

    match /usernames/{username} {
      // READ: Publicly readable to check for existence.
      allow get: if true;

      // CREATE: A user can only create a username document if the username
      // matches the one in their own user document. This prevents impersonation.
      allow create: if isSignedIn() &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;

      // DELETE: Only the user who owns the username or an admin can delete it.
      allow delete: if (isSignedIn() && resource.data.uid == request.auth.uid) || isAdmin();
    }

    //----------------------------------------------------------------------
    //  CONTENT (Blog Posts & Shorts)
    //-----------------------------------------------------------------w----
    match /blogPosts/{postId} {
      // READ: All blog posts are public.
      allow get: if true;
      allow list: if true;

      // CREATE: Any signed-in user can create a post, but the authorId must be their own.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

      // UPDATE: Only the original author or an admin can edit.
      // A special case allows any signed-in user to update *only* the 'likes' array.
      allow update: if (isOwner(request.resource.data.authorId) || isAdmin()) ||
                       (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));

      // DELETE: Only the original author or an admin can delete.
      allow delete: if (isOwner(resource.data.authorId) || isAdmin());

      // Nested Comments & Replies
      match /comments/{commentId} {
        allow list: if true;
        allow create: if isSignedIn();
        allow delete: if (isOwner(resource.data.authorId) || isAdmin());

        match /replies/{replyId} {
            allow list: if true;
            allow create: if isSignedIn();
            allow delete: if (isOwner(resource.data.authorId) || isAdmin());
        }
      }
    }

    match /shorts/{shortId} {
      // READ: All shorts are public.
      allow get: if true;
      allow list: if true;

      // CREATE: Any signed-in user can create a short, but the authorId must be their own.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

      // UPDATE: Only the author or admin can update, except for likes.
      allow update: if (isOwner(request.resource.data.authorId) || isAdmin()) ||
                       (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));

      // DELETE: Only the original author or an admin can delete.
      allow delete: if (isOwner(resource.data.authorId) || isAdmin());

      // Nested Comments
      match /comments/{commentId} {
        allow list: if true;
        allow create: if isSignedIn();
        allow delete: if (isOwner(resource.data.authorId) || isAdmin());
      }
    }


    //----------------------------------------------------------------------
    //  SOCIAL (Followers/Following)
    //----------------------------------------------------------------------
    match /users/{userId}/followers/{followerId} {
        allow get: if true;
        allow list: if true;
        // A user can only add/remove themselves from another user's followers list.
        allow create, delete: if isOwner(followerId);
    }

    match /users/{userId}/following/{followingId} {
        allow get: if true;
        allow list: if true;
        // A user can only manage their own following list.
        allow create, delete: if isOwner(userId);
    }

    //----------------------------------------------------------------------
    //  PRIVATE MESSAGING
    //----------------------------------------------------------------------
    match /chats/{chatId} {
      // Admin can see chat metadata for moderation, but not list all chats at once.
      allow get: if isAdmin();

      // Users can list chats they are part of.
      allow list: if isSignedIn() && request.auth.uid in resource.data.users;

      // Users can only access chats they are a part of.
      allow read, write, update: if isSignedIn() && request.auth.uid in resource.data.users;

      match /messages/{messageId} {
        // Can only read/write messages if you are a participant in the parent chat.
        allow read, create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
      }
    }

    //----------------------------------------------------------------------
    //  VERIFICATION
    //----------------------------------------------------------------------
    match /verificationRequests/{requestId} {
      // A user can only create a request for themselves.
      allow create: if isOwner(request.resource.data.userId);
      // Only an admin can read, update, or delete requests.
      allow read, update, delete: if isAdmin();
    }

    //----------------------------------------------------------------------
    //  ADMIN & SITE-WIDE CONTENT
    //----------------------------------------------------------------------
    function isPublicRead() {
      return allow get: if true;
    }
    function isAdminWrite() {
      return allow write, update, delete, create: if isAdmin();
    }

    match /roster/{memberId} {
      isPublicRead();
      isAdminWrite();
    }
    match /announcements/{announcementId} {
      isPublicRead();
      allow list: if true;
      isAdminWrite();
    }
    match /games/{gameId} {
      isPublicRead();
      isAdminWrite();
    }
    match /pageContent/{pageId} {
      isPublicRead();
      isAdminWrite();
    }
     match /timelineEvents/{eventId} {
      isPublicRead();
      allow list: if true;
      isAdminWrite();
    }
    match /coreValues/{valueId} {
      isPublicRead();
      allow list: if true;
      isAdminWrite();
    }
    match /galleryImages/{imageId} {
      isPublicRead();
      allow list: if true;
      isAdminWrite();
    }
    match /heroImages/{imageId} {
      isPublicRead();
      allow list: if true;
      isAdminWrite();
    }
    match /siteSettings/{settingsId} {
      isPublicRead();
      isAdminWrite();
    }
  }
}
