
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for Admin role
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // Helper function to check if the user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // User Profiles:
    // 1. Anyone can read a user's profile.
    // 2. A user can create their own profile.
    // 3. A user can only update their own profile fields.
    // 4. Admins can update any user profile.
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['username', 'photoURL', 'bannerURL', 'lowercaseUsername'])) || isAdmin();
      allow delete: if isAdmin();
      
      // Followers and Following subcollections
      match /followers/{followerId} {
        allow read: if true;
        allow create, delete: if isOwner(followerId) || isOwner(userId);
      }
      
      match /following/{followingId} {
        allow read: if true;
        allow create, delete: if isOwner(userId);
      }
    }

    // Usernames collection to enforce uniqueness
    // 1. A user can only create a username document for themselves.
    // 2. No one can read the list of usernames for security.
    // 3. A user can only delete their own old username doc.
    match /usernames/{username} {
      allow read: if false;
      allow create: if request.resource.data.uid == request.auth.uid;
      allow delete: if resource.data.uid == request.auth.uid;
    }

    // Blog Posts:
    // 1. Anyone can read blog posts.
    // 2. Any signed-in user can create a post, but must be the author.
    // 3. Only the author or an admin can update/delete a post.
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isOwner(resource.data.authorId) || isAdmin()) || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
      
      // Comments on Blog Posts
      match /comments/{commentId} {
          allow read: if true;
          allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
          allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
          allow delete: if isOwner(resource.data.authorId) || isAdmin();
          
          // Replies to Comments
          match /replies/{replyId} {
             allow read: if true;
             allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
             allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
             allow delete: if isOwner(resource.data.authorId) || isAdmin();
          }
      }
    }

    // Shorts:
    // 1. Anyone can read shorts.
    // 2. Any signed-in user can create a short.
    // 3. Only the author or an admin can delete it.
    // 4. Any signed-in user can like/share.
    match /shorts/{shortId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isOwner(resource.data.authorId) || isAdmin()) || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'shares']));
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
      
      // Comments on Shorts
      match /comments/{commentId} {
          allow read: if true;
          allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
          allow delete: if isOwner(resource.data.authorId) || isAdmin();
      }
    }
    
    // Private Chats
    // 1. Only participants can read/write to a chat.
    match /chats/{chatId} {
        allow get: if request.auth.uid in resource.data.users || isAdmin();
        allow list: if isAdmin(); // Admin can see list of chats for moderation, not content.
        allow create, update, delete: if request.auth.uid in resource.data.users;
        
        // Messages within a chat
        match /messages/{messageId} {
            allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
        }
    }

    // Verification Requests
    // 1. A user can only create a request for themselves.
    // 2. Only an admin can read or update requests.
    match /verificationRequests/{requestId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, update, delete: if isAdmin();
        allow list: if isAdmin();
    }
    
    // Admin-only mutable collections
    match /roster/{memberId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /games/{gameId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /heroImages/{imageId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /timelineEvents/{eventId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /coreValues/{valueId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /galleryImages/{imageId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /siteSettings/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /pageContent/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}
