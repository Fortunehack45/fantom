rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    //------------------------------------------------------------//
    // Helper Functions
    //------------------------------------------------------------//

    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isUserAuthenticated() {
      return request.auth != null;
    }

    //------------------------------------------------------------//
    // User Management: /users & /usernames
    //------------------------------------------------------------//

    match /users/{userId} {
      // READ: Anyone can view user profiles.
      allow get, list: if true;
      
      // CREATE: A user can only create their own document.
      allow create: if isOwner(userId);
      
      // UPDATE: A user can only update their own profile fields.
      // They cannot change their verification status or role directly.
      allow update: if isOwner(userId) &&
                       request.resource.data.verification == resource.data.verification &&
                       request.resource.data.role == resource.data.role;
                       
      // ADMIN UPDATE: Admin can update any field (e.g., to assign verification).
      allow update: if isAdmin();

      // DELETE: No one can delete a user document through the client.
      allow delete: if false;

      // Sub-collections for followers/following
      match /followers/{followerId} {
        allow read: if true;
        allow write: if isOwner(followerId) || isAdmin(); 
      }
      match /following/{followingId} {
        allow read: if true;
        allow write: if isOwner(userId) || isAdmin();
      }
    }
    
    match /usernames/{username} {
      // READ: Allow reading for uniqueness checks.
      allow get: if true;
      
      // CREATE: A user can only create a username document if their uid matches
      // the one in their own user document, preventing impersonation.
      allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      
      // DELETE: Only the user who owns the username can delete it (as part of a username change).
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username != username && isUserAuthenticated();
      
      // ADMIN OVERRIDE
      allow write: if isAdmin();
    }
    
    //------------------------------------------------------------//
    // Content: /blogPosts & /shorts
    //------------------------------------------------------------//

    match /blogPosts/{postId} {
      // READ: Anyone can read blog posts.
      allow get, list: if true;
      
      // CREATE: Any authenticated user can create a post, but must be the author.
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      
      // UPDATE & DELETE: Only the author or an Admin can update/delete.
      allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();

      // Comments and Replies on Blog Posts
      match /comments/{commentId} {
        allow get, list: if true;
        allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();

        match /replies/{replyId} {
          allow get, list: if true;
          allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
          allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }

    match /shorts/{shortId} {
      // READ: Anyone can read shorts.
      allow get, list: if true;
      
      // CREATE: Any authenticated user can create a short.
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      
      // UPDATE & DELETE: Only the author or an Admin can update/delete.
      allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();

      // Comments on Shorts
      match /comments/{commentId} {
        allow get, list: if true;
        allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }
    
    //------------------------------------------------------------//
    // Private Messaging: /chats
    //------------------------------------------------------------//

    match /chats/{chatId} {
      // ACCESS: User can only read/write to chats they are a part of.
      // Admin can view chat metadata for moderation, but not messages directly via this rule.
      allow get, list: if request.auth.uid in resource.data.users || isAdmin();
      allow create, update: if request.auth.uid in request.resource.data.users;

      match /messages/{messageId} {
        // A user can only read/write messages in a chat they are part of.
        allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
      }
    }
    
    //------------------------------------------------------------//
    // Verification System: /verificationRequests
    //------------------------------------------------------------//

    match /verificationRequests/{requestId} {
      // CREATE: User can only create a request for themselves.
      allow create: if isOwner(request.resource.data.userId);
      
      // ADMIN ACCESS: Only admin can read, update, or delete requests.
      allow read, update, delete: if isAdmin();
    }

    //------------------------------------------------------------//
    // Site Management (Admin Only)
    //------------------------------------------------------------//
    
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /pageContent/{pageId} {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}