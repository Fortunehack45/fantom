rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isCreatingOwnData(userId) {
      return isSignedIn() && isOwner(userId);
    }
    
    //----------------------------------------------------------------------
    //  USERS & USERNAMES
    //----------------------------------------------------------------------

    match /users/{userId} {
      // READ: Anyone can view profiles.
      allow get, list: true;

      // CREATE: Only a user can create their own document.
      allow create: isCreatingOwnData(userId);

      // UPDATE: A user can only update their own profile. Admins can update any profile.
      // A user cannot change their own verification status.
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
      
      // DELETE: Not allowed for security and data integrity.
      allow delete: if false;
    }

    match /usernames/{username} {
      // READ: Public read is needed to check for existence.
      allow get: true;
      allow list: false; // Prevent listing all usernames

      // CREATE: A user can only create a username document that matches their own profile's username.
      // This prevents impersonation.
      allow create: isSignedIn() &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
                    
      // DELETE: A user can delete their own old username document when they change it. Admins can also delete.
      allow delete: if isSignedIn() && (
                      // The user making the request is the owner of the user document linked in the username doc.
                      get(/databases/$(database)/documents/usernames/$(username)).data.uid == request.auth.uid ||
                      // The user making the request is the owner of the current user document being updated
                      // (for cases where old username doc doesn't have UID).
                      resource.data.uid == request.auth.uid 
                    ) || isAdmin();
    }
    
    //----------------------------------------------------------------------
    //  CONTENT (Posts & Shorts)
    //----------------------------------------------------------------------
    
    match /blogPosts/{postId} {
      // READ: Anyone can read blog posts.
      allow get, list: true;
      
      // CREATE: Any signed-in user can create a post, but the authorId must be their own UID.
      allow create: if isCreatingOwnData(request.resource.data.authorId);
      
      // UPDATE: Only the author or an admin can update.
      allow update: if isOwner(resource.data.authorId) || isAdmin();
      
      // DELETE: Only the author or an admin can delete.
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }
    
    match /shorts/{shortId} {
      // READ: Anyone can read shorts.
      allow get, list: true;
      
      // CREATE: Any signed-in user can create a short, but the authorId must be their own UID.
      allow create: if isCreatingOwnData(request.resource.data.authorId);
      
      // UPDATE: Only the author or an admin can update.
      allow update: if isOwner(resource.data.authorId) || isAdmin();

      // DELETE: Only the author or an admin can delete.
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }
    
    //----------------------------------------------------------------------
    //  SOCIAL (Follows, Comments, Replies)
    //----------------------------------------------------------------------

    match /users/{userId}/followers/{followerId} {
        // READ: Anyone can read follower lists.
        allow get, list: true;
        // WRITE: A user can only add/remove their own ID from another user's followers list.
        allow write: isOwner(followerId) || isAdmin();
    }

    match /users/{userId}/following/{followingId} {
        // READ: Anyone can read following lists.
        allow get, list: true;
        // WRITE: A user can only manage their own following list.
        allow write: isOwner(userId) || isAdmin();
    }

    match /{path=**}/comments/{commentId} {
      // READ: Anyone can read comments.
      allow get, list: true;

      // CREATE: Any signed-in user can create a comment.
      allow create: isSignedIn();
      
      // UPDATE: Not allowed.
      allow update: if false;

      // DELETE: Only the author or an admin can delete their comment.
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }

    match /{path=**}/replies/{replyId} {
      // READ: Anyone can read replies.
      allow get, list: true;

      // CREATE: Any signed-in user can create a reply.
      allow create: isSignedIn();
      
      // UPDATE: Not allowed.
      allow update: if false;

      // DELETE: Only the author or an admin can delete their reply.
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }
    
    // Collection Group rules for the Admin "Fix User Data" feature
    match /{path=**}/comments/{commentId} {
       allow read, write: if isAdmin();
    }
    match /{path=**}/replies/{replyId} {
       allow read, write: if isAdmin();
    }

    //----------------------------------------------------------------------
    //  PRIVATE MESSAGING
    //----------------------------------------------------------------------

    match /chats/{chatId} {
      // READ/WRITE/UPDATE: Only grant access if the requesting user's UID is in the `users` array.
      // This is the core security for private chats. Admins can get metadata.
      allow get: if isSignedIn() && (request.auth.uid in resource.data.users || isAdmin());
      allow list: if isSignedIn() && (isAdmin() || request.query.where.field == "users" && request.query.where.op == "array-contains" && request.query.where.value == request.auth.uid);
      allow create, update: if isSignedIn() && request.auth.uid in resource.data.users;
    }

    match /chats/{chatId}/messages/{messageId} {
      // READ/CREATE: Check the parent `chat` document to ensure the user is a participant.
      allow get, list, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      // UPDATE/DELETE: Not allowed for message integrity.
      allow update, delete: false;
    }

    //----------------------------------------------------------------------
    //  VERIFICATION & SITE MANAGEMENT (Admin Only)
    //----------------------------------------------------------------------

    match /verificationRequests/{requestId} {
      // CREATE: A user can only create a request for their own UID.
      allow create: isCreatingOwnData(request.resource.data.userId);
      // READ/UPDATE/DELETE: Only the Admin can manage requests.
      allow read, update, delete: isAdmin();
    }

    // Generic Admin-only collections
    match /roster/{docId} {
      allow read: true;
      allow write: isAdmin();
    }
    match /announcements/{docId} {
      allow read: true;
      allow write: isAdmin();
    }
    match /games/{docId} {
      allow read: true;
      allow write: isAdmin();
    }
    match /heroImages/{docId} {
      allow read: true;
      allow write: isAdmin();
    }
    match /timelineEvents/{docId} {
        allow read: true;
        allow write: isAdmin();
    }
    match /coreValues/{docId} {
        allow read: true;
        allow write: isAdmin();
    }
    match /galleryImages/{docId} {
        allow read: true;
        allow write: isAdmin();
    }
    match /siteSettings/{docId} {
      allow read: true;
      allow write: isAdmin();
    }
    match /pageContent/{docId} {
      allow read: true;
      allow write: isAdmin();
    }
  }
}
