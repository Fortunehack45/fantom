rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // USER & PROFILE DATA
    match /users/{userId} {
      // Allow anyone to query the users collection (e.g., to find a user by username)
      // and read individual user documents for profile pages.
      allow list, get: if true;

      // A user can only create their own user document
      allow create: if request.auth.uid == userId;

      // A user can update their own data (but not verification/role). Admin can update anything.
      allow update: if (request.auth.uid == userId &&
                       request.resource.data.verification == resource.data.verification &&
                       request.resource.data.role == resource.data.role) || isAdmin();

      // Only the user or an admin can delete an account.
      allow delete: if request.auth.uid == userId || isAdmin();

      // Following/Followers Subcollections
      match /followers/{followerId} {
        allow read: if true;
        allow create, delete: if request.auth.uid == followerId;
      }
      match /following/{followingId} {
        allow read: if true;
        allow create, delete: if request.auth.uid == userId;
      }
    }

    // UNIQUE USERNAMES
    match /usernames/{username} {
      // A user can only create a username document that corresponds to their own username.
      allow create: if request.auth.uid == request.resource.data.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      allow read: if true;
      allow delete: if isAdmin() || exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
    }

    // BLOG POSTS
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.authorId;
      // Allow likes update by any authenticated user.
      // Allow full update/delete by author or admin.
      allow update: if (request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])) ||
                       (request.auth.uid == resource.data.authorId || isAdmin());
      allow delete: if request.auth.uid == resource.data.authorId || isAdmin();

      // Comments and Replies on Blog Posts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth.uid == request.resource.data.authorId;
        allow update: if request.auth.uid == resource.data.authorId || isAdmin();
        allow delete: if request.auth.uid == resource.data.authorId || isAdmin();

        match /replies/{replyId} {
          allow read: if true;
          allow create: if request.auth.uid == request.resource.data.authorId;
          allow update: if request.auth.uid == resource.data.authorId || isAdmin();
          allow delete: if request.auth.uid == resource.data.authorId || isAdmin();
        }
      }
    }

    // SHORTS
    match /shorts/{shortId} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.authorId;
      allow update: if (request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'shares'])) ||
                       (request.auth.uid == resource.data.authorId || isAdmin());
      allow delete: if request.auth.uid == resource.data.authorId || isAdmin();

      // Comments on Shorts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth.uid == request.resource.data.authorId;
        allow update: if request.auth.uid == resource.data.authorId || isAdmin();
        allow delete: if request.auth.uid == resource.data.authorId || isAdmin();
      }
    }

    // PRIVATE MESSAGING
    match /chats/{chatId} {
      // Must be a participant to read/write to a chat. Admin can get metadata.
      allow get: if request.auth.uid in resource.data.users || isAdmin();
      allow list, create, update: if request.auth.uid in resource.data.users;

      match /messages/{messageId} {
        // Must be a participant to read/write messages.
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }

    // VERIFICATION REQUESTS
    match /verificationRequests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      // Only admin can read/update/delete requests.
      allow read, update, delete: if isAdmin();
    }

    // ADMIN-ONLY WRITABLE COLLECTIONS
    match /roster/{memberId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /announcements/{announcementId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /games/{gameId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /heroImages/{imageId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    match /timelineEvents/{eventId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    match /coreValues/{valueId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    match /galleryImages/{galleryId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }

    // SITE-WIDE SETTINGS (Admin only)
    match /siteSettings/{docId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
     match /pageContent/{docId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}
