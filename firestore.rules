
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isVerified(userId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      return user.verification == 'Blue' || user.verification == 'Gold';
    }

    // --- Collections ---

    // users: Public user profiles and roles
    match /users/{userId} {
      // Anyone can read a user's public profile data
      allow read: if true;
      // Only the user themselves can create their profile document
      allow create: if isOwner(userId);
      // A user can update their own profile, but with restrictions
      allow update: if (isOwner(userId) &&
                       // username can only be changed if it's not already taken
                       (!('username' in request.resource.data) ||
                         (request.resource.data.username == resource.data.username) || // Allow if username is not changing
                         !exists(/databases/$(database)/documents/usernames/$(request.resource.data.username.lower()))) &&
                       // role can only be set once from 'User' to something else
                       (resource.data.role == 'User' || request.resource.data.role == resource.data.role) &&
                       // verification status cannot be changed by the user
                       request.resource.data.verification == resource.data.verification)
                    || isAdmin(); // Admin can update anyone's profile (for verification, etc.)
      
      // Subcollections for followers/following
      match /followers/{followerId} {
        allow read: if true;
        allow create, delete: if isSignedIn();
      }
      match /following/{followingId} {
         allow read: if true;
         allow create, delete: if isSignedIn();
      }
    }

    // usernames: Enforces unique usernames (case-insensitive)
    match /usernames/{username} {
      allow read: if true;
      // Can only create if you are the user linked to the username, and only if it doesn't already exist
      allow create: if isOwner(request.resource.data.uid);
      // Can only be deleted by the owner as part of a username change
      allow delete: if isOwner(resource.data.uid);
    }
    
    // blogPosts: User-generated articles
    match /blogPosts/{postId} {
      allow read: if true;
      // Any signed-in user can create a post
      allow create: if isSignedIn();
      // Only the author or an admin can update/delete a post
      allow update, delete: if isOwner(resource.data.authorId) || isAdmin();

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        // Any signed-in user can comment
        allow create: if isSignedIn();
        // Only the author of the comment or an admin can update/delete
        allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
        
        // Replies sub-subcollection
        match /replies/{replyId} {
           allow read: if true;
           allow create: if isSignedIn();
           allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
        }
      }
    }
    
    // shorts: User-generated short videos
    match /shorts/{shortId} {
        allow read: if true;
        // Any signed-in user can create a short
        allow create: if isSignedIn();
        // Only the author or admin can update/delete a short
        allow update, delete: if isOwner(resource.data.authorId) || isAdmin();

        // Comments subcollection for shorts
        match /comments/{commentId} {
            allow read: if true;
            allow create: if isSignedIn();
            allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
        }
    }
    
    // chats: Private messaging
    match /chats/{chatId} {
      // Can only be read/written to by participants or an admin
      allow read, write: if request.auth.uid in resource.data.users || isAdmin();
      // Any signed-in user can create a chat room
      allow create: if isSignedIn();
      
      // Messages subcollection
      match /messages/{messageId} {
        // Can only be read/written to by participants or an admin
        allow read, write: if get(/databases/$(database)/documents/chats/$(chatId)).data.users[0] == request.auth.uid
                        || get(/databases/$(database)/documents/chats/$(chatId)).data.users[1] == request.auth.uid
                        || isAdmin();
      }
    }
    
    // verificationRequests: User requests for verification
    match /verificationRequests/{requestId} {
      // Only admin can read all requests
      allow read: if isAdmin();
      // Users can create their own requests, but not read others'
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Only admin can update the status (approve/deny)
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // All other site content collections are managed by the admin
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /coreValues/{valueId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /galleryImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /timelineEvents/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Site-wide settings collections
    match /siteSettings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }
     match /pageContent/{pageId} {
      allow read: if true;
      allow write: if isAdmin();
    }

  }
}
