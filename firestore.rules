rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // ========= PUBLIC-READ / ADMIN-WRITE COLLECTIONS ===========
    // Site settings, roster, games, announcements, etc.
    match /{collection=**} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // ========= USER PROFILES & USERNAMES ===========
    // Anyone can query the users collection to find a profile by username.
    match /users {
        allow list: if true;
    }
    
    match /users/{userId} {
      allow get: if true;

      // A user can create their own profile document.
      allow create: if isOwner(userId);
      
      // A user can only update their own profile data.
      // Admin can update any profile (for verification).
      allow update: if isOwner(userId) || isAdmin();
      
      // Nobody can delete user profiles for now.
      allow delete: if false;

      // --- Subcollections ---
      match /followers/{followerId} {
        allow read: if true;
        allow write: if isOwner(followerId) || isAdmin(); // You can add yourself as a follower
      }
      match /following/{followingId} {
        allow read: if true;
        allow write: if isOwner(userId); // You can manage your own following list
      }
    }
    
    match /usernames/{username} {
        allow read: if true;
        // User can only create a username doc that links to their own UID
        allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
        allow delete: if isAdmin() || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
    }

    // ========= CONTENT (POSTS & SHORTS) ===========
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      // Likes can be updated by any authenticated user. Other fields can only be changed by author or admin.
      allow update: if request.auth != null && (
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])) ||
                        (isOwner(resource.data.authorId) || isAdmin())
                      );
      allow delete: if isOwner(resource.data.authorId) || isAdmin();

      // Comments on Posts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if isOwner(resource.data.authorId) || isAdmin();

         // Replies to Comments
        match /replies/{replyId} {
            allow read: if true;
            allow create: if request.auth != null;
            allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
        }
      }
    }

    match /shorts/{shortId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
       // Likes can be updated by any authenticated user. Other fields can only be changed by author or admin.
      allow update: if request.auth != null && (
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'shares'])) ||
                        (isOwner(resource.data.authorId) || isAdmin())
                      );
      allow delete: if isOwner(resource.data.authorId) || isAdmin();

      // Comments on Shorts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
      }
    }
    
    // ========= VERIFICATION REQUESTS ===========
    match /verificationRequests/{requestId} {
        allow read, update, delete: if isAdmin();
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // ========= PRIVATE MESSAGING (CHATS) ===========
    match /chats/{chatId} {
        allow get: if request.auth.uid in resource.data.users || isAdmin();
        allow list, create, update: if request.auth.uid in resource.data.users;
        
        match /messages/{messageId} {
            allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }
  }
}