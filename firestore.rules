rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is the admin
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(resource) {
      return request.auth.uid == resource.data.authorId;
    }

    // --- Admin-managed Collections ---
    // These collections can be read by anyone, but only written to by an admin.
    match /roster/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /announcements/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /games/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /heroImages/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /timelineEvents/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /coreValues/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /galleryImages/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /siteSettings/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /pageContent/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // --- Blog Posts with User Interactions ---
    match /blogPosts/{postId} {
      allow read: if true;
      // Admin can create/delete posts. Only admin can update post content.
      // Any signed in user can update the 'likes' array.
      allow create, delete: if isAdmin();
      allow update: if (isAdmin() || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])));

      // --- Comments and Replies Logic ---
      match /comments/{commentId} {
        allow read: if true;
        
        // Anyone signed in can create a comment
        allow create: if isSignedIn();
        
        // Admin can update any field. Signed-in users can only update 'likes'.
        allow update: if (isAdmin() || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])));

        // Only the author or an admin can delete a comment
        allow delete: if isSignedIn() && (isOwner(resource) || isAdmin());

        // --- Replies subcollection ---
        match /replies/{replyId} {
          allow read: if true;
          
          // Anyone signed in can create a reply
          allow create: if isSignedIn();
          
          // Admin can update any field. Signed-in users can only update 'likes'.
          allow update: if (isAdmin() || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])));

          // Only the author or an admin can delete a reply
          allow delete: if isSignedIn() && (isOwner(resource) || isAdmin());
        }
      }
    }
  }
}