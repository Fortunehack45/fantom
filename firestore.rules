
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email == 'fortunedomination@gmail.com';
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isProfileOwner(username) {
        return get(/databases/$(database)/documents/usernames/$(username)).data.uid == request.auth.uid;
    }

    // USERS & USERNAMES
    // users/{userId}
    match /users/{userId} {
      allow read;
      allow create: if isSignedIn() && isOwner(userId)
                    && request.resource.data.username.size() >= 3 && request.resource.data.username.size() <= 15
                    && !exists(/databases/$(database)/documents/usernames/$(request.resource.data.username));
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin())
                    // Fields that can be updated by the user
                    && (request.resource.data.keys().hasOnly(['username', 'photoURL', 'role'])
                       || request.resource.data.keys().hasOnly(['username'])
                       || request.resource.data.keys().hasOnly(['photoURL'])
                       || request.resource.data.keys().hasOnly(['role'])
                       || request.resource.data.keys().hasOnly(['verification']) // Admin only
                       || request.resource.data.keys().hasOnly(['verification', 'role']) // Admin only
                     )
                    // Username update validation
                    && (request.resource.data.username == resource.data.username || !exists(/databases/$(database)/documents/usernames/$(request.resource.data.username)))
                    // Role can only be set once by the user
                    && (request.resource.data.role == resource.data.role || resource.data.role == 'User');
      allow delete: if false; // Do not allow user deletion to preserve content attribution

      // FOLLOWS
      match /followers/{followerId} {
        allow read;
        allow write: if isSignedIn() && isOwner(followerId);
      }
      match /following/{followingId} {
        allow read;
        allow write: if isSignedIn() && isOwner(userId);
      }
    }

    // usernames/{username}
    match /usernames/{username} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isProfileOwner(username);
      allow delete: if isSignedIn() && isProfileOwner(resource.data.username);
    }
    
    // CONTENT
    // blogPosts/{postId}
    match /blogPosts/{postId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
      
      // COMMENTS & REPLIES
      match /comments/{commentId} {
        allow read;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
        allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
        
        match /replies/{replyId} {
            allow read;
            allow create: if isSignedIn();
            allow update: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
            allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
        }
      }
    }

    // shorts/{shortId}
    match /shorts/{shortId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());

      // COMMENTS on shorts
      match /comments/{commentId} {
          allow read;
          allow create: if isSignedIn();
          allow update: if false; // Comments on shorts are not editable
          allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
      }
    }

    // MESSAGING
    // chats/{chatId}
    match /chats/{chatId} {
        allow read, write: if isSignedIn() && (request.auth.uid in resource.data.users || isAdmin());
        
        // messages/{messageId}
        match /messages/{messageId} {
            allow read, write: if isSignedIn() && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users || isAdmin());
        }
    }
    
    // ADMIN-ONLY & SITE CONTENT
    // announcements/{announcementId}
    match /announcements/{announcementId} {
        allow read;
        allow write: if isAdmin();
    }
    
    // roster/{rosterId}
    match /roster/{rosterId} {
        allow read;
        allow write: if isAdmin();
    }
    
    // games/{gameId}
    match /games/{gameId} {
        allow read;
        allow write: if isAdmin();
    }

    // heroImages/{imageId}
    match /heroImages/{imageId} {
        allow read;
        allow write: if isAdmin();
    }

    // timelineEvents/{eventId}
    match /timelineEvents/{eventId} {
        allow read;
        allow write: if isAdmin();
    }

    // coreValues/{valueId}
    match /coreValues/{valueId} {
        allow read;
        allow write: if isAdmin();
    }
    
    // galleryImages/{galleryImageId}
    match /galleryImages/{galleryImageId} {
      allow read;
      allow write: if isAdmin();
    }

    // siteSettings/footer
    match /siteSettings/footer {
        allow read;
        allow write: if isAdmin();
    }
    
    // pageContent/about
    match /pageContent/about {
        allow read;
        allow write: if isAdmin();
    }
    
    // verificationRequests/{requestId}
    match /verificationRequests/{requestId} {
        allow read, update: if isAdmin();
        allow create: if isSignedIn();
    }
  }
}
