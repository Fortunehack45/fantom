
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for Admin role
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if a user is the owner of a document
    function isOwner(resource) {
      return request.auth.uid == resource.data.authorId;
    }
    
    // Allow public read access to most collections
    match /{collection}/{docId} 
    where collection in ['blogPosts', 'roster', 'announcements', 'games', 'heroImages', 'timelineEvents', 'coreValues', 'galleryImages', 'pageContent', 'siteSettings'] {
      allow get: if true;
      allow list: if true;
      
      // Allow only admin to write/delete
      allow write, delete: if isAdmin();
    }
    
    // Rules for blog post subcollections (likes, comments, replies)
    match /blogPosts/{postId} {
        // Anyone can read a post
        allow get: if true;

        // Liking/Unliking a post
        allow update: if isSignedIn() && request.resource.data.keys().hasOnly(['likes']);

        // Comments subcollection
        match /comments/{commentId} {
            // Anyone can read comments
            allow get: if true;
            allow list: if true;
            
            // Signed-in users can create comments, ensuring they are the author
            allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

            // Liking/unliking a comment
            allow update: if isSignedIn() && request.resource.data.keys().hasOnly(['likes']);

            // Only the author of a comment can delete it
            allow delete: if isSignedIn() && isOwner(get(path));

            // Replies sub-subcollection
            match /replies/{replyId} {
                // Anyone can read replies
                allow get: if true;
                allow list: if true;
                
                // Signed-in users can create replies
                allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
                
                // Liking/unliking a reply
                allow update: if isSignedIn() && request.resource.data.keys().hasOnly(['likes']);
                
                // Only the author of a reply can delete it
                allow delete: if isSignedIn() && isOwner(get(path));
            }
        }
    }
  }
}
