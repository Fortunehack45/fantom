
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for Admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Users collection:
    // - Anyone can read profile data.
    // - Only the authenticated user can update their own data.
    // - Admin can update any user's data.
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow delete: if isAdmin();
      
      // Followers/Following subcollections
      match /followers/{followerId} {
        allow read: if true;
        allow create, delete: if request.auth != null && request.auth.uid == followerId;
      }
      match /following/{followingId} {
        allow read: if true;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Usernames collection:
    // - Ensures username uniqueness.
    // - Only the user can create their own username document.
    match /usernames/{username} {
        allow read: if true;
        allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
        allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
    }
    
    // Blog Posts collection:
    // - Publicly readable.
    // - Only authenticated users can create posts for themselves.
    // - Only the author or admin can update/delete.
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if request.auth != null && (resource.data.authorId == request.auth.uid || isAdmin());
      
        // Comments on Blog Posts
        match /comments/{commentId} {
            allow read: if true;
            allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
            allow delete: if request.auth != null && (resource.data.authorId == request.auth.uid || isAdmin());
            
            // Replies to comments
            match /replies/{replyId} {
                allow read: if true;
                allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
                allow delete: if request.auth != null && (resource.data.authorId == request.auth.uid || isAdmin());
            }
        }
    }
    
    // Shorts collection: Similar rules to Blog Posts
    match /shorts/{shortId} {
        allow read: if true;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if request.auth != null && (resource.data.authorId == request.auth.uid || isAdmin());
      
        // Comments on Shorts
        match /comments/{commentId} {
            allow read: if true;
            allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
            allow delete: if request.auth != null && (resource.data.authorId == request.auth.uid || isAdmin());
        }
    }

    // Chats collection:
    // - Only participants can read or write to a chat document and its messages.
    match /chats/{chatId} {
      allow get, list, create, update, delete: if request.auth != null && request.auth.uid in resource.data.users;

      match /messages/{messageId} {
        allow read, create: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
      }
    }
    
    // Admin-only collections for site content
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /games/{gameId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // About Page Content
    match /timelineEvents/{eventId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /pageContent/{pageName} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Verification Requests
    match /verificationRequests/{requestId} {
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow read, update: if isAdmin();
    }
  }
}
