
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return request.auth.email == 'fortunedomination@gmail.com';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isCreatingOwnData(userId) {
      return isOwner(userId) && request.resource.data.uid == userId;
    }
    
    function isProfileDataPublic() {
      return resource.data.keys().hasAll(['uid', 'email', 'username', 'photoURL', 'role', 'verification']);
    }
    
    function isUpdatingOwnPublicProfile() {
      let updatableFields = ['username', 'photoURL'];
      let isUpdatingRoleOnce = request.resource.data.role != resource.data.role && resource.data.role == 'User';
      if (isUpdatingRoleOnce) {
        updatableFields.add('role');
      }
      return request.resource.data.keys().hasOnly(updatableFields);
    }
    
    function isAdminUpdatingProfile() {
        return isAdmin() && request.resource.data.keys().hasAny(['verification', 'role']);
    }

    // Usernames: Ensures username uniqueness
    match /usernames/{username} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.uid == request.auth.uid;
    }

    // Users: Profiles, followers, and following
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isCreatingOwnData(userId);
      allow update: if (isOwner(userId) && isUpdatingOwnPublicProfile()) || isAdminUpdatingProfile();

      // Followers and Following Subcollections
      match /followers/{followerId} {
        allow read: if isAuthenticated();
        allow create, delete: if isOwner(followerId); // A user can add/remove themselves as a follower
      }

      match /following/{followingId} {
        allow read: if isAuthenticated();
        allow create, delete: if isOwner(userId); // A user can update their own "following" list
      }
    }
    
    // Site-wide content (publicly readable, admin write)
    match /siteSettings/footer {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Announcements, About Page content (publicly readable, admin write)
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /pageContent/{pageName} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /timelineEvents/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /coreValues/{valueId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Roster (publicly readable, admin write)
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Blog Posts and their subcollections
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated(); // Any logged-in user can create
      allow update: if (isOwner(resource.data.authorId)) || isAdmin();
      allow delete: if (isOwner(resource.data.authorId)) || isAdmin();

      // Comments on Blog Posts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if (isOwner(resource.data.authorId)) || isAdmin();
        
        // Replies to Comments
        match /replies/{replyId} {
           allow read: if true;
           allow create: if isAuthenticated();
           allow update, delete: if (isOwner(resource.data.authorId)) || isAdmin();
        }
      }
    }

    // Shorts and their subcollections
    match /shorts/{shortId} {
        allow read: if true;
        allow create: if isAuthenticated(); // Any logged-in user can create
        allow update: if (isOwner(resource.data.authorId)) || isAdmin();
        allow delete: if (isOwner(resource.data.authorId)) || isAdmin();

        // Comments on Shorts
        match /comments/{commentId} {
            allow read: if true;
            allow create: if isAuthenticated();
            allow update, delete: if (isOwner(resource.data.authorId)) || isAdmin();
        }
    }

    // Verification Requests
    match /verificationRequests/{requestId} {
        allow read, write: if isAdmin();
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
    
    // Private Messaging
    match /chats/{chatId} {
        allow read, update: if isAuthenticated() && request.auth.uid in resource.data.users || isAdmin();
        allow create: if isAuthenticated() && request.auth.uid in request.resource.data.users;

        // Messages within a chat
        match /messages/{messageId} {
            allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
            // No updates or deletes on messages for data integrity
        }
    }
  }
}
