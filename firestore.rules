rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is the admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // Helper function to check if the user is the owner of a document (comment/reply)
    function isOwner(resource) {
      return request.auth != null && request.auth.uid == resource.data.authorId;
    }
    
    // Allow public read access to all main content collections
    // Only the admin can write (create, update, delete) to these collections
    match /{collectionName}/{docId} 
      where collectionName in ['blogPosts', 'roster', 'announcements', 'games', 'heroImages', 'timelineEvents', 'coreValues', 'galleryImages'] {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Allow public read access to site settings, but only admin can write
    match /siteSettings/{docId} {
       allow read: if true;
       allow write: if isAdmin();
    }
    
    // Rules for Comments subcollection within a blog post
    match /blogPosts/{postId}/comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null; // Any logged-in user can create a comment
      
      // Allow a user to update a comment if they are liking it, OR if they are the original author
      allow update: if request.auth != null && (request.resource.data.likes.hasOnly(request.auth.uid) || isOwner(resource));
      
      // Allow a user to delete a comment if they are the author OR if they are an admin
      allow delete: if isOwner(resource) || isAdmin();
    }
    
    // Rules for Replies subcollection within a comment
    match /blogPosts/{postId}/comments/{commentId}/replies/{replyId} {
      allow read: if true;
      allow create: if request.auth != null; // Any logged-in user can create a reply
      
      // Allow a user to update a reply if they are liking it, OR if they are the original author
      allow update: if request.auth != null && (request.resource.data.likes.hasOnly(request.auth.uid) || isOwner(resource));
      
      // Allow a user to delete a reply if they are the author OR if they are an admin
      allow delete: if isOwner(resource) || isAdmin();
    }
  }
}