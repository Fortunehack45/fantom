rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ---------------------------------
    // Helper Functions
    // ---------------------------------
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Hardcoded admin email for site management.
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isAuthorOrAdmin(resourceId, collectionName) {
      let resourceData = get(/databases/$(database)/documents/$(collectionName)/$(resourceId)).data;
      return isOwner(resourceData.authorId) || isAdmin();
    }
    
    function isProfileOwnerOrAdmin(userId) {
      return isOwner(userId) || isAdmin();
    }


    // ---------------------------------
    // User Management: Profiles & Usernames
    // /users/{userId}, /usernames/{username}
    // ---------------------------------
    match /users/{userId} {
      // Anyone can view a user's profile and list users for search functionality.
      allow get, list: if true;
      
      // A user can only create their own document.
      allow create: if isOwner(userId);
      
      // A user can only update their own profile.
      // Admins can also update profiles (e.g., to grant verification).
      // We protect the 'verification' and 'role' fields from being changed by the user.
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification && request.resource.data.role == resource.data.role) 
                    || isAdmin();
    }

    match /usernames/{username} {
       // Anyone can check if a username exists.
      allow get: if true;

      // A user can only create a username document if the name matches their user profile,
      // preventing impersonation.
      allow create: if isSignedIn() &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      
      // Only the user who owns the username (or an admin) can delete it (e.g., on name change).
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/usernames/$(username)).data.uid == request.auth.uid
                      || isAdmin();
    }


    // ---------------------------------
    // Social Features: Following
    // /users/{userId}/followers, /users/{userId}/following
    // ---------------------------------
    match /users/{userId}/followers/{followerId} {
      allow read: if true;
      // You can only add/remove yourself from another user's followers list.
      allow write: if isOwner(followerId);
    }

    match /users/{userId}/following/{followingId} {
      allow read: if true;
      // You can only modify your own following list.
      allow write: if isOwner(userId);
    }
    

    // ---------------------------------
    // Content: Blog Posts & Shorts
    // /blogPosts/{postId}, /shorts/{shortId}
    // ---------------------------------
    match /blogPosts/{postId} {
      // All content is public.
      allow read: if true;
      
      // Any signed-in user can create a post, but must claim their own authorId.
      // Allow liking (updating the 'likes' array) by any signed-in user.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']))
                    || isAuthorOrAdmin(postId, 'blogPosts');
      allow delete: if isAuthorOrAdmin(postId, 'blogPosts');
    }

    match /shorts/{shortId} {
      // All content is public.
      allow read: if true;
      
      // Any signed-in user can create a short, but must claim their own authorId.
      // Allow liking/sharing by any signed-in user.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'shares']))
                    || isAuthorOrAdmin(shortId, 'shorts');
      allow delete: if isAuthorOrAdmin(shortId, 'shorts');
    }


    // ---------------------------------
    // Interaction: Comments & Replies
    // .../{contentId}/comments/{commentId}, .../comments/{commentId}/replies/{replyId}
    // ---------------------------------
    match /{collection}/{docId}/comments/{commentId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow delete: if isAuthorOrAdmin(commentId, '$(collection)/$(docId)/comments') || isAdmin();
      allow update: if isAuthorOrAdmin(commentId, '$(collection)/$(docId)/comments') || isAdmin();
    }

    match /blogPosts/{postId}/comments/{commentId}/replies/{replyId} {
        allow read: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow delete: if isAuthorOrAdmin(replyId, 'blogPosts/$(postId)/comments/$(commentId)/replies') || isAdmin();
        allow update: if isAuthorOrAdmin(replyId, 'blogPosts/$(postId)/comments/$(commentId)/replies') || isAdmin();
    }


    // ---------------------------------
    // Private Messaging: Chats & Messages
    // /chats/{chatId}, /chats/{chatId}/messages/{messageId}
    // ---------------------------------
    match /chats/{chatId} {
      // You can only access a chat document if you are one of its participants.
      // Admins can read chat metadata for moderation, but not the messages themselves via a collection query.
      allow get: if request.auth.uid in resource.data.users || isAdmin();
      allow list: if isAdmin();
      allow write: if request.auth.uid in resource.data.users;
    }

    match /chats/{chatId}/messages/{messageId} {
      // You can only read or write messages in a chat you are a part of.
      allow read, write: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
    }
    

    // ---------------------------------
    // Verification System
    // /verificationRequests/{requestId}
    // ---------------------------------
    match /verificationRequests/{requestId} {
        // A user can only create a request for themselves.
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        // Only admins can read, update, or delete requests.
        allow read, update, delete: if isAdmin();
    }

    
    // ---------------------------------
    // Admin & Site-Wide Management
    // (roster, announcements, games, pageContent, etc.)
    // ---------------------------------
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /coreValues/{valueId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /galleryImages/{imageId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /pageContent/{pageName} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}