rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions for reusable logic
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAuthenticaded() {
      return request.auth != null;
    }
    
    function isNewUser() {
      return !exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Check if the incoming data for a post-like document is valid
    function isValidContentCreation(userId) {
      return request.resource.data.authorId == userId;
    }
    
    // Check if a user can update a post-like document
    function canUpdateContent(currentData) {
        let isAuthor = request.auth.uid == currentData.authorId;
        // Allow author to change any field except likes
        let isAuthorUpdate = isAuthor && request.resource.data.keys().diff(currentData.keys()).hasOnly(['title', 'content', 'imageUrl', 'videoUrl', 'category']);
        // Allow any authenticated user to ONLY update the likes array
        let isLiking = isAuthenticaded() && request.resource.data.keys().diff(currentData.keys()).hasOnly(['likes']);
        return isAuthorUpdate || isLiking || isAdmin();
    }


    // Collection: users
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isOwner(userId) && request.resource.data.verification == 'None';
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
      allow delete: if isAdmin();
      
      // Subcollections for followers/following
      match /followers/{followerId} {
        allow get, list: if true;
        allow create, delete: if isOwner(followerId); // A user adds/removes themselves from another's follower list
      }
      
      match /following/{followingId} {
        allow get, list: if true;
        allow create, delete: if isOwner(userId); // A user adds/removes someone from their own following list
      }
    }
    
    // Collection: usernames (for uniqueness)
    match /usernames/{username} {
      allow get: if true;
      // Allow creation only if the user is creating their own username record, verified by checking their user document
      allow create: if isAuthenticaded() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.lowercaseUsername == username;
      allow delete: if isAuthenticaded() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.lowercaseUsername == username;
    }
    
    // Collection: blogPosts
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if isAuthenticaded() && isValidContentCreation(request.auth.uid);
      allow update: if canUpdateContent(resource.data) || isAdmin();
      allow delete: if isAuthenticaded() && (request.auth.uid == resource.data.authorId || isAdmin());
      
      // Subcollection for comments on blog posts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticaded();
        allow delete: if isAuthenticaded() && (request.auth.uid == resource.data.authorId || isAdmin());
        allow update: if isAuthenticaded() && request.auth.uid == resource.data.authorId; // For liking comments
        
        // Sub-subcollection for replies to comments
        match /replies/{replyId} {
            allow read: if true;
            allow create: if isAuthenticaded();
            allow delete: if isAuthenticaded() && (request.auth.uid == resource.data.authorId || isAdmin());
            allow update: if isAuthenticaded() && request.auth.uid == resource.data.authorId; // For liking replies
        }
      }
    }
    
    // Collection: shorts
    match /shorts/{shortId} {
      allow read: if true;
      allow create: if isAuthenticaded() && isValidContentCreation(request.auth.uid);
      allow update: if canUpdateContent(resource.data) || isAdmin();
      allow delete: if isAuthenticaded() && (request.auth.uid == resource.data.authorId || isAdmin());

      // Subcollection for comments on shorts
      match /comments/{commentId} {
          allow read: if true;
          allow create: if isAuthenticaded();
          allow delete: if isAuthenticaded() && (request.auth.uid == resource.data.authorId || isAdmin());
          allow update: if isAuthenticaded() && request.auth.uid == resource.data.authorId; // For liking comments
      }
    }
    
    // Collection: verificationRequests
    match /verificationRequests/{requestId} {
      allow read, update, delete: if isAdmin();
      allow create: if isAuthenticaded() && request.resource.data.userId == request.auth.uid;
    }
    
    // Collection: chats (private messaging)
    match /chats/{chatId} {
      // Only participants or admin can read/write to a chat document
      allow read, update, write: if request.auth.uid in resource.data.users || isAdmin();

      // Subcollection for messages within a chat
      match /messages/{messageId} {
        // Only participants can read/create messages
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        allow update, delete: if false; // Messages are immutable
      }
    }

    // Admin-only managed collections
    match /roster/{memberId} {
        allow read: if true;
        allow write, delete: if isAdmin();
    }
    match /announcements/{announcementId} {
        allow read: if true;
        allow write, delete: if isAdmin();
    }
    match /games/{gameId} {
        allow read: if true;
        allow write, delete: if isAdmin();
    }
    match /heroImages/{imageId} {
        allow read: if true;
        allow write, delete: if isAdmin();
    }
    match /timelineEvents/{eventId} {
        allow read: if true;
        allow write, delete: if isAdmin();
    }
    match /coreValues/{valueId} {
        allow read: if true;
        allow write, delete: if isAdmin();
    }
    match /galleryImages/{imageId} {
        allow read: if true;
        allow write, delete: if isAdmin();
    }
    
    // Site-wide settings collections
    match /siteSettings/{settingsId} {
        allow read: if true;
        allow write: if isAdmin();
    }
     match /pageContent/{pageId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Collection Group queries for Admin "Fix User Data"
    match /{path=**}/comments/{commentId} {
      allow read, write: if isAdmin();
    }
    
    match /{path=**}/replies/{replyId} {
      allow read, write: if isAdmin();
    }
  }
}