
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Rules for User Profiles
    match /users/{userId} {
      // Anyone can view a user's profile
      allow get: if true;
      // Anyone can list users (for search, etc.)
      allow list: if true;
      
      // A user can only create their own document
      allow create: if isSignedIn() && request.auth.uid == userId;

      // A user can update their own profile, but not change their verification status
      allow update: if (isSignedIn() && request.auth.uid == userId && request.resource.data.verification == resource.data.verification) || isAdmin();
      
      // Only an Admin can delete a user
      allow delete: if isAdmin();

      // Rules for followers/following subcollections
      match /followers/{followerId} {
        // Anyone can see who follows a user
        allow get, list: if true;
        // A user can add/remove themselves from another's follower list
        allow write: if isSignedIn() && request.auth.uid == followerId || isAdmin();
      }

      match /following/{followingId} {
        // Anyone can see who a user is following
        allow get, list: if true;
        // A user can only manage their own following list
        allow write: if (isSignedIn() && request.auth.uid == userId) || isAdmin();
      }
    }

    // Rules for enforcing unique usernames
    match /usernames/{username} {
      allow get: if true;
      // User can create a username doc only if it matches their user profile's username
      allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      allow delete: if (isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username) || isAdmin();
    }

    // Rules for Blog Posts
    match /blogPosts/{postId} {
      // Anyone can read blog posts
      allow get, list: if true;
      // Any signed-in user can create a post, but must be the author
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      // Only the author or an admin can update a post, but anyone can update the likes array
      allow update: if (isAdmin() || (isSignedIn() && resource.data.authorId == request.auth.uid))
                    || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      // Only the author or an admin can delete
      allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();

      // Rules for Comments on Blog Posts
      match /comments/{commentId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();

        // Rules for Replies to Comments
        match /replies/{replyId} {
          allow get, list: if true;
          allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
          allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }

    // Rules for Shorts
    match /shorts/{shortId} {
      // Anyone can read shorts
      allow get, list: if true;
      // Any signed-in user can create a short
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      // Only the author or an admin can update a short, but anyone can update likes
      allow update: if (isAdmin() || (isSignedIn() && resource.data.authorId == request.auth.uid))
                    || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      // Only the author or an admin can delete
      allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      
      // Rules for Comments on Shorts
      match /comments/{commentId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }

    // Rules for Private Chats
    match /chats/{chatId} {
        // Allow read/list if user is a participant or admin
        allow get, list: if (isSignedIn() && request.auth.uid in resource.data.users) || isAdmin();
        // Allow create if user is a participant
        allow create: if isSignedIn() && request.auth.uid in request.resource.data.users;
        // Allow update (e.g., last message) if user is a participant
        allow update: if isSignedIn() && request.auth.uid in resource.data.users;
        
        // Rules for Messages within a chat
        match /messages/{messageId} {
            // A user can read/write messages only if they are part of the parent chat
            allow read, create: if isSignedIn() && get(parent).data.users.hasAny([request.auth.uid]);
        }
    }

    // Rules for Verification Requests
    match /verificationRequests/{requestId} {
      // A user can only create a request for themselves
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Only an Admin can read, update, or delete requests
      allow read, update, delete: if isAdmin();
    }
    
    // --- Collection Group Rules for Admin "Fix Data" ---
    // These are required for the admin's batch write to work across collections
    match /{path=**}/comments/{commentId} {
        allow write: if isAdmin();
    }
     match /{path=**}/replies/{replyId} {
        allow write: if isAdmin();
    }

    // --- Admin-Only Writable Collections ---
    // These collections are public to read, but only writable by an admin.
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /timelineEvents/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /pageContent/{pageName} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /siteSettings/{settingsId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
