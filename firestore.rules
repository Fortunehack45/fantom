
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // --- User Profiles and Data ---
    match /users/{userId} {
      // READ: Anyone can read public profile data. This is essential for profile pages.
      allow get, list: if true;
      
      // CREATE: A user can only create their own document.
      allow create: if isOwner(userId)
        && request.resource.data.uid == userId
        && request.resource.data.lowercaseUsername == request.resource.data.username.lower();

      // UPDATE: A user can only update their own profile fields.
      // Verification and role can only be changed by an Admin.
      allow update: if (isOwner(userId) && !('verification' in request.resource.data) && !('role' in request.resource.data))
                      || isAdmin();

      // DELETE: Only an admin can delete a user document.
      allow delete: if isAdmin();
      
      // Follower/Following Subcollections
      match /followers/{followerId} {
          allow read: if true;
          allow write: if isOwner(followerId) || isOwner(userId) || isAdmin();
      }
      match /following/{followingId} {
          allow read: if true;
          allow write: if isOwner(userId) || isAdmin();
      }
    }
    
    // --- Unique Username Enforcement ---
    match /usernames/{username} {
      // READ: Publicly readable to check for existence.
      allow get: if true;
      // CREATE: Only the user who owns the username can create the document.
      allow create: if isUserAuthenticated()
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      // DELETE: Only the user or an admin can delete it (e.g., on username change).
      allow delete: if isUserAuthenticated() || isAdmin();
      // UPDATE: No updates allowed.
      allow update: if false;
    }

    // --- Blog Posts ---
    match /blogPosts/{postId} {
      allow get, list: if true;
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();

      // Comments on Blog Posts
      match /comments/{commentId} {
        allow get, list: if true;
        allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
        
        // Replies to Comments
        match /replies/{replyId} {
            allow get, list: if true;
            allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
            allow delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }

    // --- Shorts ---
    match /shorts/{shortId} {
      allow get, list: if true;
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();

      // Comments on Shorts
      match /comments/{commentId} {
        allow get, list: if true;
        allow create: if isUserAuthenticated() && request.resource.data.authorId == requestauth.uid;
        allow update, delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }

    // --- Private Chats ---
    match /chats/{chatId} {
      // Only participants of the chat can read or write. Admin can list chats for moderation.
      allow get, update, delete: if isUserAuthenticated() && request.auth.uid in resource.data.users;
      allow list: if isAdmin(); // Admin can see list of chats, but not messages
      allow create: if isUserAuthenticated() && request.auth.uid in request.resource.data.users;

      // Messages within a chat
      match /messages/{messageId} {
        // Inherits parent security. User must be in the chat's `users` array.
        allow read, create: if isUserAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
        allow update, delete: if false; // Messages are immutable
      }
    }
    
    // --- Verification Requests ---
    match /verificationRequests/{requestId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, update, delete: if isAdmin();
    }

    // --- Admin-Managed Content ---
    match /roster/{memberId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
        allow get, list: if true;
        allow write: if isAdmin();
    }

    match /games/{gameId} {
        allow get, list: if true;
        allow write: if isAdmin();
    }

    match /heroImages/{imageId} {
        allow get, list: if true;
        allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
        allow get, list: if true;
        allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
        allow get, list: if true;
        allow write: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
        allow get, list: if true;
        allow write: if isAdmin();
    }

    // --- Site-wide Settings ---
    match /siteSettings/{docId} {
        allow get, list: if true;
        allow write: if isAdmin();
    }
    
    match /pageContent/{docId} {
        allow get, list: if true;
        allow write: if isAdmin();
    }
  }
}
