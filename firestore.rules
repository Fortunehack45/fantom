rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for Admin role
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // =================================
    // User Management
    // =================================
    match /users/{userId} {
      allow read: if true; // Public profiles
      allow create: if request.auth.uid == userId; // Can only create their own user document
      allow update: if request.auth.uid == userId || isAdmin(); // Can only update their own profile, or if admin
      allow delete: if isAdmin(); // Only admin can delete users
    }

    match /usernames/{username} {
      allow read: if true;
      // User can only create a username document if their uid is in it
      // and the new username matches the one in their user doc.
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid; // Allow user to delete their old username doc
    }

    match /users/{userId}/followers/{followerId} {
      allow read: if true;
      allow create, delete: if request.auth.uid == followerId; // You can only add/remove yourself from someone's followers
    }

    match /users/{userId}/following/{followingId} {
      allow read: if true;
      allow create, delete: if request.auth.uid == userId; // You can only modify your own following list
    }

    // =================================
    // Content: Blog Posts & Shorts
    // =================================
    match /blogPosts/{postId} {
      allow read: if true; // Anyone can read blog posts
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
    }

    match /shorts/{shortId} {
        allow read: if true; // Anyone can read shorts
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
        allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
    }


    // =================================
    // Social: Comments & Replies
    // =================================
    match /blogPosts/{postId}/comments/{commentId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();

      match /replies/{replyId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
        allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }
    
     match /shorts/{shortId}/comments/{commentId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
    }


    // =================================
    // Private Messaging
    // =================================
    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.users; // Only participants can access
      allow get: if isAdmin(); // Admin can get participant list for moderation
      
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users; // Participants can read/write messages
      }
    }


    // =================================
    // Admin & Site Management
    // =================================
    match /verificationRequests/{requestId} {
      allow read, update, delete: if isAdmin(); // Only admins can manage requests
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid; // User can only create a request for themselves
    }
    
    match /announcements/{announcementId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    match /roster/{memberId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    match /games/{gameId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    match /heroImages/{imageId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }

    match /coreValues/{valueId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }

    match /galleryImages/{imageId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    match /pageContent/{pageName} {
       allow read: if true;
       allow write: if isAdmin();
    }
    
    match /siteSettings/{settingId} {
       allow read: if true;
       allow write: if isAdmin();
    }
  }
}
