
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // USER & USERNAME MANAGEMENT
    // Users: Publicly readable for profile pages, but only the user or an admin can write.
    // Usernames: Ensures usernames are unique.
    match /users/{userId} {
      allow read;
      allow create: request.auth != null && request.auth.uid == userId;
      allow update: request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // Followers / Following
      match /followers/{followerId} {
        allow read;
        allow create: request.auth != null && request.auth.uid == followerId;
        allow delete: request.auth != null && (request.auth.uid == followerId || isAdmin());
      }
      match /following/{followingId} {
        allow read;
        allow create: request.auth != null && request.auth.uid == userId;
        allow delete: request.auth != null && (request.auth.uid == userId || isAdmin());
      }
    }
    
    match /usernames/{username} {
      allow read;
      allow create: request.auth != null;
      allow delete: isAdmin();
    }
    
    // PUBLIC CONTENT
    // Blog Posts and Shorts are publicly readable.
    // Create is allowed for any authenticated user.
    // Update/Delete is restricted to the author or an admin.
    match /blogPosts/{postId} {
      allow read;
      allow create: request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update, delete: request.auth != null && (request.resource.data.authorId == request.auth.uid || isAdmin());
      
      // Comments and Replies
      match /comments/{commentId} {
        allow read;
        allow create: request.auth != null;
        allow delete: request.auth != null && (request.resource.data.authorId == request.auth.uid || isAdmin());
        
        match /replies/{replyId} {
            allow read;
            allow create: request.auth != null;
            allow delete: request.auth != null && (request.resource.data.authorId == request.auth.uid || isAdmin());
        }
      }
    }
    
    match /shorts/{shortId} {
        allow read;
        allow create: request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow update, delete: request.auth != null && (request.resource.data.authorId == request.auth.uid || isAdmin());

        // Comments on shorts
        match /comments/{commentId} {
          allow read;
          allow create: request.auth != null;
          allow delete: request.auth != null && (request.resource.data.authorId == request.auth.uid || isAdmin());
        }
    }
    
    // PRIVATE MESSAGING
    // Access to chats and messages is restricted to participants.
    match /chats/{chatId} {
      allow read, update, delete: request.auth != null && request.auth.uid in resource.data.users;
      allow create: request.auth != null && request.auth.uid in request.resource.data.users;

      match /messages/{messageId} {
        allow read, create: request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
        allow update, delete: isAdmin(); // Or more specific rules if needed
      }
    }
    
    // VERIFICATION SYSTEM
    // Users can create requests for themselves. Only Admin can read/update them.
    match /verificationRequests/{requestId} {
      allow create: request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: isAdmin();
    }
    
    // ADMIN-ONLY CONTENT
    // These collections are only writable by the administrator.
    // They are publicly readable.
    match /roster/{memberId} {
        allow read;
        allow write: isAdmin();
    }
    match /announcements/{announcementId} {
        allow read;
        allow write: isAdmin();
    }
    match /games/{gameId} {
        allow read;
        allow write: isAdmin();
    }
    match /siteSettings/{settingsId} {
        allow read;
        allow write: isAdmin();
    }
    match /heroImages/{imageId} {
        allow read;
        allow write: isAdmin();
    }
    match /timelineEvents/{eventId} {
        allow read;
        allow write: isAdmin();
    }
     match /coreValues/{valueId} {
        allow read;
        allow write: isAdmin();
    }
    match /galleryImages/{imageId} {
        allow read;
        allow write: isAdmin();
    }
     match /pageContent/{pageId} {
        allow read;
        allow write: isAdmin();
    }
  }
}
