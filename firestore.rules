
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email == 'fortunedomination@gmail.com';
    }

    // `users` collection
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId)
                    && request.resource.data.uid == userId
                    && request.resource.data.email == request.auth.token.email
                    && !exists(/databases/$(database)/documents/usernames/$(request.resource.data.username.lower()));
      
      allow update: if isOwner(userId)
                     && (
                       // Allow updating username if new username doesn't exist
                       (request.resource.data.username != resource.data.username && !exists(/databases/$(database)/documents/usernames/$(request.resource.data.username.lower()))) ||
                       // Allow updating photoURL
                       request.resource.data.photoURL != resource.data.photoURL ||
                       // Allow setting role only once, if it was 'User' before
                       (resource.data.role == 'User' && request.resource.data.role != 'User')
                     )
                     // Prevent changing other fields
                     && request.resource.data.uid == resource.data.uid
                     && request.resource.data.email == resource.data.email
                     && request.resource.data.verification == resource.data.verification;
      
      allow update: if isAdmin() && request.resource.data.verification != resource.data.verification;

      // Followers and Following subcollections
      match /followers/{followerId} {
        allow read: if true;
        allow create, delete: if isOwner(followerId); // A user can add/remove themself from someone's followers list
      }

      match /following/{followingId} {
        allow read: if true;
        allow create, delete: if isOwner(userId); // A user can manage their own following list
      }
    }
    
    // `usernames` collection for unique username constraints
    match /usernames/{username} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username.lower() == username;
    }

    // `blogPosts` collection
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if isSignedIn()
                     && request.resource.data.authorId == request.auth.uid;
      allow update: if (isOwner(resource.data.authorId) || isAdmin())
                     // Likes can be updated by any signed-in user
                     || (isSignedIn() && request.resource.data.keys().hasOnly(['likes'])); 
      allow delete: if isOwner(resource.data.authorId) || isAdmin();

      // Comments and Replies on Blog Posts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if (isOwner(resource.data.authorId) || isAdmin())
                       // Likes on comments
                       || (isSignedIn() && request.resource.data.keys().hasOnly(['likes']));
        allow delete: if isOwner(resource.data.authorId) || isAdmin();

        match /replies/{replyId} {
          allow read: if true;
          allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
          allow update: if (isOwner(resource.data.authorId) || isAdmin())
                         // Likes on replies
                         || (isSignedIn() && request.resource.data.keys().hasOnly(['likes']));
          allow delete: if isOwner(resource.data.authorId) || isAdmin();
        }
      }
    }
    
    // `shorts` collection
    match /shorts/{shortId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isOwner(resource.data.authorId) || isAdmin())
                     // Likes and shares can be updated by any signed-in user
                     || (isSignedIn() && request.resource.data.keys().hasOnly(['likes', 'shares'])); 
      allow delete: if isOwner(resource.data.authorId) || isAdmin();

      // Comments on Shorts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
      }
    }

    // `chats` collection for private messaging
    match /chats/{chatId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.users || isAdmin();
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.users;

      match /messages/{messageId} {
        allow read, create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.users[0] == request.auth.uid || get(/databases/$(database)/documents/chats/$(chatId)).data.users[1] == request.auth.uid || isAdmin();
      }
    }

    // `verificationRequests` collection
    match /verificationRequests/{requestId} {
      allow read, update: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
    
    // Collections only manageable by admins
    match /{collection}/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
