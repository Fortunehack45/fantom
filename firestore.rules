rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an Admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // Function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // =============================================
    // User Profiles & Usernames
    // =============================================
    match /users/{userId} {
      // READ: Anyone can read public profile data.
      allow get: true;
      
      // LIST (Query): Crucially, allows anyone to query the collection to find users by username.
      // This is required for the profile page to work.
      allow list: true;

      // CREATE: A user can only create their own user document.
      allow create: if isOwner(userId);

      // UPDATE: A user can only update their own profile. Admin can also update.
      // A user cannot change their own verification status.
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) 
                      || isAdmin();
                      
      // DELETE: No one can delete user profiles for now.
      allow delete: if false;

      // --- Subcollections ---
      match /followers/{followerId} {
        // Anyone can read who is following a user.
        allow read: true;
        // A user can only add/remove themselves from another user's followers list.
        allow write: if isOwner(followerId);
      }

      match /following/{followingId} {
        // Anyone can read who a user is following.
        allow read: true;
        // A user can only manage their own "following" list.
        allow write: if isOwner(userId);
      }
    }
    
    // Enforces unique usernames.
    match /usernames/{username} {
      allow read: true;
      // Allow create only if the username matches the one in the user's own document.
      allow create: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      // Only the user or an admin can delete a username entry (e.g., when changing it).
      allow delete: if request.auth != null &&
                       (resource.data.uid == request.auth.uid || isAdmin());
    }

    // =============================================
    // Content: Blog Posts & Shorts
    // =============================================
    match /blogPosts/{postId} {
      // Anyone can read blog posts.
      allow get: true;
      allow list: true;
      
      // Any authenticated user can create a post, but must be the author.
      allow create: if isOwner(request.resource.data.authorId);
      
      // Only the author or an admin can update or delete.
      allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
      
      // Comments Subcollection
      match /comments/{commentId} {
        allow read: true;
        allow create: if request.auth != null;
        allow update: if isOwner(request.resource.data.authorId) || isAdmin();
        allow delete: if isOwner(resource.data.authorId) || isAdmin();

        // Replies Sub-Subcollection
        match /replies/{replyId} {
            allow read: true;
            allow create: if request.auth != null;
            allow delete: if isOwner(resource.data.authorId) || isAdmin();
        }
      }
    }
    
    match /shorts/{shortId} {
      // Anyone can read shorts.
      allow read: true;
      allow list: true;

      // Any authenticated user can create a short, but must be the author.
      allow create: if isOwner(request.resource.data.authorId);
      
      // Only the author or an admin can update or delete.
      allow update, delete: if isOwner(resource.data.authorId) || isAdmin();

      // Comments Subcollection
      match /comments/{commentId} {
        allow read: true;
        allow create: if request.auth != null;
        allow update: if isOwner(request.resource.data.authorId) || isAdmin();
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
      }
    }
    
    // =============================================
    // Private Messaging
    // =============================================
    match /chats/{chatId} {
      // Only chat participants can read/write to the chat document.
      // Admin can read the chat document to see participants, but not messages.
      allow get: if request.auth.uid in resource.data.users || isAdmin();
      allow list: if request.auth.uid in resource.data.users || isAdmin();
      allow create, update: if request.auth.uid in request.resource.data.users;
      
      // Messages Subcollection
      match /messages/{messageId} {
        // To read or write a message, user must be a participant in the parent chat.
        allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
        allow update, delete: if false; // Messages are immutable
      }
    }
    
    // =============================================
    // Verification System
    // =============================================
    match /verificationRequests/{requestId} {
      // A user can only create a request for themselves.
      allow create: if isOwner(request.resource.data.userId);

      // Only an Admin can read, update, or delete requests.
      allow read, update, delete: if isAdmin();
    }
    
    // =============================================
    // Site Management (Admin Only)
    // =============================================
    match /roster/{memberId} {
      allow read: true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: true;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read: true;
      allow write: if isAdmin();
    }

    match /heroImages/{imageId} {
      allow read: true;
      allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
      allow read: true;
      allow write: if isAdmin();
    }

    match /coreValues/{valueId} {
      allow read: true;
      allow write: if isAdmin();
    }

    match /galleryImages/{imageId} {
      allow read: true;
      allow write: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow read: true;
      allow write: if isAdmin();
    }

    match /pageContent/{pageId} {
      allow read: true;
      allow write: if isAdmin();
    }
  }
}