rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =============================================
    // Helper Functions
    // =============================================
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isParticipant(chatId) {
      return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }

    // =============================================
    // User Management
    // =============================================
    match /users/{userId} {
      // READ: Anyone can view profiles and list users for search.
      allow get, list: if true;
      
      // CREATE: A user can only create their own document.
      allow create: if isOwner(userId);
      
      // UPDATE: A user can only update their own profile. Admin can update any.
      // Verification status can ONLY be changed by an Admin, not the user.
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) 
                    || isAdmin();
      
      // DELETE: No one can delete user accounts from the client.
      allow delete: if false;

      // --- Subcollections ---
      match /followers/{followerId} {
        allow read: if true;
        // A user can only add/remove their own ID to another user's followers list.
        allow write: if isOwner(followerId) || isAdmin();
      }

      match /following/{followingId} {
        allow read: if true;
        // A user can only modify their own following list.
        allow write: if isOwner(userId) || isAdmin();
      }
    }

    match /usernames/{username} {
      // READ: Anyone can check if a username exists.
      allow get: if true;
      allow list: if false;

      // CREATE: A user can only claim a username that matches their own profile's username.
      // This prevents impersonation and ensures atomicity with the user profile creation.
      allow create: if request.auth != null && 
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;

      // DELETE: A user can only delete their own username document (e.g., when changing it).
      allow delete: if request.auth != null &&
                     resource.data.uid == request.auth.uid;
                     
      allow update: if false;
    }

    // =============================================
    // Content (Posts & Shorts)
    // =============================================
    match /blogPosts/{postId} {
      // READ: All posts are public.
      allow get, list: if true;
      
      // CREATE: Any authenticated user can create a post, but authorId must be theirs.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      
      // UPDATE: Only the author or an admin can update a post.
      allow update: if (resource.data.authorId == request.auth.uid) || isAdmin();
      
      // DELETE: Only the author or an admin can delete a post.
      allow delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
    }
    
    match /shorts/{shortId} {
      // READ: All shorts are public.
      allow get, list: if true;
      
      // CREATE: Any authenticated user can create a short, but authorId must be theirs.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      
      // UPDATE: Only the author or an admin can update a short.
      allow update: if (resource.data.authorId == request.auth.uid) || isAdmin();
      
      // DELETE: Only the author or an admin can delete a short.
      allow delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
    }
    
    // =============================================
    // Social & Interaction (Comments, Replies)
    // =============================================
    match /blogPosts/{postId}/comments/{commentId} {
       allow read: if true;
       // CREATE: Any signed-in user can comment.
       allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
       // UPDATE/DELETE: Only the comment author or an admin can edit/delete.
       allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
    }

    match /blogPosts/{postId}/comments/{commentId}/replies/{replyId} {
       allow read: if true;
       // CREATE: Any signed-in user can reply.
       allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
       // UPDATE/DELETE: Only the reply author or an admin can edit/delete.
       allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
    }
    
    // Comments for Shorts
    match /shorts/{shortId}/comments/{commentId} {
       allow read: if true;
       allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
       allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
    }
    
    // Rule for Admin "Fix User Data" function to query across all comments/replies
    match /{path=**}/comments/{commentId} {
      allow read, write: if isAdmin();
    }
    match /{path=**}/replies/{replyId} {
      allow read, write: if isAdmin();
    }

    // =============================================
    // Private Messaging
    // =============================================
    match /chats/{chatId} {
      // READ/LIST: Admin can list chats for moderation, users can only read their own.
      allow get, list: if isParticipant(chatId) || isAdmin();
      
      // CREATE/UPDATE: Only participants of the chat can create or update it.
      allow create, update: if isParticipant(chatId);
      
      allow delete: if false; // Don't allow deleting chats.

      // --- Messages Subcollection ---
      match /messages/{messageId} {
         // Users can only read/create messages in chats they are part of.
        allow read, create: if isParticipant(chatId);
        allow update, delete: if false; // Messages are immutable.
      }
    }

    // =============================================
    // Verification System
    // =============================================
    match /verificationRequests/{requestId} {
      // CREATE: User can only create a request for their own ID.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      
      // READ/UPDATE/DELETE: Only the admin can manage requests.
      allow read, update, delete: if isAdmin();
    }

    // =============================================
    // Site-wide Admin-Managed Content
    // =============================================
    match /roster/{memberId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }

    match /announcements/{announcementId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    match /pageContent/{pageName} {
       allow get, list: if true;
       allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
       allow get, list: if true;
       allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
       allow get, list: if true;
       allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
       allow get, list: if true;
       allow write: if isAdmin();
    }
    
     match /galleryImages/{imageId} {
       allow get, list: if true;
       allow write: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
  }
}
