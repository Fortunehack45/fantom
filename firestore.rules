rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    //------------------------------------------------------------
    // Functions
    //------------------------------------------------------------
    
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email == 'fortunedomination@gmail.com';
    }
    
    function getProfile(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isProfileData(data) {
        return data.keys().hasAll(['uid', 'email', 'username', 'photoURL', 'role', 'verification']);
    }
    
    //------------------------------------------------------------
    // Site Content (Admin Only)
    //------------------------------------------------------------

    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
       allow read: if true;
       allow write: if isAdmin();
    }

    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /galleryImages/{galleryId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /siteSettings/{settingsId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /pageContent/{pageId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    //------------------------------------------------------------
    // User Management
    //------------------------------------------------------------

    match /users/{userId} {
      allow read: if true;
      
      // Allow create for any signed in user during sign up process
      allow create: if isSignedIn() 
                      && isOwner(userId)
                      && request.resource.data.uid == userId
                      && request.resource.data.username.size() >= 3 && request.resource.data.username.size() <= 15
                      && request.resource.data.username.matches('^[a-zA-Z0-9_]+$');
                      
      // Allow update only for the owner or an admin
      allow update: if (isOwner(userId) || isAdmin())
                    // Username can only be changed if it's not taken
                    && (!('username' in request.resource.data) || get(/databases/$(database)/documents/usernames/$(request.resource.data.username.lower())) == null || get(/databases/$(database)/documents/usernames/$(request.resource.data.username.lower())).data.uid == userId)
                    // Regular users can only update specific fields
                    && (isAdmin() || request.resource.data.diff(resource.data).affectedKeys().hasOnly(['username', 'photoURL', 'role']));
    }
    
    match /usernames/{username} {
      allow read: if true;
      // Allow creation/deletion only as part of a user profile update (handled by rules on /users/{userId})
      allow create, delete: if isSignedIn(); 
    }
    
    // Followers & Following
    match /users/{followedId}/followers/{followerId} {
      allow read: if true;
      // You can only add/remove yourself as a follower
      allow write: if isSignedIn() && isOwner(followerId);
    }
    
    match /users/{followerId}/following/{followedId} {
      allow read: if true;
      // You can only add/remove someone from your own 'following' list
      allow write: if isSignedIn() && isOwner(followerId);
    }

    //------------------------------------------------------------
    // User Generated Content
    //------------------------------------------------------------

    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
      
      // Likes on posts
      // A user can only add or remove their own UID from the 'likes' array
      match /blogPosts/{postId} {
          allow update: if isSignedIn() && request.resource.data.likes.diff(resource.data.likes).affectedKeys().hasOnly([request.auth.uid]);
      }
      
      // Comments on posts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
        
        // Likes on comments
        match /comments/{commentId} {
             allow update: if isSignedIn() && request.resource.data.likes.diff(resource.data.likes).affectedKeys().hasOnly([request.auth.uid]);
        }
        
        // Replies to comments
        match /replies/{replyId} {
            allow read: if true;
            allow create: if isSignedIn();
            allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
            
            // Likes on replies
             match /replies/{replyId} {
                allow update: if isSignedIn() && request.resource.data.likes.diff(resource.data.likes).affectedKeys().hasOnly([request.auth.uid]);
            }
        }
      }
    }
    
    match /shorts/{shortId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
      
       // Likes & Shares on shorts
      allow update: if isSignedIn() 
                      && (request.resource.data.likes.diff(resource.data.likes).affectedKeys().hasOnly([request.auth.uid])
                         || request.resource.data.shares == resource.data.shares + 1);

      // Comments on shorts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
      }
    }

    //------------------------------------------------------------
    // Messaging
    //------------------------------------------------------------

    match /chats/{chatId} {
      allow read, write: if isSignedIn() && (request.auth.uid in resource.data.users || isAdmin());
      
      match /messages/{messageId} {
        allow read: if isSignedIn() && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users || isAdmin());
        allow create: if isSignedIn() && isOwner(request.resource.data.senderId) && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users);
      }
    }
    
    //------------------------------------------------------------
    // Verification Requests (Admin Only)
    //------------------------------------------------------------
    match /verificationRequests/{requestId} {
        allow read, write: if isAdmin();
        // Users can create a request
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }
  }
}
