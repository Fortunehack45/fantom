rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Clan Owner' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email == 'fortunedomination@gmail.com';
    }
    
    function isOwner(resourceId) {
    	return request.auth.uid == resourceId;
    }
    
    function isVerifiedCreator() {
    	let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user.verification == 'Blue' || user.verification == 'Gold';
    }

    match /users/{userId} {
      // Logged-in users can view profiles.
      allow read: if request.auth != null;
      // Users can only update their own profile or if they are an admin.
      allow write: if isOwner(userId) || isAdmin();
      
      // Subcollections for follows
      match /followers/{followerId} {
        allow read: if true;
        allow write: if isOwner(followerId); // Only you can make yourself follow someone
      }
      match /following/{followingId} {
        allow read: if true;
        allow write: if isOwner(userId); // Only you can add to your following list
      }
    }
    
    match /usernames/{username} {
      // Anyone can check if a username exists
      allow read: if true;
      // Only an authenticated user can create/delete their own username document during profile updates.
      allow create, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
    }

    match /blogPosts/{postId} {
      // Anyone can read blog posts
      allow read: if true;
      // Only verified creators can create posts
      allow create: if isVerifiedCreator() && isOwner(request.resource.data.authorId);
      // Only the author or an admin can update/delete
      allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
      
      // Liking a post
      match /likes/{userId} {
      	allow read: if true;
        allow write: if isOwner(userId); // You can only like/unlike for yourself
      }

      // Comments on posts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null && isOwner(request.resource.data.authorId);
        allow update: if isOwner(resource.data.authorId) || isAdmin();
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
        
        match /replies/{replyId} {
           allow read: if true;
           allow create: if request.auth != null && isOwner(request.resource.data.authorId);
           allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
        }
      }
    }

    match /shorts/{shortId} {
      allow read: if true;
      allow create: if isVerifiedCreator() && isOwner(request.resource.data.authorId);
      allow update, delete: if isOwner(resource.data.authorId) || isAdmin();

      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null && isOwner(request.resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
      }
    }

    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.users || isAdmin();
      match /messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users || isAdmin();
      }
    }
    
    match /verificationRequests/{requestId} {
    	allow read, write: if isAdmin();
      allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // Read-only collections for public display, managed by admin
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /announcements/{announcementId} {
       allow read: if true;
       allow write: if isAdmin();
    }
    match /games/{gameId} {
       allow read: if true;
       allow write: if isAdmin();
    }
    match /heroImages/{imageId} {
       allow read: if true;
       allow write: if isAdmin();
    }
    match /timelineEvents/{eventId} {
       allow read: if true;
       allow write: if isAdmin();
    }
    match /coreValues/{valueId} {
       allow read: if true;
       allow write: if isAdmin();
    }
     match /galleryImages/{imageId} {
       allow read: if true;
       allow write: if isAdmin();
    }

    // Site-wide settings, only manageable by admin
    match /siteSettings/{settingsId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /pageContent/{pageId} {
       allow read: if true;
       allow write: if isAdmin();
    }
  }
}
