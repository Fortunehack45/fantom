
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // Users can be read by anyone, but only the user themselves or an admin can update.
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if (request.auth != null && request.auth.uid == userId) || isAdmin();
      
      // Followers/Following can be read by anyone, but only the user can modify their own lists.
      match /followers/{followerId} {
        allow read: if true;
        allow write: if (request.auth != null && request.auth.uid == followerId) || isAdmin();
      }
      match /following/{followingId} {
        allow read: if true;
        allow write: if (request.auth != null && request.auth.uid == userId) || isAdmin();
      }
    }

    // Usernames collection to enforce uniqueness.
    match /usernames/{username} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow delete: if isAdmin() || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username);
    }
    
    // Blog posts can be read by anyone.
    // Create is allowed for any authenticated user, but they must be the author.
    // Update/Delete is restricted to the author or an admin.
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();

      // Comments can be read by anyone.
      // Any authenticated user can create a comment.
      // Only the author or an admin can delete a comment.
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow delete: if (resource.data.authorId == request.auth.uid) || isAdmin();

        // Replies follow the same logic as comments.
        match /replies/{replyId} {
          allow read: if true;
          allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
          allow delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }

    // Shorts follow the same rules as Blog Posts.
    match /shorts/{shortId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
      
      // Comments on shorts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }

    // Private chats are restricted to participants.
    match /chats/{chatId} {
      allow read, update, write: if request.auth != null && request.auth.uid in resource.data.users;
      
      // Messages within a chat are also restricted to participants.
      match /messages/{messageId} {
         allow read, create: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
      }
    }

    // Verification requests can only be created by the user for themselves.
    // Only admins can read or update the status of requests.
    match /verificationRequests/{requestId} {
      allow read, update: if isAdmin();
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Admin-only editable content.
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /coreValues/{valueId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /galleryImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /siteSettings/{settingsId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /pageContent/{pageId} {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}
