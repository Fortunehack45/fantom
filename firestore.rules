rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return request.auth.email == 'fortunedomination@gmail.com';
    }

    // Helper function to check if a user is the owner of a resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // =====================================================================
    // 1. User Accounts & Profiles
    // =====================================================================

    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();

      // Followers and Following Subcollections
      match /followers/{followerId} {
        allow read;
        allow create, delete: if request.auth.uid == followerId || isOwner(userId);
      }
      match /following/{followingId} {
        allow read;
        allow create, delete: if isOwner(userId);
      }
    }

    match /usernames/{username} {
      allow read;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username != username;
    }


    // =====================================================================
    // 2. Content Creation (Blog Posts & Shorts)
    // =====================================================================

    match /blogPosts/{postId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();

      // Likes are handled in the update rule logic, checking only the 'likes' field
      allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);

      // Comments on Blog Posts
      match /comments/{commentId} {
        allow read;
        allow create: if isSignedIn();
        allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();

        // Replies to Comments
        match /replies/{replyId} {
          allow read;
          allow create: if isSignedIn();
          allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }

    match /shorts/{shortId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      
      // Likes are handled in the update rule logic
      allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'shares']);
      
       // Comments on Shorts
      match /comments/{commentId} {
        allow read;
        allow create: if isSignedIn();
        allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }


    // =====================================================================
    // 4. Private Messaging
    // =====================================================================

    match /chats/{chatId} {
      allow get: if request.auth.uid in resource.data.users || isAdmin();
      allow list: if request.auth.uid in resource.data.users;
      allow create, update: if request.auth.uid in resource.data.users;

      match /messages/{messageId} {
        allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
      }
    }


    // =====================================================================
    // 5. Verification System
    // =====================================================================

    match /verificationRequests/{requestId} {
      allow read, update, delete: if isAdmin();
      allow create: if isOwner(request.resource.data.userId);
    }


    // =====================================================================
    // 6. Administrator Panel & Site Management
    // =====================================================================
    
    match /roster/{memberId} {
      allow read;
      allow write: if isAdmin();
    }
    match /announcements/{announcementId} {
      allow read;
      allow write: if isAdmin();
    }
    match /games/{gameId} {
      allow read;
      allow write: if isAdmin();
    }
     match /heroImages/{imageId} {
      allow read;
      allow write: if isAdmin();
    }
    match /siteSettings/{docId} {
      allow read;
      allow write: if isAdmin();
    }
    match /pageContent/{docId} {
      allow read;
      allow write: if isAdmin();
    }
    match /timelineEvents/{eventId} {
        allow read;
        allow write: if isAdmin();
    }
    match /coreValues/{valueId} {
        allow read;
        allow write: if isAdmin();
    }
    match /galleryImages/{imageId} {
        allow read;
        allow write: if isAdmin();
    }
  }
}