rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    //------------------------------------------------------------
    // Helper Functions
    //------------------------------------------------------------
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      // In a real app, this should check a custom claim or a list of admin UIDs in Firestore.
      return isSignedIn() && request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    // Checks if the user is the author of a document in a specific collection.
    function isAuthor(collectionName, resourceId) {
      return isUser(get(/databases/$(database)/documents/$(collectionName)/$(resourceId)).data.authorId);
    }

    //------------------------------------------------------------
    // User Data & Profiles
    //------------------------------------------------------------
    match /users/{userId} {
      // Anyone can view a user's profile.
      allow get, list;
      
      // A user can only create their own user document.
      allow create: if isUser(userId) && request.resource.data.uid == request.auth.uid;
      
      // A user can update their own document, but cannot change their verification status.
      // An admin can update any user document.
      allow update: if (isUser(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
      
      // Only an admin can delete a user.
      allow delete: if isAdmin();
      
      // A user can only manage their own following list.
      match /following/{followingId} {
        allow read, list;
        allow create, delete: if isUser(userId) || isAdmin();
      }
      
      // A user can only add/remove themselves from another user's followers list.
      match /followers/{followerId} {
        allow read, list;
        allow create, delete: if isUser(followerId) || isAdmin();
      }
    }
    
    // Enforces unique usernames.
    match /usernames/{username} {
      allow get;
      // Can only create a username document if the username matches what's in their own user document.
      allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      allow delete: if isAdmin() || isUser(get(/databases/$(database)/documents/usernames/$(username)).data.uid);
    }

    //------------------------------------------------------------
    // Content: Blog Posts & Shorts
    //------------------------------------------------------------
    match /blogPosts/{postId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      
      // Allows the author/admin to update the whole document.
      // Allows any signed-in user to update ONLY the 'likes' array.
      allow update: if (isAuthor('blogPosts', postId) || isAdmin()) ||
                      (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
                      
      allow delete: if isAuthor('blogPosts', postId) || isAdmin();
    }
    
    match /shorts/{shortId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      
      // Allows the author/admin to update the whole document.
      // Allows any signed-in user to update ONLY the 'likes' array.
      allow update: if (isAuthor('shorts', shortId) || isAdmin()) ||
                      (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));

      allow delete: if isAuthor('shorts', shortId) || isAdmin();
    }

    //------------------------------------------------------------
    // Social: Comments & Replies
    //
    // Granting admin full write access to the collection groups
    // is necessary for the "Fix User Data" batch write feature.
    //------------------------------------------------------------
    match /{path=**}/comments/{commentId} {
      allow read;
      allow create: if isSignedIn();
      // Allow author to delete, but only admin to update (for data integrity)
      allow delete: if isUser(resource.data.authorId) || isAdmin();
      allow update: if isAdmin();
    }
    
    match /{path=**}/replies/{replyId} {
      allow read;
      allow create: if isSignedIn();
      // Allow author to delete, but only admin to update (for data integrity)
      allow delete: if isUser(resource.data.authorId) || isAdmin();
      allow update: if isAdmin();
    }

    //------------------------------------------------------------
    // Private Messaging
    //------------------------------------------------------------
    match /chats/{chatId} {
      allow get, list, update: if (isSignedIn() && request.auth.uid in resource.data.users) || isAdmin();
      // Correct rule for creating a new chat document
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.users;
      allow delete: if isAdmin();
      
      match /messages/{messageId} {
        allow read, create: if (isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users) || isAdmin();
      }
    }
    
    //------------------------------------------------------------
    // Verification System
    //------------------------------------------------------------
    match /verificationRequests/{requestId} {
      allow get, list, update, delete: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    //------------------------------------------------------------
    // Site-Wide Content (Admin-managed)
    //------------------------------------------------------------
    match /roster/{memberId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow read;
      allow write: if isAdmin();
    }

    match /timelineEvents/{eventId} {
      allow read;
      allow write: if isAdmin();
    }

    match /coreValues/{valueId} {
      allow read;
      allow write: if isAdmin();
    }

    match /galleryImages/{imageId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow read;
      allow write: if isAdmin();
    }

    match /pageContent/{pageId} {
      allow read;
      allow write: if isAdmin();
    }
  }
}
