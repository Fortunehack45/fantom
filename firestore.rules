rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isAdmin() {
      // Use your actual admin email here
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }
    function isProfileOwner(userId) {
      return request.auth.uid == userId;
    }

    // Default Deny
    match /{document=**} {
      allow read, write: if false;
    }

    // 1. User Accounts & Profiles
    // This rule allows the query by username to find a user
    match /users {
      allow get, list;
    }
    match /users/{userId} {
      allow get; // Anyone can read a user's profile
      allow create: if isOwner(userId); // A user can create their own document
      allow update: if (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['username', 'photoURL', 'role'])) || isAdmin(); // Owner can update specific fields, admin can update any
      allow delete: if isAdmin(); // Only admin can delete user accounts
    }

    // 2. Usernames (for uniqueness)
    match /usernames/{username} {
      allow get; // Publicly readable to check for existence
      allow create: if request.auth.uid == request.resource.data.uid;
      allow delete: if request.auth.uid == resource.data.uid;
    }
    
    // 3. Followers & Following
    match /users/{userId}/followers/{followerId} {
      allow read;
      allow create: if request.auth.uid == followerId;
      allow delete: if request.auth.uid == followerId;
    }
    match /users/{userId}/following/{followingId} {
      allow read;
      allow create: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
    // 4. Content Creation (Blog & Shorts)
    match /blogPosts/{postId} {
      allow get, list; // Anyone can read
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isOwner(resource.data.authorId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])) || isOwner(resource.data.authorId) || isAdmin();
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }
    match /shorts/{shortId} {
      allow get, list; // Anyone can read
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'shares'])) || isOwner(resource.data.authorId) || isAdmin();
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }
    
    // 5. Comments and Replies
    match /blogPosts/{postId}/comments/{commentId} {
        allow read, list;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
        
        match /replies/{replyId} {
            allow read, list;
            allow create: if isSignedIn();
            allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
            allow delete: if isOwner(resource.data.authorId) || isAdmin();
        }
    }
     match /shorts/{shortId}/comments/{commentId} {
        allow read, list;
        allow create: if isSignedIn();
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }
    
    // 6. Private Messaging
    match /chats/{chatId} {
      allow read, update, write: if request.auth.uid in resource.data.users;
      allow get: if isAdmin(); // Admin can get a specific chat document for metadata
      
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    // 7. Verification System
    match /verificationRequests/{requestId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update, delete: if isAdmin();
    }
    
    // 8. Administrator Panel & Site Management
    match /roster/{memberId} {
      allow read;
      allow write: if isAdmin();
    }
    match /announcements/{announcementId} {
      allow read;
      allow write: if isAdmin();
    }
    match /games/{gameId} {
        allow read;
        allow write: if isAdmin();
    }
    match /siteSettings/{settingId} {
        allow read;
        allow write: if isAdmin();
    }
    match /pageContent/{pageId} {
        allow read;
        allow write: if isAdmin();
    }
    match /heroImages/{imageId} {
        allow read;
        allow write: if isAdmin();
    }
    match /timelineEvents/{eventId} {
        allow read;
        allow write: if isAdmin();
    }
    match /coreValues/{valueId} {
        allow read;
        allow write: if isAdmin();
    }
    match /galleryImages/{imageId} {
        allow read;
        allow write: if isAdmin();
    }
  }
}