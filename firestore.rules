
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Collection: /users/{userId}
    match /users/{userId} {
      // Anyone can read profile data to view user pages and list users for searching.
      allow get, list;
      
      // A user can create their own user document.
      allow create: if isOwner(userId);
      
      // A user can only update their own profile data.
      // They cannot change their verification status directly.
      // Admin can update any user profile.
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
    }

    // Collection: /usernames/{username}
    // Enforces unique usernames.
    match /usernames/{username} {
        // Anyone can check if a username exists.
        allow get;
        // A user can only create a username document if the username matches their own user document's username.
        // This prevents impersonation and ensures atomicity during username changes.
        allow create: if request.auth != null &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
        // Only the owner can delete their username document (as part of a username change).
        allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
    }

    // Collection: /blogPosts/{postId}
    match /blogPosts/{postId} {
      // Anyone can read blog posts.
      allow get, list;
      
      // Any authenticated user can create a post, but the authorId must be their own UID.
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      
      // Only the original author or an Admin can update/delete a post.
      allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
      
      // Subcollection: Comments
      match /comments/{commentId} {
        allow get, list;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
        
        // Subcollection: Replies
        match /replies/{replyId} {
          allow get, list;
          allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
          allow delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }
    
    // Collection: /shorts/{shortId}
    match /shorts/{shortId} {
      allow get, list;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
      
      // Subcollection: Comments
      match /comments/{commentId} {
        allow get, list;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow delete: if (resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }

    // Collection: /chats/{chatId}
    match /chats/{chatId} {
      // Allow read/write only if the user is a participant in the chat.
      allow read, write, update: if request.auth.uid in resource.data.users;
      
      // Subcollection: Messages
      match /messages/{messageId} {
        // Inherit read/create permission from the parent chat document.
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    // Collection: /verificationRequests/{requestId}
    match /verificationRequests/{requestId} {
      // A user can only create a request for their own UID.
      allow create: if request.auth.uid == request.resource.data.userId;
      // Only the admin can read, update, or delete requests.
      allow read, update, delete: if isAdmin();
    }
    
    // Admin-only Collections
    match /roster/{memberId} {
      allow get, list;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow get, list;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow get, list;
      allow write: if isAdmin();
    }
    
     match /heroImages/{imageId} {
      allow get, list;
      allow write: if isAdmin();
    }

    match /timelineEvents/{eventId} {
      allow get, list;
      allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
      allow get, list;
      allow write: if isAdmin();
    }

    match /galleryImages/{imageId} {
      allow get, list;
      allow write: if isAdmin();
    }
    
    match /pageContent/{pageName} {
       allow get, list;
       allow write: if isAdmin();
    }

    match /siteSettings/{settingsId} {
        allow get, list;
        allow write: if isAdmin();
    }
    
  }
}
