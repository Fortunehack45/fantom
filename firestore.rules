
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isVerified(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data.verification != 'None';
    }
    
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.email == 'fortunedomination@gmail.com';
    }

    // USERS: Publicly readable, but only the owner can write.
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId);
      
      // FOLLOWERS / FOLLOWING: Users can manage their own follow lists.
      match /followers/{followerId} {
        allow read: if true;
        allow write: if isOwner(followerId); // A user can decide to follow someone
      }
      match /following/{followingId} {
        allow read: if true;
        allow write: if isOwner(userId); // A user manages their own list of who they follow
      }
    }
    
    // USERNAMES: Ensures usernames are unique.
    match /usernames/{username} {
      allow read: if true;
      // Only allow creating if the username doesn't exist.
      // Updates and deletes are handled by a Cloud Function or transactional write in the app.
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow delete, update: if false; // Should be handled server-side or via security rules on user doc
    }

    // BLOG POSTS:
    match /blogPosts/{postId} {
      allow read: if true;
      // Allow create if user is signed in and verified.
      // Allow update/delete if user is the author or an admin.
      allow create: if isSignedIn() && isVerified(request.auth.uid);
      allow update, delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin(request.auth.uid));

      // COMMENTS: Signed-in users can comment. Author or admin can delete.
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isOwner(request.resource.data.authorId); // Liking a comment
        allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin(request.auth.uid));
        
        // REPLIES: Signed-in users can reply. Author or admin can delete.
        match /replies/{replyId} {
            allow read: if true;
            allow create: if isSignedIn();
            allow update: if isSignedIn() && isOwner(request.resource.data.authorId); // Liking a reply
            allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin(request.auth.uid));
        }
      }
    }
    
    // SHORTS:
    match /shorts/{shortId} {
      allow read: if true;
      allow create: if isSignedIn() && isVerified(request.auth.uid);
      allow update, delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin(request.auth.uid));
      
      // COMMENTS ON SHORTS
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin(request.auth.uid));
      }
    }

    // CHATS: Only participants or an admin can read/write messages.
    match /chats/{chatId} {
        allow read, write: if isSignedIn() && (request.auth.uid in resource.data.users || isAdmin(request.auth.uid));
        
        // MESSAGES: Only participants or an admin can access messages.
        match /messages/{messageId} {
            allow read, create: if isSignedIn() && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users || isAdmin(request.auth.uid));
            allow update, delete: if false; // Messages are immutable
        }
    }
    
    // VERIFICATION REQUESTS:
    match /verificationRequests/{requestId} {
      // Users can only create their own requests.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Admins can read, update (approve/deny), and delete requests.
      allow read, update, delete: if isSignedIn() && isAdmin(request.auth.uid);
    }
    
    // SITE-WIDE CONTENT (Read-only for users, writable by admin)
    // This covers 'games', 'heroImages', 'announcements', 'roster', 'siteSettings', etc.
    match /games/{gameId} {
      allow read: if true;
      allow write: if isSignedIn() && isAdmin(request.auth.uid);
    }
    
    match /heroImages/{imageId} {
       allow read: if true;
       allow write: if isSignedIn() && isAdmin(request.auth.uid);
    }
    
    match /announcements/{announcementId} {
       allow read: if true;
       allow write: if isSignedIn() && isAdmin(request.auth.uid);
    }

    match /roster/{memberId} {
       allow read: if true;
       allow write: if isSignedIn() && isAdmin(request.auth.uid);
    }
    
    match /siteSettings/{settingId} {
       allow read: if true;
       allow write: if isSignedIn() && isAdmin(request.auth.uid);
    }
    
    match /coreValues/{valueId} {
       allow read: if true;
       allow write: if isSignedIn() && isAdmin(request.auth.uid);
    }
    
    match /timelineEvents/{eventId} {
       allow read: if true;
       allow write: if isSignedIn() && isAdmin(request.auth.uid);
    }
    
    match /galleryImages/{imageId} {
       allow read: if true;
       allow write: if isSignedIn() && isAdmin(request.auth.uid);
    }

    match /pageContent/{pageId} {
       allow read: if true;
       allow write: if isSignedIn() && isAdmin(request.auth.uid);
    }

  }
}
