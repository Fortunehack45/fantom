
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // User Profiles
    // Anyone can read profiles. Users can only create/update their own.
    // Admin can update any profile (for verification).
    match /users/{userId} {
      allow read;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if (isSignedIn() && isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
      allow delete: if isAdmin();
      
      // Followers / Following subcollections
      match /followers/{followerId} {
        allow read;
        allow create, delete: if isSignedIn() && isOwner(followerId);
      }
      match /following/{followingId} {
        allow read;
        allow create, delete: if isSignedIn() && isOwner(userId);
      }
    }

    // Usernames: For enforcing unique usernames
    // Users can only create a username doc that matches their own user doc's username
    // and their own UID. This prevents impersonation.
    match /usernames/{username} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.lowercaseUsername == username;
    }

    // Blog Posts
    // Anyone can read. Signed-in users can create. Only author/admin can update/delete.
    match /blogPosts/{postId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin())) || (isSignedIn() && request.resource.data.keys().hasOnly(['likes']));
      allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
        
        // Comments on Blog Posts
        match /comments/{commentId} {
            allow read;
            allow create: if isSignedIn();
            allow update: if isSignedIn() && request.resource.data.keys().hasOnly(['likes']);
            allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());

            // Replies to comments
            match /replies/{replyId} {
                allow read;
                allow create: if isSignedIn();
                allow update: if isSignedIn() && request.resource.data.keys().hasOnly(['likes']);
                allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
            }
        }
    }

    // Shorts
    // Anyone can read. Signed-in users can create. Only author/admin can update/delete.
    match /shorts/{shortId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin())) || (isSignedIn() && request.resource.data.keys().hasOnly(['likes', 'shares']));
      allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
        
        // Comments on Shorts
        match /comments/{commentId} {
            allow read;
            allow create: if isSignedIn();
            allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
        }
    }

    // Private Messaging
    // Access is restricted to participants of the chat.
    match /chats/{chatId} {
        allow get, list, update: if isSignedIn() && request.auth.uid in resource.data.users || isAdmin();
        allow create: if isSignedIn() && request.auth.uid in request.resource.data.users;
      
      // Messages within a chat
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
      }
    }
    
    // Verification Requests
    // Users can create their own request. Only admin can read/update them.
    match /verificationRequests/{requestId} {
      allow read, update, delete: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // Admin-managed collections
    function adminOnly() {
      return {
        allow read;
        allow write: if isAdmin();
      }
    }
    
    match /roster/{memberId} {
      rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // You can also add a custom claim for roles here for better security
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // User Profiles & Usernames
    match /users/{userId} {
      allow list, get: if true; // Anyone can query for users and get a single user's profile
      allow create: if isSignedIn() && isOwner(userId);
      // User can update their own username, photoURL, bannerURL, but NOT verification status or role
      allow update: if (isSignedIn() && isOwner(userId) 
          && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['username', 'lowercaseUsername', 'photoURL', 'bannerURL'])) 
          || isAdmin(); // Admin can update anything
      allow delete: if isAdmin();
      
      // Followers / Following subcollections
      match /followers/{followerId} {
        allow read;
        allow create, delete: if isSignedIn() && isOwner(followerId);
      }
      match /following/{followingId} {
        allow read;
        allow create, delete: if isSignedIn() && isOwner(userId);
      }
    }

    match /usernames/{username} {
      allow get; // Allow checking for username existence
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      // Allow user to delete their old username doc when changing usernames
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.lowercaseUsername == username;
    }

    // Blog Posts & Shorts
    match /blogPosts/{postId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      // Allow author or admin to update content, or any user to update ONLY the likes array
      allow update: if (isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin())) || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
        
        match /comments/{commentId} {
            allow read;
            allow create: if isSignedIn();
            allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
            allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());

            match /replies/{replyId} {
                allow read;
                allow create: if isSignedIn();
                allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
                allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
            }
        }
    }

    match /shorts/{shortId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin())) || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'shares']));
      allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
        
        match /comments/{commentId} {
            allow read;
            allow create: if isSignedIn();
            allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
        }
    }

    // Private Messaging
    match /chats/{chatId} {
        allow get, list, update: if isSignedIn() && request.auth.uid in resource.data.users || isAdmin();
        allow create: if isSignedIn() && request.auth.uid in request.resource.data.users;
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
      }
    }
    
    // Verification Requests
    match /verificationRequests/{requestId} {
      allow list, get, update, delete: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // Admin-only Collections
    function adminOnly() {
      return {
        allow read, write: if isAdmin()
      }
    }
    
    match /roster/{docId} { an_only() }
    match /announcements/{docId} { adminOnly() }
    match /games/{docId} { adminOnly() }
    match /heroImages/{docId} { adminOnly() }
    match /timelineEvents/{docId} { adminOnly() }
    match /coreValues/{docId} { adminOnly() }
    match /galleryImages/{docId} { adminOnly() }
    match /siteSettings/{docId} { adminOnly() }
    match /pageContent/{docId} { adminOnly() }
  }
}
    }
    match /announcements/{announcementId} { adminOnly() }
    match /games/{gameId} { adminOnly() }
    match /heroImages/{imageId} { adminOnly() }
    match /timelineEvents/{eventId} { adminOnly() }
    match /coreValues/{valueId} { adminOnly() }
    match /galleryImages/{imageId} { adminOnly() }
    match /siteSettings/{settingId} { adminOnly() }
    match /pageContent/{pageId} { adminOnly() }
  }
}
