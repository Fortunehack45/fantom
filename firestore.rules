
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the user is the designated admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // User Profiles
    match /users/{userId} {
      // Anyone can read a user's profile data
      allow get: if true;
      // Anyone can query/list users to find profiles by username
      allow list: if true;
      // A user can only create their own user document
      allow create: if isSignedIn() && request.auth.uid == userId;
      // A user can update their own username or photoURL. They cannot change their verification status.
      // Admin can update any user's profile (to assign verification).
      allow update: if (isSignedIn() && request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['username', 'photoURL', 'role', 'lowercaseUsername'])) || isAdmin();
      // Only an admin can delete a user
      allow delete: if isAdmin();

      // Subcollections for followers/following
      match /followers/{followerId} {
        allow read, write: if isSignedIn();
      }
      match /following/{followingId} {
        allow read, write: if isSignedIn();
      }
    }

    // Unique Usernames
    match /usernames/{username} {
      // Anyone can check if a username exists
      allow get: if true;
      // You can only create a username document if you are signed in and the username matches
      // the one in your own user document and you are creating it for yourself.
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      // You can only delete your own username document
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }

    // Blog Posts
    match /blogPosts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      
      // Comments and replies are nested under posts
      match /comments/{commentId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
        allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
        
        match /replies/{replyId} {
           allow get, list: if true;
           allow create: if isSignedIn();
           allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
           allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }
    
    // Shorts
    match /shorts/{shortId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();

      match /comments/{commentId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }
    
    // Verification Requests
    match /verificationRequests/{requestId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Only admin can read and update (approve/deny) requests
      allow read, update: if isAdmin();
      allow list: if isAdmin();
    }
    
    // Private Chat
    match /chats/{chatId} {
      allow get, list, update, delete: if isSignedIn() && request.auth.uid in resource.data.users || isAdmin();
      allow create: if isSignedIn();
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }

    // Admin-only managed content
    match /roster/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /games/{gameId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /coreValues/{valueId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /siteSettings/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
     match /pageContent/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}

    