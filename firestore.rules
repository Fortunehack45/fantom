
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    //----------------------------------------------------------------------
    // Helper Functions
    //----------------------------------------------------------------------
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    //----------------------------------------------------------------------
    // User Data & Profiles
    //----------------------------------------------------------------------
    match /users/{userId} {
      // READ: Anyone can view user profiles.
      allow get: if true;
      allow list: if true;

      // CREATE: A user can only create their own user document.
      allow create: if isOwner(userId);

      // UPDATE: A user can update their own profile, but not their verification status.
      // Admin can update any profile.
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
    }

    match /usernames/{username} {
      // READ: Publicly readable for checks.
      allow get: if true;

      // CREATE: A user can only create a username document if the username
      // matches what's in their own user document.
      allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
    }

    //----------------------------------------------------------------------
    // Content: Blog Posts & Shorts
    //----------------------------------------------------------------------
    match /blogPosts/{postId} {
      // READ: All blog posts are public.
      allow get: if true;
      allow list: if true;

      // CREATE: Any signed-in user can create a post, but the authorId must be their own.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

      // UPDATE: Only the author or an admin can update.
      allow update: if (isOwner(resource.data.authorId) || isAdmin());

      // DELETE: Only the author or an admin can delete.
      allow delete: if (isOwner(resource.data.authorId) || isAdmin());
    }

    match /shorts/{shortId} {
      // READ: All shorts are public.
      allow get: if true;
      allow list: if true;

      // CREATE: Any signed-in user can create a short, but the authorId must be their own.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

      // UPDATE: Only the author or an admin can update.
      allow update: if (isOwner(resource.data.authorId) || isAdmin());

      // DELETE: Only the author or an admin can delete.
      allow delete: if (isOwner(resource.data.authorId) || isAdmin());
    }

    //----------------------------------------------------------------------
    // Social & Interaction: Comments, Replies, Follows
    //----------------------------------------------------------------------
    match /blogPosts/{postId}/comments/{commentId} {
      allow read, list: if true;
      allow create: if isSignedIn();
      allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
      
      match /replies/{replyId} {
        allow read, list: if true;
        allow create: if isSignedIn();
        allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
      }
    }

    match /shorts/{shortId}/comments/{commentId} {
      allow read, list: if true;
      allow create: if isSignedIn();
      allow delete: if isSignedIn() && (isOwner(resource.data.authorId) || isAdmin());
    }

    match /users/{userId}/followers/{followerId} {
      allow read, list: if true;
      allow create: if isOwner(followerId); // You can make yourself a follower of someone else
      allow delete: if isOwner(followerId); // You can remove yourself from their followers
    }

    match /users/{userId}/following/{followingId} {
      allow read, list: if true;
      allow create: if isOwner(userId); // You can add someone to your following list
      allow delete: if isOwner(userId); // You can remove someone from your following list
    }

    //----------------------------------------------------------------------
    // Private Messaging
    //----------------------------------------------------------------------
    match /chats/{chatId} {
      // READ/LIST: Admin can see chat metadata. Users can list chats they are in.
      allow list: if isAdmin() || (isSignedIn() && request.auth.uid in resource.data.users);
      allow get: if (isSignedIn() && request.auth.uid in resource.data.users) || isAdmin();

      // WRITE: Only participants can create or update a chat document.
      allow write: if isSignedIn() && request.auth.uid in request.resource.data.users;

      match /messages/{messageId} {
        // READ/WRITE: Only participants of the parent chat can access messages.
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }

    //----------------------------------------------------------------------
    // Verification System
    //----------------------------------------------------------------------
    match /verificationRequests/{requestId} {
      // CREATE: User can only create a request for themselves.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      
      // Admin can manage all requests.
      allow read, update, delete: if isAdmin();
    }

    //----------------------------------------------------------------------
    // Admin & Site-wide Content
    //----------------------------------------------------------------------
    // These collections are publicly readable but only writable by the admin.
    match /roster/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /announcements/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /games/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /heroImages/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /timelineEvents/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /coreValues/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /galleryImages/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /pageContent/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /siteSettings/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}
