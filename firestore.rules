rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isSignedIn() {
      return request.auth != null;
    }

    // ============== USERS & PROFILES ==============
    // Allows anyone to query the users collection (needed for profile pages)
    // Allows any authenticated user to create their own user document
    // Allows a user to update only their own document
    // Allows admin to update any user document
    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
    }

    // Guarantees that usernames are unique.
    match /usernames/{username} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }
    
    // ============== USER FOLLOWS ==============
    match /users/{userId}/followers/{followerId} {
      allow read;
      allow create: if isOwner(followerId);
      allow delete: if isOwner(followerId);
    }

    match /users/{userId}/following/{followingId} {
      allow read;
      allow create: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
    // ============== BLOG POSTS ==============
    match /blogPosts/{postId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isOwner(resource.data.authorId) || isAdmin()) 
                    // Allow anyone to like/unlike a post, but not change other fields
                    || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }
    
    // ============== BLOG COMMENTS & REPLIES ==============
    match /blogPosts/{postId}/comments/{commentId} {
        allow read;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
        allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
    }
    
    match /blogPosts/{postId}/comments/{commentId}/replies/{replyId} {
       allow read;
       allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
       allow delete: if isOwner(resource.data.authorId) || isAdmin();
       allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
    }

    // ============== SHORTS ==============
    match /shorts/{shortId} {
       allow read;
       allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
       allow update: if (isOwner(resource.data.authorId) || isAdmin())
                    || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'shares']));
       allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }

    match /shorts/{shortId}/comments/{commentId} {
        allow read;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }

    // ============== MESSAGING ==============
    match /chats/{chatId} {
      allow get: if request.auth.uid in resource.data.users || isAdmin();
      allow list: if isAdmin(); // Admin can list chats to see participants
      allow create, update: if request.auth.uid in resource.data.users;
    }

    match /chats/{chatId}/messages/{messageId} {
      allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
    }
    
    // ============== VERIFICATION ==============
    match /verificationRequests/{requestId} {
        allow read: if isAdmin();
        allow create: if isOwner(request.resource.data.userId);
        allow update: if isAdmin();
    }
    
    // ============== SITE-WIDE CONTENT (Admin only) ==============
    function canAdminWrite() {
      return isSignedIn() && isAdmin();
    }
    
    match /roster/{memberId} {
      allow read;
      allow write: if canAdminWrite();
    }

    match /announcements/{announcementId} {
      allow read;
      allow write: if canAdminWrite();
    }

    match /games/{gameId} {
      allow read;
      allow write: if canAdminWrite();
    }

    match /heroImages/{imageId} {
      allow read;
      allow write: if canAdminWrite();
    }
    
    match /timelineEvents/{eventId} {
      allow read;
      allow write: if canAdminWrite();
    }
    
    match /coreValues/{valueId} {
      allow read;
      allow write: if canAdminWrite();
    }
    
    match /galleryImages/{imageId} {
      allow read;
      allow write: if canAdminWrite();
    }
    
    match /siteSettings/{settingsId} {
      allow read;
      allow write: if canAdminWrite();
    }
    
     match /pageContent/{pageId} {
      allow read;
      allow write: if canAdminWrite();
    }
  }
}
