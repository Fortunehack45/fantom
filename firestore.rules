rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Hardcoded admin email. For production, consider a custom claim.
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // Collection: users
    // Stores public user profile data.
    match /users/{userId} {
      allow get: if true;
      allow list: if true; // Allows querying for profiles (e.g., by username).
      allow create: if isSignedIn() && isOwner(userId) 
                    && request.resource.data.uid == userId;
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
      allow delete: if isAdmin();
      
      // Subcollections for following/followers
      match /followers/{followerId} {
        allow read: if true;
        allow write: if (isOwner(followerId) && request.auth.uid == followerId) || isAdmin();
      }
      match /following/{followingId} {
        allow read: if true;
        allow write: if isOwner(userId) || isAdmin();
      }
    }
    
    // Collection: usernames
    // Enforces unique usernames.
    match /usernames/{username} {
      allow read: if true;
      allow create: if isSignedIn() 
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      allow delete: if isSignedIn() 
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == resource.data.username;
    }
    
    // Collection: blogPosts
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      
      // Subcollection: comments
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
        allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();

        // Subcollection: replies
        match /replies/{replyId} {
          allow read: if true;
          allow create: if isSignedIn();
          allow update: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
          allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }

    // Collection: shorts
    match /shorts/{shortId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();

      // Subcollection: comments
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
        allow delete: if (isSignedIn() && resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }

    // Collection: chats
    // Private messaging between users.
    match /chats/{chatId} {
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.users;
      allow get, list: if isAdmin(); // Admin can see chat metadata, but not messages
      
      // Subcollection: messages
      match /messages/{messageId} {
         allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
         allow update, delete: if isSignedIn() && request.auth.uid == resource.data.senderId;
      }
    }
    
    // Collection: verificationRequests
    // Users can request verification, only admin can manage.
    match /verificationRequests/{requestId} {
      allow read, update, delete: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
    
    // Admin-only collections for site content.
    // Public can read, only admin can write.
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /timelineEvents/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /galleryImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Sitewide settings collections (footer, etc).
    match /siteSettings/{settingsId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /pageContent/{pageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
