rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    //------------------------------------------------------------
    // Helper Functions
    //------------------------------------------------------------
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      // In a real app, this should check a custom claim or a list of admin UIDs in Firestore.
      return isSignedIn() && request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isAuthor(doc) {
      return isUser(doc.authorId);
    }
    
    // Helper to check if a user is updating only their own profile, without escalating privileges.
    function isUpdatingOwnProfile(data) {
        return data.verification == resource.data.verification;
    }

    //------------------------------------------------------------
    // User Data & Profiles
    //------------------------------------------------------------
    match /users/{userId} {
      // Any signed-in user can query/list users (e.g., for search) and get a specific user's profile.
      allow list, get: if isSignedIn();
      
      // A user can only create their own user document.
      allow create: if isUser(userId);
      
      // A user can update their own profile (but not their verification status), or an admin can update any profile.
      allow update: if (isUser(userId) && isUpdatingOwnProfile(request.resource.data)) || isAdmin();
      
      // Only an admin can delete a user document.
      allow delete: if isAdmin();
      
      // --- Followers & Following Subcollections ---
      match /followers/{followerId} {
        allow read; // Anyone can see who follows a user.
        // Only the follower can add/remove themselves from the list.
        allow create, delete: if isUser(followerId);
      }
      
      match /following/{followingId} {
        allow read; // Anyone can see who a user is following.
        // Only the user themselves can manage their own following list.
        allow create, delete: if isUser(userId);
      }
    }
    
    match /usernames/{username} {
      allow get;
      // A user can only create a username document for their own UID.
      allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      // A user can delete their own username document, or an admin can delete any.
      allow delete: if isAdmin() || isUser(get(/databases/$(database)/documents/usernames/$(username)).data.uid);
    }

    //------------------------------------------------------------
    // Public Content: Blog Posts & Shorts
    //------------------------------------------------------------
    match /blogPosts/{postId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      // Allow update for author, admin, or for anyone to update ONLY the 'likes' array.
      allow update: if (isAuthor(resource.data) || isAdmin()) ||
                      (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      allow delete: if isAuthor(resource.data) || isAdmin();
    }
    
    match /shorts/{shortId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      // Allow update for author, admin, or for anyone to update ONLY the 'likes' or 'shares' fields.
      allow update: if (isAuthor(resource.data) || isAdmin()) ||
                      (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'shares']));
      allow delete: if isAuthor(resource.data) || isAdmin();
    }

    //------------------------------------------------------------
    // Social: Comments & Replies
    //------------------------------------------------------------
    match /{path=**}/comments/{commentId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isAuthor(resource.data) || isAdmin()) ||
                      (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      allow delete: if isAuthor(resource.data) || isAdmin();
    }
    
    match /{path=**}/replies/{replyId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isAuthor(resource.data) || isAdmin()) ||
                      (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      allow delete: if isAuthor(resource.data) || isAdmin();
    }

    //------------------------------------------------------------
    // Private Messaging
    //------------------------------------------------------------
    match /chats/{chatId} {
        // A user can only get, list, or update a chat if they are a participant. Admin can too.
        allow get, list, update: if (isSignedIn() && request.auth.uid in resource.data.users) || isAdmin();
        // A user can create a chat if they are one of the two participants.
        allow create: if isSignedIn() && request.auth.uid in request.resource.data.users && request.resource.data.users.size() == 2;
        allow delete: if isAdmin();

        match /messages/{messageId} {
            // A user can read/create a message if they are a participant in the parent chat.
            allow read, create: if (isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users);
            // Only admin can modify/delete specific messages.
            allow update, delete: if isAdmin();
        }
    }
    
    //------------------------------------------------------------
    // Verification System
    //------------------------------------------------------------
    match /verificationRequests/{requestId} {
      allow get, list, update, delete: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    //------------------------------------------------------------
    // Site-Wide Content (Mostly public read, admin write)
    //------------------------------------------------------------
    match /roster/{memberId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow read;
      allow write: if isAdmin();
    }

    match /timelineEvents/{eventId} {
      allow read;
      allow write: if isAdmin();
    }

    match /coreValues/{valueId} {
      allow read;
      allow write: if isAdmin();
    }

    match /galleryImages/{imageId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow read;
      allow write: if isAdmin();
    }

    match /pageContent/{pageId} {
      allow read;
      allow write: if isAdmin();
    }
  }
}
