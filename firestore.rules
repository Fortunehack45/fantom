
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is the site admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    // Function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // ========= USERS & PROFILES =========
    match /users/{userId} {
      // READ: Anyone can read user profiles to view them.
      allow get: if true;
      allow list: if true;

      // CREATE: A user can only create their own user document.
      allow create: if isOwner(userId);
      
      // UPDATE: A user can only update their own profile data.
      // They cannot change their verification status.
      // Admin can update any profile (e.g., to grant verification).
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
      
      // DELETE: No one can delete user profiles for now.
      allow delete: if false;

      // --- Subcollections ---
      match /followers/{followerId} {
        allow read: if true;
        // A user can only manage their own entry in another user's followers list.
        allow write: if isOwner(followerId) || isAdmin();
      }
      
      match /following/{followingId} {
        allow read: if true;
        // A user can only manage their own following list.
        allow write: if isOwner(userId) || isAdmin();
      }
    }
    
    // To enforce unique usernames.
    match /usernames/{username} {
      // READ: Anyone can read to check for existence.
      allow read: if true;
      
      // WRITE: A user can only create a username document if it matches
      // the username in their own user document. This prevents impersonation.
      allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      
      // DELETE: Only the user who owns the username or an admin can delete it.
      allow delete: if isSignedIn() && (resource.data.uid == request.auth.uid || isAdmin());
    }
    
    // ========= CONTENT: BLOG & SHORTS =========
    match /blogPosts/{postId} {
      // READ: Anyone can read public blog posts.
      allow read: if true;
      
      // CREATE: Any signed-in user can create a post, but must own it.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      
      // UPDATE, DELETE: Only the author or an admin can update/delete.
      allow update, delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());

      // --- Comments & Replies ---
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
        
        match /replies/{replyId} {
          allow read: if true;
          allow create: if isSignedIn();
          allow update, delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
        }
      }
    }
    
    match /shorts/{shortId} {
      // READ: Anyone can read public shorts.
      allow read: if true;
      
      // CREATE: Any signed-in user can create a short, but must own it.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      
      // UPDATE, DELETE: Only the author or an admin can update/delete.
      allow update, delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
      
      // --- Comments on Shorts ---
       match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
       }
    }
    
    // ========= PRIVATE MESSAGING =========
    match /chats/{chatId} {
      // READ, UPDATE, WRITE: Only if the user is a participant in the chat.
      allow read, write, update: if isSignedIn() && request.auth.uid in resource.data.users;
      
      // --- Messages Subcollection ---
      match /messages/{messageId} {
        // READ, CREATE: Only if the user is a participant in the parent chat.
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        allow update, delete: if false; // Messages are immutable for now.
      }
    }
    
    // ========= VERIFICATION SYSTEM =========
    match /verificationRequests/{requestId} {
      // READ, UPDATE, DELETE: Only the admin can manage requests.
      allow read, update, delete: if isAdmin();
      
      // CREATE: A user can only create a request for their own UID.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
    
    // ========= SITE-WIDE CONTENT (Admin-Only) =========
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
     match /timelineEvents/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /pageContent/{pageName} {
       allow read: if true;
       allow write: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
