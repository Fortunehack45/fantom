
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for Admin role
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // ============== USERS & PROFILES ==============
    match /users/{userId} {
      // READ: Anyone can read public profile data.
      allow get, list: if true;
      
      // CREATE: A user can only create their own document.
      allow create: if request.auth != null && request.auth.uid == userId;

      // UPDATE: A user can only update their own profile.
      // They cannot change their verification status.
      allow update: if request.auth != null && 
                       (request.auth.uid == userId && request.resource.data.verification == resource.data.verification) || isAdmin();
                       
      // DELETE: Only admins can delete user accounts.
      allow delete: if isAdmin();
      
      // --- SUBCOLLECTIONS ---
      match /followers/{followerId} {
        // READ: Anyone can see who follows a user.
        allow get, list: if true;
        // WRITE: You can only add/remove yourself from someone's follower list.
        allow write: if request.auth != null && request.auth.uid == followerId;
      }
      
      match /following/{followingId} {
        // READ: Anyone can see who a user follows.
        allow get, list: if true;
        // WRITE: You can only manage your own "following" list.
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // ============== UNIQUE USERNAMES ==============
    match /usernames/{username} {
      // READ: No one needs to read this collection directly.
      allow read: if false;

      // CREATE: A user can only create a username document if the username
      // matches the one in their own user document. This prevents impersonation.
      allow create: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
                       
      // DELETE: A user can delete their old username document when changing it.
      // The new username document creation is handled by the rule above.
      allow delete: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.uid == resource.data.uid;
    }

    // ============== BLOG POSTS ==============
    match /blogPosts/{postId} {
      // READ: Anyone can read blog posts.
      allow get, list: if true;
      
      // CREATE: Any signed-in user can create a post, but the authorId must be their own.
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;

      // UPDATE/DELETE: Only the author or an admin can update or delete a post.
      allow update, delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();
      
      // --- SUBCOLLECTIONS ---
      match /comments/{commentId} {
        // READ: Anyone can read comments.
        allow get, list: if true;
        // CREATE: Any signed-in user can create a comment.
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        // UPDATE/DELETE: Only the author or an admin can update/delete.
        allow update, delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();
        
        match /replies/{replyId} {
          // READ: Anyone can read replies.
          allow get, list: if true;
          // CREATE: Any signed-in user can create a reply.
          allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
          // UPDATE/DELETE: Only the author or an admin can update/delete.
          allow update, delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();
        }
      }
    }

    // ============== SHORTS ==============
    match /shorts/{shortId} {
      // READ: Anyone can read shorts.
      allow get, list: if true;
      
      // CREATE: Any signed-in user can create a short, but the authorId must be their own.
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      
      // UPDATE/DELETE: Only the author or an admin can update or delete a short.
      allow update, delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();
      
      // --- SUBCOLLECTIONS ---
      match /comments/{commentId} {
        // READ: Anyone can read comments.
        allow get, list: if true;
        // CREATE: Any signed-in user can create a comment.
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        // UPDATE/DELETE: Only the author or an admin can update/delete.
        allow update, delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();
      }
    }
    
    // ============== PRIVATE MESSAGING ==============
    match /chats/{chatId} {
      // ACCESS: A user can only access a chat document if their UID is in the `users` array.
      // Admin can get/list to see participants, but not messages.
      allow get, list: if (request.auth != null && request.auth.uid in resource.data.users) || isAdmin();
      allow create, update: if request.auth != null && request.auth.uid in resource.data.users;
      
      match /messages/{messageId} {
        // ACCESS: Access is granted by checking the parent chat document.
        allow read, create: if request.auth != null &&
                             get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
      }
    }
    
    // ============== VERIFICATION ==============
    match /verificationRequests/{requestId} {
      // CREATE: A user can only create a request for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // READ/UPDATE/DELETE: Only an admin can manage requests.
      allow read, update, delete: if isAdmin();
    }
    
    // ============== ADMIN-MANAGED CONTENT ==============
    // These collections are publicly readable but only writable by an admin.
    
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /siteSettings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /pageContent/{pageId} {
       allow read: if true;
       allow write: if isAdmin();
    }
  }
}
