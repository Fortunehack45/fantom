rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is the admin
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(resource) {
      return request.auth.uid == resource.data.authorId;
    }
    
    // Helper function to check if the user is the owner of a profile
    function isProfileOwner(userId) {
      return request.auth.uid == userId;
    }

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Rules for Users Collection
    match /users/{userId} {
      // Anyone can read a user's profile
      allow read: if true;
      // A user can create their own profile document
      allow create: if isProfileOwner(userId);
      // A user can only update their own profile
      allow update: if isProfileOwner(userId);
      // A user can delete their own profile (or an admin can)
      allow delete: if isProfileOwner(userId) || isAdmin();
    }
    
    match /usernames/{username} {
      // Allow reading to check for uniqueness, but no one can list all usernames
      allow read: if false;
      // Allow creating a username document only if the user is signed in
      allow create: if isSignedIn();
      // No one can update or delete a username document to prevent theft
      allow update, delete: if false;
    }

    // Rules for Blog Posts
    match /blogPosts/{postId} {
      allow read: if true;
      // Admin can create/delete/update anything on a post
      allow create, delete: if isAdmin();
      // Admin can update anything.
      // Signed-in users can update *only* the 'likes' array.
      allow update: if isAdmin() || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
    }

    // Public read access for other collections, write access for admin only
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /timelineEvents/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /coreValues/{valueId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /galleryImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /siteSettings/{settingId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    match /pageContent/{pageId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Rules for comments and replies subcollections
    match /blogPosts/{postId}/comments/{commentId} {
      allow read: if true;
      
      // Anyone signed in can create a comment
      allow create: if isSignedIn();
      
      // Allow authenticated users to update only the 'likes' array on a comment.
      // Admins can update anything.
      allow update: if (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])) || isAdmin();
      
      // Only the author or an admin can delete a comment
      allow delete: if isSignedIn() && (isOwner(resource) || isAdmin());

      // Rules for replies subcollection
      match /replies/{replyId} {
        allow read: if true;
        
        // Anyone signed in can create a reply
        allow create: if isSignedIn();
        
        // Allow authenticated users to update only the 'likes' array on a reply.
        // Admins can update anything.
        allow update: if (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])) || isAdmin();

        // Only the author or an admin can delete a reply
        allow delete: if isSignedIn() && (isOwner(resource) || isAdmin());
      }
    }
  }
}
