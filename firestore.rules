
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserAdmin() {
      return isUserAuthenticated() && request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isNewUsernameAvailable(username) {
        return !exists(/databases/$(database)/documents/usernames/$(username.lower()));
    }
    
    function isExistingUsernameOwner(username) {
        return get(/databases/$(database)/documents/usernames/$(username.lower())).data.uid == request.auth.uid;
    }


    // Collection: users
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) || isUserAdmin();
      
      // Subcollection: followers
      match /followers/{followerId} {
        allow read: if true;
        allow create, delete: if isOwner(followerId);
      }
      
      // Subcollection: following
      match /following/{followingId} {
        allow read: if true;
        allow create, delete: if isOwner(userId);
      }
    }

    // Collection: usernames (for uniqueness)
    match /usernames/{username} {
        allow read: if true;
        // Create is allowed if the user is authenticated and the username is not taken.
        allow create: if isUserAuthenticated() && isNewUsernameAvailable(username);
        // Delete is allowed if the user owns the username document.
        allow delete: if isUserAuthenticated() && isExistingUsernameOwner(username);
    }
    
    // Collection: blogPosts
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if isUserAuthenticated();
      allow update, delete: if isUserAdmin() || (isUserAuthenticated() && resource.data.authorId == request.auth.uid);
      
      // Subcollection: comments
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isUserAuthenticated();
        allow update, delete: if isUserAdmin() || (isUserAuthenticated() && resource.data.authorId == request.auth.uid);
        
        // Sub-subcollection: replies
        match /replies/{replyId} {
            allow read: if true;
            allow create: if isUserAuthenticated();
            allow update, delete: if isUserAdmin() || (isUserAuthenticated() && resource.data.authorId == request.auth.uid);
        }
      }
    }
    
    // Collection: shorts
    match /shorts/{shortId} {
        allow read: if true;
        allow create: if isUserAuthenticated();
        allow update, delete: if isUserAdmin() || (isUserAuthenticated() && resource.data.authorId == request.auth.uid);
        
        // Subcollection: comments
        match /comments/{commentId} {
            allow read: if true;
            allow create: if isUserAuthenticated();
            allow delete: if isUserAdmin() || (isUserAuthenticated() && resource.data.authorId == request.auth.uid);
        }
    }

    // Collection: siteSettings
    match /siteSettings/{docId} {
      allow read: if true;
      allow write: if isUserAdmin();
    }
    
    // Collection: pageContent
    match /pageContent/{docId} {
        allow read: if true;
        allow write: if isUserAdmin();
    }
    
    // Collection: verificationRequests
    match /verificationRequests/{requestId} {
      allow read: if isUserAdmin();
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isUserAdmin(); // Admin can approve/deny
    }
    
    // Collection: chats
    match /chats/{chatId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in resource.data.users;
        allow update: if isUserAdmin() || (isUserAuthenticated() && request.auth.uid in resource.data.users);
        
        // Subcollection: messages
        match /messages/{messageId} {
            allow read, create: if isUserAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
        }
    }
    
    // Admin-managed collections
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isUserAdmin();
    }

    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isUserAdmin();
    }

    match /games/{gameId} {
      allow read: if true;
      allow write: if isUserAdmin();
    }

    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isUserAdmin();
    }
    
    match /timelineEvents/{eventId} {
      allow read: if true;
      allow write: if isUserAdmin();
    }
    
    match /coreValues/{valueId} {
      allow read: if true;
      allow write: if isUserAdmin();
    }
    
    match /galleryImages/{imageId} {
      allow read: if true;
      allow write: if isUserAdmin();
    }
  }
}
