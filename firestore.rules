rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // Rules for User Profiles
    // Allows public read for profiles, but only the user or an admin can write.
    match /users/{userId} {
      allow get: if true;
      allow list: if true; // <-- CRITICAL FIX: Allows querying for public profiles.
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if (request.auth != null && request.auth.uid == userId && request.resource.data.verification == resource.data.verification) || isAdmin();
      allow delete: if isAdmin();
      
      // Followers and Following subcollections
      match /followers/{followerId} {
        allow read: if true;
        allow write: if (request.auth != null && request.auth.uid == followerId) || isAdmin();
      }
      match /following/{followingId} {
        allow read: if true;
        allow write: if (request.auth != null && request.auth.uid == userId) || isAdmin();
      }
    }

    // Rules for Unique Usernames
    // Ensures usernames are unique and can only be claimed by the correct user.
    match /usernames/{username} {
      allow get: if true;
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
    }
    
    // Rules for Blog Posts
    // Anyone can read, but only authenticated users can create.
    // Only the author or an admin can update or delete.
    match /blogPosts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update: if (request.auth != null && (resource.data.authorId == request.auth.uid || isAdmin()));
      allow delete: if (request.auth != null && (resource.data.authorId == request.auth.uid || isAdmin()));
      
      // Comments and Replies on Blog Posts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow delete: if request.auth != null && (resource.data.authorId == request.auth.uid || isAdmin());
        
        match /replies/{replyId} {
            allow read: if true;
            allow create: if request.auth != null;
            allow delete: if request.auth != null && (resource.data.authorId == request.auth.uid || isAdmin());
        }
      }
    }
    
    // Rules for Shorts
    // Anyone can read, but only authenticated users can create.
    // Only the author or an admin can update or delete.
    match /shorts/{shortId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update: if (request.auth != null && (resource.data.authorId == request.auth.uid || isAdmin()));
      allow delete: if (request.auth != null && (resource.data.authorId == request.auth.uid || isAdmin()));
      
       // Comments on Shorts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow delete: if request.auth != null && (resource.data.authorId == request.auth.uid || isAdmin());
      }
    }

    // Rules for Private Chats
    // Only participants can read or write to a chat.
    match /chats/{chatId} {
      allow get, list: if (request.auth != null && request.auth.uid in resource.data.users) || isAdmin();
      allow create: if request.auth != null && request.auth.uid in request.resource.data.users;
      allow update: if request.auth != null && request.auth.uid in resource.data.users;
      
      // Messages within a chat
      match /messages/{messageId} {
        allow read, create: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
      }
    }
    
    // Rules for Verification Requests
    // Users can only create their own request. Only admin can manage them.
    match /verificationRequests/{requestId} {
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow read, update, delete: if isAdmin();
    }
    
    // Rules for Admin-only content
    match /roster/{memberId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    match /games/{gameId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    match /heroImages/{imageId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    match /timelineEvents/{eventId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    match /coreValues/{valueId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
     match /galleryImages/{imageId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    match /siteSettings/{settingsId} {
        allow get: if true;
        allow write: if isAdmin();
    }
    match /pageContent/{pageId} {
        allow get: if true;
        allow write: if isAdmin();
    }
  }
}