rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Allow full access to the designated admin user
      return request.auth.email == 'fortunedomination@gmail.com';
    }

    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isNewUsernameValid(userId, newUsername) {
    	// When a username is changed, ensure the new username document is for the user making the request.
    	let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.data.username == newUsername;
    }

    // --- User Profiles & Usernames ---
    match /users/{userId} {
      allow get, list: if true; // Anyone can view profiles
      
      // Users can create their own profile.
      allow create: if isOwner(userId);
      
      // Users can update their own profile.
      // - They cannot change their verification status.
      // - If they are changing their username, we must verify the corresponding
      //   change in the /usernames collection is valid (see isNewUsernameValid).
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
      
      allow delete: if isAdmin(); // Only admins can delete users
    }

    match /usernames/{username} {
      allow get: if true;
      
      // A user can only create a username document if:
      // 1. They are authenticated.
      // 2. The username they are creating matches the username in their own user document.
      allow create: if isUserAuthenticated() && isNewUsernameValid(request.auth.uid, username);
      
      // A user can only delete a username document if they own it.
      allow delete: if isUserAuthenticated() && getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username != username || isAdmin();
    }
    
    // --- User Social Graph (Followers/Following) ---
    match /users/{userId}/{followCollection}/{docId} {
        allow get, list: if true; // Anyone can see who follows who
        allow write: if isUserAuthenticated() && (
            (followCollection == 'following' && isOwner(userId)) ||
            (followCollection == 'followers' && docId == request.auth.uid)
        ) || isAdmin();
    }

    // --- Content: Blog Posts & Shorts ---
    match /blogPosts/{postId} {
      allow get, list: if true;
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      
      // Allow updates only if the user is the author OR an admin.
      // Additionally, allow any authenticated user to update ONLY the likes array.
      allow update: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin() ||
                      (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
                      
      allow delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
    }

    match /shorts/{shortId} {
      allow get, list: if true;
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
       // Allow updates only if the user is the author OR an admin.
      // Additionally, allow any authenticated user to update ONLY the likes and shares.
      allow update: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin() ||
                      (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'shares']));
      allow delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
    }

    // --- Content Interaction: Comments & Replies ---
    match /blogPosts/{postId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isUserAuthenticated();
      allow delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
    }

    match /blogPosts/{postId}/comments/{commentId}/replies/{replyId} {
        allow get, list: if true;
        allow create: if isUserAuthenticated();
        allow delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
    }
    
    match /shorts/{shortId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isUserAuthenticated();
      allow delete: if (isUserAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
    }

    // --- Private Messaging ---
    match /chats/{chatId} {
      // Allow R/W only if the user is a participant in the chat.
      allow read, write: if isUserAuthenticated() && request.auth.uid in resource.data.users;
      // Admin can list chats for moderation, but not read messages directly via list.
      allow list: if isAdmin();
    }

    match /chats/{chatId}/messages/{messageId} {
      // Can read/create messages only if they are a participant of the parent chat.
      allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      allow update, delete: if isAdmin(); // Admin can moderate messages
    }
    
    // --- Verification System ---
    match /verificationRequests/{requestId} {
    	allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isAdmin();
    }

    // --- Site-wide Content (Admin-only write access) ---
    match /{collection}/{docId} {
      // Applies to: roster, announcements, games, heroImages, pageContent, siteSettings, timelineEvents, coreValues, galleryImages
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    // --- Collection Group Queries for Admin "Fix User Data" ---
    match /{path=**}/comments/{commentId} {
    	allow read, write: if isAdmin();
    }
    
    match /{path=**}/replies/{replyId} {
    	allow read, write: if isAdmin();
    }
  }
}
