
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for Admin role
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }
  
    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // =============================================
    // User Profiles & Unique Usernames
    // =============================================
    match /users/{userId} {
      allow read, list;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if (isOwner(userId) && request.resource.data.verification == resource.data.verification) || isAdmin();
    }
    
    match /usernames/{username} {
      allow read;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      allow delete: if isSignedIn() && isOwner(resource.data.uid) || isAdmin();
    }

    // =============================================
    // Content: Blog Posts & Shorts
    // =============================================
    match /blogPosts/{postId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
      
       match /comments/{commentId} {
        allow read;
        allow create: if isSignedIn();
        allow update, delete: if isOwner(resource.data.authorId) || isAdmin();

        match /replies/{replyId} {
          allow read;
          allow create: if isSignedIn();
          allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
        }
      }
    }
    
    match /shorts/{shortId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
      
      match /comments/{commentId} {
        allow read;
        allow create: if isSignedIn();
        allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
      }
    }

    // =============================================
    // Social: Followers & Following
    // =============================================
    match /users/{userId}/followers/{followerId} {
      allow read;
      allow create, delete: if isOwner(followerId);
    }
    
    match /users/{userId}/following/{followingId} {
      allow read;
      allow create, delete: if isOwner(userId);
    }

    // =============================================
    // Private Messaging
    // =============================================
    match /chats/{chatId} {
      allow get, list: if request.auth.uid in resource.data.users || isAdmin();
      allow create, update: if request.auth.uid in resource.data.users;
      
      match /messages/{messageId} {
        allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
      }
    }

    // =============================================
    // Verification System
    // =============================================
    match /verificationRequests/{requestId} {
      allow read, update, delete: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // =============================================
    // Admin & Site Management (Publicly Readable)
    // =============================================
    match /roster/{memberId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read;
      allow write: if isAdmin();
    }

    match /pageContent/{pageName} {
        allow read;
        allow write: if isAdmin();
    }

    match /siteSettings/{settingsId} {
        allow read;
        allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
        allow read;
        allow write: if isAdmin();
    }

    match /coreValues/{valueId} {
        allow read;
        allow write: if isAdmin();
    }

    match /galleryImages/{imageId} {
        allow read;
        allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
        allow read;
        allow write: if isAdmin();
    }
  }
}

    