rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    // =============================================================
    // User Management
    // =============================================================
    match /users/{userId} {
      // READ: Anyone can view user profiles. This is required for public profile pages.
      allow get, list: if true;
      
      // CREATE: A user can only create their own user document.
      allow create: if request.auth != null && request.auth.uid == userId;

      // UPDATE: A user can only update their own profile data.
      // They cannot change their own verification status.
      allow update: if (request.auth != null && request.auth.uid == userId
                        && request.resource.data.verification == resource.data.verification)
                     || isAdmin();
                     
      // DELETE: No one can delete user documents for now to preserve data integrity.
      allow delete: if false;

      // Subcollections for followers/following
      match /followers/{followerId} {
          allow read: if true;
          allow write: if (request.auth != null && request.auth.uid == followerId) || isAdmin();
      }
      match /following/{followingId} {
          allow read: if true;
          allow write: if (request.auth != null && request.auth.uid == userId) || isAdmin();
      }
    }

    // This collection enforces unique usernames.
    match /usernames/{username} {
      // READ: Allow reading to check for existence.
      allow get: if true;
      allow list: if false; // Don't allow listing all usernames.
      
      // WRITE: A user can only create a username document if the username
      // matches the one in their own user document, preventing impersonation.
      allow create: if request.auth != null &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      // DELETE: Allow a user to delete their old username document when changing usernames.
      allow delete: if request.auth != null &&
                      resource.data.uid == request.auth.uid;
    }

    // =============================================================
    // Content Management (Blog Posts, Shorts, Comments)
    // =============================================================
    
    // Blog Posts
    match /blogPosts/{postId} {
        allow get, list: if true; // Publicly readable
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();
        
        // Comments on Blog Posts
        match /comments/{commentId} {
            allow get, list: if true;
            allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
            allow delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();

            // Replies to Comments
            match /replies/{replyId} {
                allow get, list: if true;
                allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
                allow delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();
            }
        }
    }
    
    // Shorts
    match /shorts/{shortId} {
        allow get, list: if true;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();

        // Comments on Shorts
        match /comments/{commentId} {
            allow get, list: if true;
            allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
            allow delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();
        }
    }

    // =============================================================
    // Private Messaging
    // =============================================================
    match /chats/{chatId} {
      // Only chat participants or an Admin can read/write to a chat document.
      allow read, write, update: if (request.auth != null && request.auth.uid in resource.data.users) || isAdmin();
      
      // Messages subcollection
      match /messages/{messageId} {
        // Inherits parent rule, but we check explicitly for safety.
        // A user must be part of the chat to read/create messages.
        allow read, create: if (request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.users[0] == request.auth.uid ||
                                get(/databases/$(database)/documents/chats/$(chatId)).data.users[1] == request.auth.uid) || isAdmin();
        allow update, delete: if false; // Messages are immutable
      }
    }

    // =============================================================
    // Verification System
    // =============================================================
    match /verificationRequests/{requestId} {
      // CREATE: A user can only create a request for their own UID.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // READ/UPDATE/DELETE: Only an Admin can manage requests.
      allow read, update, delete: if isAdmin();
    }
    
    // =============================================================
    // Site & Admin Management
    // =============================================================
    
    // Generic rule for collections managed only by the Admin.
    match /{collection}/{docId}
    where collection in ['roster', 'announcements', 'games', 'heroImages', 'timelineEvents', 'coreValues', 'galleryImages', 'pageContent', 'siteSettings'] {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
