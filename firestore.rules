
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isUserAccountOwner(userId) {
      return isOwner(userId);
    }

    // Collection: users
    match /users/{userId} {
      allow get: if true;
      allow list: if true; // Allows querying by username for public profiles
      allow create: if isUserAccountOwner(userId)
                    && request.resource.data.uid == userId
                    && request.resource.data.email == request.auth.token.email
                    && !exists(/databases/$(database)/documents/usernames/$(request.resource.data.lowercaseUsername));
      allow update: if (isUserAccountOwner(userId) 
                      && request.resource.data.verification == resource.data.verification) // Prevent users from verifying themselves
                    || isAdmin();
    }

    // Collection: usernames (for uniqueness)
    match /usernames/{username} {
      allow get: if true;
      allow create: if isSignedIn() 
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.lowercaseUsername == username;
      allow delete: if isSignedIn()
                     && resource.data.uid == request.auth.uid;
    }

    // Collection: blogPosts
    match /blogPosts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
    }

    // Collection: shorts
    match /shorts/{shortId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
    }

    // Subcollection: comments (for blog posts and shorts)
    match /{collection}/{docId}/comments/{commentId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
      
       // Sub-collection: replies (for blog comments)
       match /replies/{replyId} {
         allow read: if true;
         allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
         allow update, delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
       }
    }

    // Collection: chats
    match /chats/{chatId} {
      allow read, update, write: if isSignedIn() && request.auth.uid in resource.data.users;
      allow list: if isAdmin(); // Admin can see list of chats for moderation, but not content
      
      // Subcollection: messages
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    // Subcollections: followers & following
    match /users/{userId}/followers/{followerId} {
        allow read: if true;
        allow create: if isSignedIn() && followerId == request.auth.uid; // You can add yourself as a follower
        allow delete: if isSignedIn() && followerId == request.auth.uid; // You can remove yourself
    }

    match /users/{userId}/following/{followingId} {
        allow read: if true;
        allow create: if isSignedIn() && userId == request.auth.uid; // You can follow someone
        allow delete: if isSignedIn() && userId == request.auth.uid; // You can unfollow someone
    }

    // Collection: verificationRequests
    match /verificationRequests/{requestId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isAdmin();
    }

    // Admin-only mutable collections (publicly readable)
    match /roster/{memberId} {
      allow get, list: if true;
      allow write, delete: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow write, delete: if isAdmin();
    }

    match /games/{gameId} {
      allow get, list: if true;
      allow write, delete: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow get, list: if true;
      allow write, delete: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
      allow get, list: if true;
      allow write, delete: if isAdmin();
    }
    
    match /coreValues/{valueId} {
        allow get, list: if true;
        allow write, delete: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
        allow get, list: if true;
        allow write, delete: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow get: if true;
      allow write: if isAdmin();
    }

    match /pageContent/{pageId} {
      allow get: if true;
      allow write: if isAdmin();
    }
  }
}
