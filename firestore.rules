rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for Admin role
    function isAdmin() {
      return request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    //============================================================
    // USER ACCOUNTS & PROFILES
    //============================================================
    match /users/{userId} {
      // Anyone can view a user's profile (get) or query the user list (list)
      allow read: if true;
      
      // A user can create their own document
      allow create: if isOwner(userId);
      
      // A user can only update their own profile fields. Verification cannot be changed by the user.
      allow update: if (isOwner(userId) && !('verification' in request.resource.data)) || isAdmin();
    }
    
    match /usernames/{username} {
      // Anyone can check if a username exists
      allow get: if true;
      
      // Only the authenticated user whose UID matches the one in the document can create/delete a username entry
      allow create: if request.auth.uid == request.resource.data.uid;
      allow delete: if request.auth.uid == resource.data.uid;
    }

    //============================================================
    // SOCIAL: FOLLOWERS / FOLLOWING
    //============================================================
    match /users/{userId}/followers/{followerId} {
        // A user can add/remove themselves from another user's followers list.
        allow write: if isOwner(followerId);
        allow read: if true;
    }
    
    match /users/{userId}/following/{followingId} {
        // A user can only manage their own following list.
        allow write: if isOwner(userId);
        allow read: if true;
    }

    //============================================================
    // CONTENT: BLOG POSTS & SHORTS
    //============================================================
    match /blogPosts/{postId} {
      // Anyone can read any blog post
      allow get: if true;
      allow list: if true;

      // An authenticated user can create a post, but the authorId must be their own UID
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      
      // Anyone can like/unlike a post, but cannot change any other field.
      // The author or an admin can update any field.
      allow update: if (request.auth != null && request.resource.data.keys().hasOnly(['likes'])) || 
                       isOwner(resource.data.authorId) || isAdmin();
      
      // Only the author or an admin can delete a post
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }
    
    match /shorts/{shortId} {
      // Anyone can read any short
      allow get: if true;
      allow list: if true;
      
      // An authenticated user can create a short, but the authorId must be their own UID
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      
      // Anyone can like/unlike a short, but cannot change any other field.
      // The author or an admin can update any field.
      allow update: if (request.auth != null && request.resource.data.keys().hasOnly(['likes'])) ||
                       isOwner(resource.data.authorId) || isAdmin();
      
      // Only the author or an admin can delete a short
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }
    
    //============================================================
    // CONTENT: COMMENTS & REPLIES
    //============================================================
    match /blogPosts/{postId}/comments/{commentId} {
      // Any authenticated user can create a comment
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      // Anyone can read comments
      allow read: if true;
      // Only the comment author or an admin can delete it
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
      allow update: if isOwner(resource.data.authorId);
    }
    
    match /blogPosts/{postId}/comments/{commentId}/replies/{replyId} {
      // Any authenticated user can create a reply
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      // Anyone can read replies
      allow read: if true;
      // Only the reply author or an admin can delete it
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
      allow update: if isOwner(resource.data.authorId);
    }

    match /shorts/{shortId}/comments/{commentId} {
      // Any authenticated user can create a comment
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      // Anyone can read comments
      allow read: if true;
      // Only the comment author or an admin can delete it
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
    }

    //============================================================
    // PRIVATE MESSAGING
    //============================================================
    match /chats/{chatId} {
      // A user can read/write to a chat only if they are a participant
      allow read, write: if request.auth.uid in resource.data.users;
      // Admin can view chat metadata (for moderation), but not list all chats.
      allow get: if isAdmin();
    }

    match /chats/{chatId}/messages/{messageId} {
      // A user can read/write messages in a chat they are part of
      allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }

    //============================================================
    // VERIFICATION SYSTEM
    //============================================================
    match /verificationRequests/{requestId} {
      // A user can create a request for their own ID
      allow create: if isOwner(request.resource.data.userId);
      // Only an admin can read, update, or delete requests
      allow read, update, delete: if isAdmin();
    }
    
    //============================================================
    // ADMIN-ONLY & SITE-WIDE CONTENT
    //============================================================
    match /roster/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /pageContent/{pageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
       allow read: if true;
       allow write: if isAdmin();
    }
    
    match /coreValues/{valueId} {
       allow read: if true;
       allow write: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
       allow read: if true;
       allow write: if isAdmin();
    }
  }
}