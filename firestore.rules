rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'fortunedomination@gmail.com';
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isUserAuthenticated() {
        return request.auth != null;
    }

    // --- User Profiles & Usernames ---
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow get: if true;
      // Users can only create their own user document
      allow create: if isOwner(userId);
      // Users can only update their own profile, but not change verification status
      allow update: if (isOwner(userId) && !('verification' in request.resource.data)) || isAdmin();
       // Allow queries on the users collection (e.g., for finding users by username)
      allow list: if true;
    }

    match /usernames/{username} {
      // Anyone can check if a username exists
      allow get: if true;
      // A user can only create a username document that corresponds to their own user record
      allow create: if request.auth.uid == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.uid;
      // Only the user or admin can delete the old username document
      allow delete: if isOwner(get(/databases/$(database)/documents/usernames/$(username)).data.uid) || isAdmin();
    }

    // --- Content: Blog Posts & Shorts ---
    match /blogPosts/{postId} {
      allow get: if true;
      allow list: if true;
      // Allow authenticated users to create posts, ensuring authorId is their own UID
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      // Allow updates only by the author or an admin
      // Additionally, allow any authenticated user to modify ONLY the 'likes' array
      allow update: if (isOwner(resource.data.authorId) || isAdmin()) || 
                       (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      allow delete: if isOwner(resource.data.authorId) || isAdmin();

      // Comments
      match /comments/{commentId} {
        allow list: if true;
        allow create: if isUserAuthenticated();
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
        // Allow any authenticated user to update ONLY the 'likes' on a comment
        allow update: if isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);

        // Replies to comments
        match /replies/{replyId} {
            allow list: if true;
            allow create: if isUserAuthenticated();
            allow delete: if isOwner(resource.data.authorId) || isAdmin();
             // Allow any authenticated user to update ONLY the 'likes' on a reply
            allow update: if isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
        }
      }
    }

    match /shorts/{shortId} {
      allow get: if true;
      allow list: if true;
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isOwner(resource.data.authorId) || isAdmin()) || 
                       (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'shares']));
      allow delete: if isOwner(resource.data.authorId) || isAdmin();

       // Comments on shorts
      match /comments/{commentId} {
        allow list: if true;
        allow create: if isUserAuthenticated();
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
      }
    }

    // --- Social: Followers ---
    match /users/{userId}/followers/{followerId} {
      // A user can only follow/unfollow for themselves (their ID is followerId)
      allow create, delete: if isOwner(followerId);
      allow get, list: if true;
    }
    match /users/{userId}/following/{followingId} {
       // A user can only manage their own "following" list
      allow create, delete: if isOwner(userId);
       allow get, list: if true;
    }

    // --- Private Messaging ---
    match /chats/{chatId} {
      // Allow read, write, and list only if the user is a participant in the chat
      allow read, write, list: if request.auth.uid in resource.data.users;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Inherit check from parent chat document
        allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
      }
    }

    // --- Verification System ---
    match /verificationRequests/{requestId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isAdmin(); // Only admin can approve/deny
    }
    
    // --- Admin-Only Collections ---
    match /roster/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if isAdmin();
    }
    match /announcements/{announcementId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if isAdmin();
    }
    match /games/{gameId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if isAdmin();
    }
     match /heroImages/{imageId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if isAdmin();
    }
    match /siteSettings/{settingId} {
      allow get: if true;
      allow create, update, delete: if isAdmin();
    }
    match /pageContent/{pageName} {
      allow get: if true;
      allow create, update, delete: if isAdmin();
    }
     match /timelineEvents/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if isAdmin();
    }
     match /coreValues/{valueId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if isAdmin();
    }
    match /galleryImages/{imageId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}