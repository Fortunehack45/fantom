
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // HELPER FUNCTIONS
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email == 'fortunedomination@gmail.com';
    }
    
    function getRole(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isCreatorOrOwner(userId) {
      let role = getRole(userId);
      return role == 'Creator' || role == 'Clan Owner';
    }

    // USERS collection
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow get: if true;
      // Only the user themselves can create their profile document
      allow create: if isOwner(userId)
                    && request.resource.data.uid == userId
                    && request.resource.data.email == request.auth.token.email;
      // Only the user themselves or an admin can update profile info
      allow update: if isOwner(userId) || isAdmin();
      
      // Subcollections for follows
      match /followers/{followerId} {
        // Anyone can read who follows a user
        allow get, list: if true;
        // A user can only add themselves as a follower
        allow create: if isOwner(followerId);
        // A user can only remove themselves
        allow delete: if isOwner(followerId);
      }
      
      match /following/{followingId} {
         // Anyone can read who a user is following
        allow get, list: if true;
        // A user can only add to their own following list
        allow create: if isOwner(userId);
         // A user can only remove from their own following list
        allow delete: if isOwner(userId);
      }
    }
    
    // USERNAMES collection (for ensuring uniqueness)
    match /usernames/{username} {
        // Anyone can check if a username exists
        allow get: if true;
        // A user can claim a username if it's not taken
        allow create: if isSignedIn()
                      && request.resource.data.uid == request.auth.uid;
        // A user can only delete their own username record
        allow delete: if isSignedIn()
                      && resource.data.uid == request.auth.uid;
    }

    // BLOG POSTS collection
    match /blogPosts/{postId} {
      // Anyone can read blog posts
      allow get: if true;
      allow list: if true;
      
      // Any signed-in user can create a post
      allow create: if isSignedIn()
                    && request.resource.data.authorId == request.auth.uid;

      // Only the author or an admin can update or delete
      allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
      
      // Comments subcollection
      match /comments/{commentId} {
        // Anyone can read comments
        allow get, list: if true;
        // Any signed-in user can create a comment
        allow create: if isSignedIn()
                      && request.resource.data.authorId == request.auth.uid;
        // Only the author or an admin can update/delete
        allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
        
        // Replies subcollection
        match /replies/{replyId} {
           // Anyone can read replies
           allow get, list: if true;
           // Any signed-in user can create a reply
           allow create: if isSignedIn()
                         && request.resource.data.authorId == request.auth.uid;
           // Only the author or an admin can update/delete
           allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
        }
      }
    }
    
     // SHORTS collection
    match /shorts/{shortId} {
      // Anyone can read shorts
      allow get, list: if true;
      
      // Any signed-in user can create a short
      allow create: if isSignedIn()
                    && request.resource.data.authorId == request.auth.uid;

      // Only the author or an admin can update or delete
      allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
      
      // Comments subcollection
      match /comments/{commentId} {
        allow get, list: if true;
        allow create: if isSignedIn()
                      && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
      }
    }

    // CHATS collection
    match /chats/{chatId} {
      // Only participants of the chat or an admin can read/write
      allow get: if request.auth.uid in resource.data.users || isAdmin();
      allow list: if request.auth.uid in resource.data.users || isAdmin();
      
      // A user can only create a chat they are a part of
      allow create: if request.auth.uid in request.resource.data.users;
      
      // Only participants can update chat metadata (like last message)
      allow update: if request.auth.uid in resource.data.users;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Only participants or an admin can read messages
        allow get, list: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users || isAdmin();
        
        // A user can only create a message in a chat they are part of, and they must be the sender
        allow create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users
                      && request.resource.data.senderId == request.auth.uid;
      }
    }
    
    // VERIFICATION REQUESTS collection
    match /verificationRequests/{requestId} {
      // User can create a request for themselves
      allow create: if isSignedIn() 
                    && request.resource.data.userId == request.auth.uid;
      // Only Admin can read, update (approve/deny), or delete requests
      allow get, list, update, delete: if isAdmin();
    }
    
    // All other site content collections (announcements, roster, etc.) are Admin-only write
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /roster/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /games/{gameId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /heroImages/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /timelineEvents/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /coreValues/{valueId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /galleryImages/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /siteSettings/{settingsId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /pageContent/{pageId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}
