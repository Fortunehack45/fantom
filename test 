rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    //------------------------------------------------------------
    // Enhanced Helper Functions
    //------------------------------------------------------------
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.email == 'fortunedomination@gmail.com';
    }
    
    function isAuthor(collectionName, resourceId) {
      return isOwner(get(/databases/$(database)/documents/$(collectionName)/$(resourceId)).data.authorId);
    }

    function isInChat(chatData) {
      return isSignedIn() && request.auth.uid in chatData.users;
    }

    function validateUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['username', 'uid']) &&
             data.username is string &&
             data.uid is string;
    }

    //------------------------------------------------------------
    // User Management
    //------------------------------------------------------------
    match /users/{userId} {
      allow get, list;
      allow create: if isOwner(userId) && 
                   request.resource.data.uid == request.auth.uid &&
                   validateUserData();
      allow update: if (isOwner(userId) && 
                   request.resource.data.verification == resource.data.verification) || 
                   isAdmin();
      allow delete: if isAdmin();

      match /following/{followingId} {
        allow read;
        allow create, delete: if isOwner(userId) || isAdmin();
      }

      match /followers/{followerId} {
        allow read;
        allow create, delete: if isOwner(followerId) || isAdmin();
      }
    }

    //------------------------------------------------------------
    // Username Management
    //------------------------------------------------------------
    match /usernames/{username} {
      allow get;
      allow create: if isSignedIn() && 
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      allow delete: if isAdmin() || 
                   isOwner(get(/databases/$(database)/documents/usernames/$(username)).data.uid);
    }

    //------------------------------------------------------------
    // Content Management: Blog Posts & Shorts
    //------------------------------------------------------------
    match /blogPosts/{postId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isAuthor('blogPosts', postId) || isAdmin()) ||
                   (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      allow delete: if isAuthor('blogPosts', postId) || isAdmin();

      match /comments/{commentId} {
        allow read;
        allow create: if isSignedIn();
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
        allow update: if isAdmin();

        match /replies/{replyId} {
          allow read;
          allow create: if isSignedIn();
          allow delete: if isOwner(resource.data.authorId) || isAdmin();
          allow update: if isAdmin();
        }
      }
    }

    match /shorts/{shortId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isAuthor('shorts', shortId) || isAdmin()) ||
                   (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']));
      allow delete: if isAuthor('shorts', shortId) || isAdmin();

      match /comments/{commentId} {
        allow read;
        allow create: if isSignedIn();
        allow delete: if isOwner(resource.data.authorId) || isAdmin();
        allow update: if isAdmin();
      }
    }

    //------------------------------------------------------------
    // Chat System
    //------------------------------------------------------------
    match /chats/{chatId} {
      allow get, list, update: if isInChat(resource.data) || isAdmin();
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.users;
      allow delete: if isAdmin();

      match /messages/{messageId} {
        allow read, create: if isInChat(get(/databases/$(database)/documents/chats/$(chatId)).data) || isAdmin();
      }
    }

    //------------------------------------------------------------
    // Verification System
    //------------------------------------------------------------
    match /verificationRequests/{requestId} {
      allow get, list, update, delete: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    //------------------------------------------------------------
    // Admin-Managed Content (Site-Wide)
    //------------------------------------------------------------
    match /{collection}/{docId} 
    where collection in ['roster', 'announcements', 'games', 'heroImages', 
                        'timelineEvents', 'coreValues', 'galleryImages', 
                        'pageContent', 'siteSettings'] {
      allow read;
      allow write: if isAdmin();
    }

    //------------------------------------------------------------
    // Collection Group Queries for Admin Features
    //------------------------------------------------------------
    match /{path=**}/comments/{commentId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /{path=**}/replies/{replyId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}